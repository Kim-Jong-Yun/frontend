{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js\";\n// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink, faUnlink } from '@fortawesome/free-solid-svg-icons';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\nimport NodeDisconnect from './NodeDisconnect'; // NodeDisconnect 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 연결 해제 단계 관리\n  const [disconnectStep, setDisconnectStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingSecondNode'\n  const [disconnectFirstNodeId, setDisconnectFirstNodeId] = useState(null);\n  const [disconnectSecondNodeId, setDisconnectSecondNodeId] = useState(null);\n\n  // 금지구역 관련 상태\n  const [isCreatingNoGoZone, setIsCreatingNoGoZone] = useState(false); // 금지 구역 생성 모드\n  const [isDeletingNoGoZone, setIsDeletingNoGoZone] = useState(false); // 금지 구역 삭제 모드\n  const [dragging, setDragging] = useState(false); // 드래그 상태\n  const [dragStart, setDragStart] = useState(null); // 드래그 시작 지점\n  const [currentRect, setCurrentRect] = useState(null); // 현재 그려지고 있는 사각형\n  const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 목록 저장\n\n  // 맵 패치 로딩 상태 추가\n  const [isPatchingMap, setIsPatchingMap] = useState(false); // 맵 패치 로딩 상태\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.33:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 금지구역 목록을 서버에서 가져오는 함수\n  const fetchNoGoZones = async mapId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n      alert('금지구역을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async map => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/file/${map._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n\n    // 금지구역 가져오기\n    await fetchNoGoZones(map._id);\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawAll(); // 모든 요소 그리기 (노드, 금지구역 등)\n    };\n  };\n\n  // 맵 좌표계를 캔버스 좌표계로 변환하는 함수\n  const mapToMapCoordinates = (x, y) => {\n    return worldToMap(x, y, imageNaturalWidth, imageNaturalHeight);\n  };\n\n  // 캔버스에 모든 요소를 그리는 함수 (지도, 노드, 연결선, 금지구역)\n  const drawAll = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 캔버스 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 금지구역 그리기\n    noGoZones.forEach(zone => {\n      const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.x - topLeft.x;\n      const height = bottomRight.y - topLeft.y;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.x, topLeft.y, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n    });\n\n    // 드래그 중인 사각형 그리기\n    if (currentRect) {\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.2)'; // 반투명 붉은 배경\n      ctx.fillRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n      ctx.strokeStyle = 'red'; // 빨간색 테두리\n      ctx.lineWidth = 1;\n      ctx.strokeRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n    }\n\n    // 연결선을 먼저 그리기\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const {\n            x: startX,\n            y: startY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const {\n            x: endX,\n            y: endY\n          } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(wp => {\n              const {\n                x: wpX,\n                y: wpY\n              } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 금지구역 삭제 모드일 때, 금지구역 위에 삭제 아이콘 표시\n    if (isDeletingNoGoZone) {\n      noGoZones.forEach(zone => {\n        const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n        const size = 20;\n\n        // X 아이콘 그리기\n        ctx.fillStyle = 'red';\n        ctx.font = 'bold 16px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // X 위치를 우측 상단에 배치\n        ctx.fillText('X', topLeft.x + 8, topLeft.y + 15);\n      });\n    }\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 또는 금지구역 변경 시마다 캔버스에 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawAll(); // 모든 요소 다시 그리기\n    }\n  }, [nodes, noGoZones, currentRect, isDeletingNoGoZone]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (!isDeletingNode && !connectionStep.startsWith('selecting') && !disconnectStep.startsWith('selecting') && !isCreatingNoGoZone && !isDeletingNoGoZone && !dragging) {\n      document.body.style.cursor = 'default'; // 모든 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep, disconnectStep, isCreatingNoGoZone, isDeletingNoGoZone, dragging]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    let foundNode = null;\n    for (let node of nodes) {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) {\n        // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      setHoveredNode(null);\n    }\n\n    // 금지구역 생성 모드일 때 드래그 중인 사각형 업데이트\n    if (isCreatingNoGoZone && dragging && dragStart) {\n      const newRect = {\n        x: Math.min(mouseX, dragStart.x),\n        y: Math.min(mouseY, dragStart.y),\n        width: Math.abs(mouseX - dragStart.x),\n        height: Math.abs(mouseY - dragStart.y)\n      };\n      setCurrentRect(newRect);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화 및 드래그 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n    // 드래그 중이었는데 캔버스를 벗어났을 경우 드래그 취소\n    if (isCreatingNoGoZone && dragging) {\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n    }\n  };\n\n  // 드래그 시작 이벤트 핸들러\n  const handleMouseDown = e => {\n    if (isCreatingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const startX = e.clientX - rect.left;\n      const startY = e.clientY - rect.top;\n      setDragStart({\n        x: startX,\n        y: startY\n      });\n      setDragging(true);\n      document.body.style.cursor = 'crosshair';\n    }\n\n    // 금지구역 삭제 모드일 때\n    if (isDeletingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const clickX = e.clientX - rect.left;\n      const clickY = e.clientY - rect.top;\n\n      // 금지구역 클릭 여부 확인\n      const clickedZone = noGoZones.find(zone => {\n        const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n        const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n        return clickX >= topLeft.x && clickX <= bottomRight.x && clickY >= topLeft.y && clickY <= bottomRight.y;\n      });\n      if (clickedZone) {\n        handleDeleteNoGoZone(clickedZone._id);\n      }\n    }\n  };\n\n  // 드래그 종료 이벤트 핸들러\n  const handleMouseUp = async e => {\n    if (isCreatingNoGoZone && dragging && dragStart && currentRect) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n\n      // 드래그 완료 후 사각형의 최종 위치와 크기 설정\n      const finalRect = {\n        x: Math.min(endX, dragStart.x),\n        y: Math.min(endY, dragStart.y),\n        width: Math.abs(endX - dragStart.x),\n        height: Math.abs(endY - dragStart.y)\n      };\n\n      // 실제 월드 좌표로 변환하여 금지 구역 생성\n      const topLeftWorld = mapToWorld(finalRect.x, finalRect.y, imageNaturalWidth, imageNaturalHeight);\n      const bottomRightWorld = mapToWorld(finalRect.x + finalRect.width, finalRect.y + finalRect.height, imageNaturalWidth, imageNaturalHeight);\n      const noGoZone = {\n        topLeft: topLeftWorld,\n        bottomRight: bottomRightWorld,\n        mapId: selectedMap._id\n      };\n\n      // 금지구역 서버에 저장\n      const token = localStorage.getItem('token');\n      try {\n        const response = await axios.post('http://172.30.1.33:5557/map/no-go-zones', noGoZone, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('금지 구역이 성공적으로 생성되었습니다.');\n        setNoGoZones([...noGoZones, response.data.noGoZone]); // 생성된 금지 구역 추가\n      } catch (error) {\n        console.error('금지 구역 생성 중 오류 발생:', error);\n        alert('금지 구역 생성에 실패했습니다.');\n      }\n\n      // 상태 초기화\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 연결 해제 모드 활성화 함수\n  const handleDisconnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setDisconnectStep('selectingFirstNode');\n    setDisconnectFirstNodeId(null);\n    setDisconnectSecondNodeId(null);\n    alert('연결을 해제할 첫 번째 노드를 선택하세요.');\n    document.body.style.cursor = 'pointer'; // 연결 해제 모드 커서로 변경\n  };\n\n  // 금지구역 생성 모드 활성화 함수\n  const handleCreateNoGoZone = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNoGoZone(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    document.body.style.cursor = 'crosshair'; // 금지 구역 생성 모드 커서로 변경\n  };\n\n  // 금지구역 삭제 모드를 활성화하는 함수\n  const handleDeleteNoGoZoneMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNoGoZone(true);\n    setIsCreatingNoGoZone(false); // 생성 모드 비활성화\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    alert('삭제할 금지 구역을 클릭하세요.');\n    document.body.style.cursor = 'not-allowed'; // 삭제 모드 커서로 변경\n  };\n\n  // 금지구역을 삭제하는 함수\n  const handleDeleteNoGoZone = async zoneId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    const confirmDelete = window.confirm('이 금지 구역을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n    try {\n      await axios.delete(`http://172.30.1.33:5557/map/no-go-zones/${zoneId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert('금지 구역이 성공적으로 삭제되었습니다.');\n      setNoGoZones(noGoZones.filter(zone => zone._id !== zoneId));\n    } catch (error) {\n      console.error('금지 구역 삭제 중 오류 발생:', error);\n      alert('금지 구역 삭제에 실패했습니다.');\n    } finally {\n      setIsDeletingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가, 연결 해제\n  const handleMapClick = async e => {\n    if (!selectedMap) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n    const {\n      x,\n      y\n    } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n    try {\n      // 연결 해제 모드 처리\n      if (disconnectStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          setDisconnectFirstNodeId(clickedNode._id);\n          setDisconnectStep('selectingSecondNode');\n          alert('연결을 해제할 두 번째 노드를 선택하세요.');\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n      if (disconnectStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택 및 연결 해제\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          if (clickedNode._id === disconnectFirstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          setDisconnectSecondNodeId(clickedNode._id);\n          setDisconnectStep('idle');\n          document.body.style.cursor = 'default'; // 커서 복구\n\n          // 연결 해제 로직 호출 (NodeDisconnect 컴포넌트에서 처리)\n          // 여기서는 NodeDisconnect 컴포넌트의 onDisconnectSuccess를 통해 처리됩니다.\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 금지구역 삭제 모드 처리\n      if (isDeletingNoGoZone) {\n        // 클릭한 위치가 금지구역 내에 있는지 확인\n        const clickedZone = noGoZones.find(zone => {\n          const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n          const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n          return clickX >= topLeft.x && clickX <= bottomRight.x && clickY >= topLeft.y && clickY <= bottomRight.y;\n        });\n        if (clickedZone) {\n          handleDeleteNoGoZone(clickedZone._id);\n        } else {\n          alert('금지 구역을 클릭해주세요.');\n        }\n        return; // 삭제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 기존 연결 및 노드 생성, 삭제 모드 처리\n      if (connectionStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          setFirstNodeId(clickedNode._id);\n          if (waypointCount > 0) {\n            setConnectionStep('selectingWaypoints');\n            alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n            document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n          } else {\n            setConnectionStep('selectingSecondNode');\n            alert('두 번째 노드를 선택하세요.');\n            document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (connectionStep === 'selectingWaypoints') {\n        // 웨이포인트 추가\n        const newWaypoint = {\n          x,\n          y\n        };\n        setWaypoints([...waypoints, newWaypoint]);\n        setCurrentWaypoint(currentWaypoint + 1);\n        if (currentWaypoint + 1 === waypointCount) {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n          document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n        } else {\n          alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n        }\n      } else if (connectionStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          if (clickedNode._id === firstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          try {\n            // 웨이포인트 포함 총 거리 계산\n            const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n\n            // API 요청: 연결 및 거리 정보 포함\n            const token = localStorage.getItem('token');\n            await axios.post(`http://172.30.1.33:5557/map/node/connect`, {\n              node1: firstNodeId,\n              node2: clickedNode._id,\n              waypoints: waypoints,\n              distance: totalDistance // 거리 값 추가\n            }, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            alert(`노드가 성공적으로 연결되었습니다. 전체 꺾인 경로의 가중치: ${totalDistance.toFixed(2)}`);\n\n            // 연결 생성 후 상태 초기화\n            setConnectionStep('idle');\n            setFirstNodeId(null);\n            setWaypoints([]);\n            setWaypointCount(0);\n            setCurrentWaypoint(0);\n            document.body.style.cursor = 'default'; // 커서 복구\n            await fetchNodes(selectedMap._id); // 노드 목록 갱신\n            drawAll(); // 노드 및 간선 다시 그리기\n          } catch (error) {\n            console.error('노드 연결 중 오류 발생:', error);\n            alert('노드 연결에 실패했습니다.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (isCreatingNode) {\n        // 노드 생성 로직\n        setNodeX(x);\n        setNodeY(y);\n        setIsCreatingNode(false);\n        setIsNodePopupOpen(true);\n        document.body.style.cursor = 'default';\n      } else if (isDeletingNode) {\n        // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n        let nodeToDelete = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            nodeToDelete = node;\n            break;\n          }\n        }\n        if (nodeToDelete) {\n          const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n          if (confirmDelete) {\n            try {\n              const token = localStorage.getItem('token');\n              await axios.put(`http://172.30.1.33:5557/map/node/${nodeToDelete._id}`, {}, {\n                // 두 번째 인자를 빈 객체로 전달\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              alert('노드가 성공적으로 삭제되었습니다.');\n\n              // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n              await fetchNodes(selectedMap._id);\n              drawAll(); // 삭제 후 모든 요소 다시 그리기\n\n              setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n            } catch (error) {\n              console.error('노드 삭제 중 오류 발생:', error);\n              alert('노드 삭제에 실패했습니다.');\n            }\n          }\n        } else {\n          alert('해당 위치에 노드를 찾을 수 없습니다.');\n        }\n      }\n    } catch (error) {\n      console.error('맵 클릭 처리 중 오류 발생:', error);\n      alert('맵 클릭 처리 중 오류가 발생했습니다.');\n    } finally {\n      // handleMapClick 이 끝나면 노드 정보를 다시 fetch하도록\n      await fetchNodes(selectedMap._id);\n      drawAll();\n    }\n  };\n\n  // 노드 간 총 꺾인 경로 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n    let totalDistance = 0;\n\n    // 거리 계산 함수 (직선 거리)\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지 거리\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n\n      // 각 웨이포인트 간 거리 합산\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n\n      // 마지막 웨이포인트에서 노드2까지 거리 추가\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우, 노드1과 노드2 간 직선 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.33:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      await fetchNodes(selectedMap._id); // 노드 목록 갱신\n      drawAll(); // 노드 및 간선 다시 그리기\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async mapId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n    try {\n      await axios.put(`http://172.30.1.33:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      await fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n        setNoGoZones([]); // 금지구역 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = e => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = e => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async e => {\n    e.preventDefault();\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.put(`http://172.30.1.33:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async e => {\n    e.preventDefault();\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.33:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = map => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    setIsCreatingNoGoZone(false); // 생성 모드 비활성화\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.33:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    }\n  };\n\n  // 맵 패치를 처리하는 함수 (기존 경로 삭제 후 재계산)\n  const handlePatchMap = async () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    const confirmPatch = window.confirm('선택한 맵의 모든 노드 간의 최단 경로를 계산하고 저장하시겠습니까?');\n    if (!confirmPatch) return;\n    setIsPatchingMap(true); // 로딩 상태 시작\n\n    try {\n      // Step 1: 기존 경로 데이터 삭제\n      await axios.delete(`http://172.30.1.33:5557/map/shortpaths/map/${selectedMap._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('기존 ShortPath 데이터가 삭제되었습니다.');\n\n      // Step 2: 새로운 경로 계산 및 저장\n      const response = await axios.post('http://172.30.1.33:5557/map/calculate-paths', {\n        mapId: selectedMap._id\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        alert('맵 패치가 성공적으로 완료되었습니다.');\n        // 필요 시 추가적인 상태 업데이트나 데이터 패칭을 여기에 추가할 수 있습니다.\n        await fetchNodes(selectedMap._id); // 노드 목록 갱신\n        drawAll(); // 노드 및 간선 다시 그리기\n      } else {\n        alert('맵 패치에 실패했습니다.');\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('맵 패치 중 오류 발생:', error);\n      alert(`맵 패치 중 오류 발생: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}`);\n    } finally {\n      setIsPatchingMap(false); // 로딩 상태 종료\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"map-management-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1078,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1084,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNodeMode,\n    className: \"create-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1085,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1086,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDeleteNodeMode,\n    className: \"delete-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0AD\\uC81C\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleConnectNodeMode,\n    className: \"connect-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1091,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1092,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC5F0\\uACB0 \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDisconnectNodeMode,\n    className: \"disconnect-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1094,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faUnlink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1095,\n      columnNumber: 11\n    }\n  }), \" \\uC5F0\\uACB0 \\uD574\\uC81C \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNoGoZone,\n    className: \"create-nogozone-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 9\n    }\n  }, \"\\uAE08\\uC9C0 \\uAD6C\\uC5ED \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDeleteNoGoZoneMode,\n    className: \"delete-nogozone-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 9\n    }\n  }, \"\\uAE08\\uC9C0 \\uAD6C\\uC5ED \\uD574\\uC81C\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"map-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uB9AC\\uC2A4\\uD2B8\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsUploadPopupOpen(true),\n    className: \"add-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"map-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 11\n    }\n  }, maps.map(map => /*#__PURE__*/React.createElement(\"li\", {\n    key: map._id,\n    className: `map-list-item ${(selectedMap === null || selectedMap === void 0 ? void 0 : selectedMap._id) === map._id ? 'selected-map' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1128,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleSelectMap(map),\n    className: \"map-list-item-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1132,\n      columnNumber: 17\n    }\n  }, map.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => openEditPopup(map),\n    className: \"edit-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteMap(map._id),\n    className: \"delete-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), selectedMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5 \\uC124\\uBA85\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1157,\n      columnNumber: 15\n    }\n  }, selectedMap.description))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-and-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-container\",\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1165,\n      columnNumber: 11\n    }\n  }, mapImage ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"map-canvas\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleMapClick // 맵 클릭 이벤트 추가\n    ,\n    style: {\n      cursor: isCreatingNode ? 'crosshair' : isCreatingNoGoZone ? 'crosshair' : isDeletingNoGoZone ? 'not-allowed' : connectionStep !== 'idle' || disconnectStep !== 'idle' ? 'pointer' : 'default'\n    } // 커서 스타일 수정\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1192,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5\\uC744 \\uC120\\uD0DD\\uD558\\uC5EC \\uC774\\uBBF8\\uC9C0\\uB97C \\uD655\\uC778\\uD558\\uC138\\uC694.\"), selectedMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"floating-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"send-to-robots-button\",\n    onClick: handleSendMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1198,\n      columnNumber: 17\n    }\n  }, \"\\uB85C\\uBD07\\uC5D0\\uAC8C \\uC804\\uC1A1\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"map-patch-button\",\n    onClick: handlePatchMap,\n    disabled: isPatchingMap // 로딩 상태에 따라 버튼 비활성화\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 17\n    }\n  }, isPatchingMap ? '맵 패치 중...' : '맵 패치'))), /*#__PURE__*/React.createElement(NodeList, {\n    mapId: selectedMap === null || selectedMap === void 0 ? void 0 : selectedMap._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1216,\n      columnNumber: 11\n    }\n  }), \" \")), isNodePopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1222,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 11\n    }\n  }, \"\\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 11\n    }\n  }, \"X: \", nodeX.toFixed(2), \", Y: \", nodeY.toFixed(2)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nodeName,\n    onChange: e => setNodeName(e.target.value),\n    placeholder: \"\\uB178\\uB4DC \\uC774\\uB984 \\uC785\\uB825\",\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1225,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1232,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitNode,\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 13\n    }\n  }, \"\\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsNodePopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1236,\n      columnNumber: 13\n    }\n  }, \"\\uCDE8\\uC18C\"))), isUploadPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1248,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1249,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUploadMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1250,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: uploadName,\n    onChange: e => setUploadName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1251,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: uploadDescription,\n    onChange: e => setUploadDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1259,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1266,\n      columnNumber: 13\n    }\n  }, \"\\uB9F5 \\uD30C\\uC77C (.pgm, .png, .jpg)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".pgm,.png,.jpg\",\n    onChange: handleFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1274,\n      columnNumber: 13\n    }\n  }, \"YAML \\uD30C\\uC77C (.yaml)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".yaml\",\n    onChange: handleYamlFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1283,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsUploadPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), isEditPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1300,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1301,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC218\\uC815\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUpdateMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1302,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: editName,\n    onChange: e => setEditName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1303,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: editDescription,\n    onChange: e => setEditDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1311,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      marginTop: '10px',\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: isMonitored,\n    onChange: e => setIsMonitored(e.target.checked),\n    style: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 15\n    }\n  }), \"\\uBAA8\\uB2C8\\uD130\\uB9C1 \\uB9F5\\uC73C\\uB85C \\uC124\\uC815\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1328,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1329,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB370\\uC774\\uD2B8\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsEditPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1332,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 9\n    }\n  }, hoveredNode.name), /*#__PURE__*/React.createElement(NodeDisconnect, {\n    firstNodeId: disconnectFirstNodeId,\n    secondNodeId: disconnectSecondNodeId,\n    onDisconnectSuccess: async isDeleted => {\n      if (isDeleted) {\n        // 삭제가 완료된 경우에만 실행\n        setDisconnectFirstNodeId(null);\n        setDisconnectSecondNodeId(null);\n        await fetchNodes(selectedMap._id); // 노드 정보 갱신\n        drawAll(); // 갱신된 정보로 노드 및 간선 다시 그리기\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1366,\n      columnNumber: 7\n    }\n  }), isPatchingMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1381,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1382,\n      columnNumber: 11\n    }\n  })));\n}\nexport default Mapmanage;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","FontAwesomeIcon","faEdit","faPlus","faLink","faUnlink","Navbar","LogoutButton","UserInfo","worldToMap","mapToWorld","NodeList","NodeDisconnect","Mapmanage","maps","setMaps","selectedMap","setSelectedMap","editName","setEditName","editDescription","setEditDescription","isMonitored","setIsMonitored","uploadName","setUploadName","uploadDescription","setUploadDescription","mapFile","setMapFile","yamlFile","setYamlFile","mapImage","setMapImage","isUploadPopupOpen","setIsUploadPopupOpen","isEditPopupOpen","setIsEditPopupOpen","isCreatingNode","setIsCreatingNode","nodeX","setNodeX","nodeY","setNodeY","nodeName","setNodeName","isNodePopupOpen","setIsNodePopupOpen","canvasRef","mapImageRef","nodes","setNodes","isDeletingNode","setIsDeletingNode","imageNaturalWidth","setImageNaturalWidth","imageNaturalHeight","setImageNaturalHeight","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","x","y","connectionStep","setConnectionStep","waypointCount","setWaypointCount","currentWaypoint","setCurrentWaypoint","waypoints","setWaypoints","firstNodeId","setFirstNodeId","disconnectStep","setDisconnectStep","disconnectFirstNodeId","setDisconnectFirstNodeId","disconnectSecondNodeId","setDisconnectSecondNodeId","isCreatingNoGoZone","setIsCreatingNoGoZone","isDeletingNoGoZone","setIsDeletingNoGoZone","dragging","setDragging","dragStart","setDragStart","currentRect","setCurrentRect","noGoZones","setNoGoZones","isPatchingMap","setIsPatchingMap","fetchMaps","token","localStorage","getItem","alert","response","get","headers","data","length","handleSelectMap","error","console","fetchNodes","mapId","status","fetchNoGoZones","map","name","description","_id","Authorization","responseType","imageUrl","URL","createObjectURL","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawAll","mapToMapCoordinates","forEach","zone","topLeft","bottomRight","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","node","connections","connection","connectedNode","find","n","startX","startY","endX","endY","beginPath","moveTo","wp","wpX","wpY","lineTo","stroke","size","font","textAlign","textBaseline","fillText","startsWith","document","body","style","cursor","handleMouseMove","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","Math","sqrt","newRect","min","abs","handleMouseLeave","handleMouseDown","clickX","clickY","clickedZone","handleDeleteNoGoZone","handleMouseUp","finalRect","topLeftWorld","bottomRightWorld","noGoZone","post","handleConnectNodeMode","count","parseInt","prompt","isNaN","handleDisconnectNodeMode","handleCreateNoGoZone","handleDeleteNoGoZoneMode","zoneId","confirmDelete","window","confirm","delete","filter","handleMapClick","clickedNode","newWaypoint","totalDistance","calculateTotalDistance","node1","node2","toFixed","nodeToDelete","put","node1Id","node2Id","x1","y1","x2","y2","i","handleSubmitNode","trim","handleDeleteMap","handleFileChange","target","files","handleYamlFileChange","handleUpdateMap","preventDefault","_error$response","_error$response$data","message","handleUploadMap","formData","FormData","append","openEditPopup","handleCreateNodeMode","revokeObjectURL","handleDeleteNodeMode","handleSendMap","_error$response2","_error$response2$data","handlePatchMap","confirmPatch","log","_error$response3","_error$response3$data","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","key","position","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","disabled","type","value","onChange","placeholder","onSubmit","required","accept","marginTop","color","checked","marginRight","backgroundColor","padding","borderRadius","pointerEvents","zIndex","fontSize","secondNodeId","onDisconnectSuccess","isDeleted"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js"],"sourcesContent":["// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink, faUnlink } from '@fortawesome/free-solid-svg-icons';\n\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\nimport NodeDisconnect from './NodeDisconnect'; // NodeDisconnect 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 연결 해제 단계 관리\n  const [disconnectStep, setDisconnectStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingSecondNode'\n  const [disconnectFirstNodeId, setDisconnectFirstNodeId] = useState(null);\n  const [disconnectSecondNodeId, setDisconnectSecondNodeId] = useState(null);\n\n  // 금지구역 관련 상태\n  const [isCreatingNoGoZone, setIsCreatingNoGoZone] = useState(false); // 금지 구역 생성 모드\n  const [isDeletingNoGoZone, setIsDeletingNoGoZone] = useState(false); // 금지 구역 삭제 모드\n  const [dragging, setDragging] = useState(false); // 드래그 상태\n  const [dragStart, setDragStart] = useState(null); // 드래그 시작 지점\n  const [currentRect, setCurrentRect] = useState(null); // 현재 그려지고 있는 사각형\n  const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 목록 저장\n\n  // 맵 패치 로딩 상태 추가\n  const [isPatchingMap, setIsPatchingMap] = useState(false); // 맵 패치 로딩 상태\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.33:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async (mapId) => {\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 금지구역 목록을 서버에서 가져오는 함수\n  const fetchNoGoZones = async (mapId) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n      alert('금지구역을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async (map) => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/file/${map._id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n\n    // 금지구역 가져오기\n    await fetchNoGoZones(map._id);\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawAll(); // 모든 요소 그리기 (노드, 금지구역 등)\n    };\n  };\n\n  // 맵 좌표계를 캔버스 좌표계로 변환하는 함수\n  const mapToMapCoordinates = (x, y) => {\n    return worldToMap(x, y, imageNaturalWidth, imageNaturalHeight);\n  };\n\n  // 캔버스에 모든 요소를 그리는 함수 (지도, 노드, 연결선, 금지구역)\n  const drawAll = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 캔버스 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 금지구역 그리기\n    noGoZones.forEach((zone) => {\n      const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.x - topLeft.x;\n      const height = bottomRight.y - topLeft.y;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.x, topLeft.y, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n    });\n\n    // 드래그 중인 사각형 그리기\n    if (currentRect) {\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.2)'; // 반투명 붉은 배경\n      ctx.fillRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n      ctx.strokeStyle = 'red'; // 빨간색 테두리\n      ctx.lineWidth = 1;\n      ctx.strokeRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n    }\n\n    // 연결선을 먼저 그리기\n    nodes.forEach((node) => {\n      node.connections.forEach((connection) => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const { x: startX, y: startY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const { x: endX, y: endY } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach((wp) => {\n              const { x: wpX, y: wpY } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 금지구역 삭제 모드일 때, 금지구역 위에 삭제 아이콘 표시\n    if (isDeletingNoGoZone) {\n      noGoZones.forEach((zone) => {\n        const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n        const size = 20;\n        \n        // X 아이콘 그리기\n        ctx.fillStyle = 'red';\n        ctx.font = 'bold 16px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n    \n        // X 위치를 우측 상단에 배치\n        ctx.fillText('X', topLeft.x + 8, topLeft.y + 15);\n      });\n    }\n\n    // 노드 그리기\n    nodes.forEach((node) => {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 또는 금지구역 변경 시마다 캔버스에 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawAll(); // 모든 요소 다시 그리기\n    }\n  }, [nodes, noGoZones, currentRect, isDeletingNoGoZone]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (\n      !isDeletingNode &&\n      !connectionStep.startsWith('selecting') &&\n      !disconnectStep.startsWith('selecting') &&\n      !isCreatingNoGoZone &&\n      !isDeletingNoGoZone &&\n      !dragging\n    ) {\n      document.body.style.cursor = 'default'; // 모든 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep, disconnectStep, isCreatingNoGoZone, isDeletingNoGoZone, dragging]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    let foundNode = null;\n\n    for (let node of nodes) {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) { // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({ x: e.clientX, y: e.clientY });\n    } else {\n      setHoveredNode(null);\n    }\n\n    // 금지구역 생성 모드일 때 드래그 중인 사각형 업데이트\n    if (isCreatingNoGoZone && dragging && dragStart) {\n      const newRect = {\n        x: Math.min(mouseX, dragStart.x),\n        y: Math.min(mouseY, dragStart.y),\n        width: Math.abs(mouseX - dragStart.x),\n        height: Math.abs(mouseY - dragStart.y),\n      };\n      setCurrentRect(newRect);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화 및 드래그 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n    // 드래그 중이었는데 캔버스를 벗어났을 경우 드래그 취소\n    if (isCreatingNoGoZone && dragging) {\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n    }\n  };\n\n  // 드래그 시작 이벤트 핸들러\n  const handleMouseDown = (e) => {\n    if (isCreatingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const startX = e.clientX - rect.left;\n      const startY = e.clientY - rect.top;\n      setDragStart({ x: startX, y: startY });\n      setDragging(true);\n      document.body.style.cursor = 'crosshair';\n    }\n\n    // 금지구역 삭제 모드일 때\n    if (isDeletingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const clickX = e.clientX - rect.left;\n      const clickY = e.clientY - rect.top;\n\n      // 금지구역 클릭 여부 확인\n      const clickedZone = noGoZones.find(zone => {\n        const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n        const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n        return clickX >= topLeft.x && clickX <= bottomRight.x && clickY >= topLeft.y && clickY <= bottomRight.y;\n      });\n\n      if (clickedZone) {\n        handleDeleteNoGoZone(clickedZone._id);\n      }\n    }\n  };\n\n  // 드래그 종료 이벤트 핸들러\n  const handleMouseUp = async (e) => {\n    if (isCreatingNoGoZone && dragging && dragStart && currentRect) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n\n      // 드래그 완료 후 사각형의 최종 위치와 크기 설정\n      const finalRect = {\n        x: Math.min(endX, dragStart.x),\n        y: Math.min(endY, dragStart.y),\n        width: Math.abs(endX - dragStart.x),\n        height: Math.abs(endY - dragStart.y),\n      };\n\n      // 실제 월드 좌표로 변환하여 금지 구역 생성\n      const topLeftWorld = mapToWorld(finalRect.x, finalRect.y, imageNaturalWidth, imageNaturalHeight);\n      const bottomRightWorld = mapToWorld(finalRect.x + finalRect.width, finalRect.y + finalRect.height, imageNaturalWidth, imageNaturalHeight);\n\n      const noGoZone = {\n        topLeft: topLeftWorld,\n        bottomRight: bottomRightWorld,\n        mapId: selectedMap._id,\n      };\n\n      // 금지구역 서버에 저장\n      const token = localStorage.getItem('token');\n      try {\n        const response = await axios.post('http://172.30.1.33:5557/map/no-go-zones', noGoZone, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        alert('금지 구역이 성공적으로 생성되었습니다.');\n        setNoGoZones([...noGoZones, response.data.noGoZone]); // 생성된 금지 구역 추가\n      } catch (error) {\n        console.error('금지 구역 생성 중 오류 발생:', error);\n        alert('금지 구역 생성에 실패했습니다.');\n      }\n\n      // 상태 초기화\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 연결 해제 모드 활성화 함수\n  const handleDisconnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setDisconnectStep('selectingFirstNode');\n    setDisconnectFirstNodeId(null);\n    setDisconnectSecondNodeId(null);\n    alert('연결을 해제할 첫 번째 노드를 선택하세요.');\n    document.body.style.cursor = 'pointer'; // 연결 해제 모드 커서로 변경\n  };\n\n  // 금지구역 생성 모드 활성화 함수\n  const handleCreateNoGoZone = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNoGoZone(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    document.body.style.cursor = 'crosshair'; // 금지 구역 생성 모드 커서로 변경\n  };\n\n  // 금지구역 삭제 모드를 활성화하는 함수\n  const handleDeleteNoGoZoneMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNoGoZone(true);\n    setIsCreatingNoGoZone(false); // 생성 모드 비활성화\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    alert('삭제할 금지 구역을 클릭하세요.');\n    document.body.style.cursor = 'not-allowed'; // 삭제 모드 커서로 변경\n  };\n\n  // 금지구역을 삭제하는 함수\n  const handleDeleteNoGoZone = async (zoneId) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    const confirmDelete = window.confirm('이 금지 구역을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n\n    try {\n      await axios.delete(`http://172.30.1.33:5557/map/no-go-zones/${zoneId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      alert('금지 구역이 성공적으로 삭제되었습니다.');\n      setNoGoZones(noGoZones.filter(zone => zone._id !== zoneId));\n    } catch (error) {\n      console.error('금지 구역 삭제 중 오류 발생:', error);\n      alert('금지 구역 삭제에 실패했습니다.');\n    } finally {\n      setIsDeletingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가, 연결 해제\n  const handleMapClick = async (e) => {\n    if (!selectedMap) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    const { x, y } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n\n    try {\n      // 연결 해제 모드 처리\n      if (disconnectStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          setDisconnectFirstNodeId(clickedNode._id);\n          setDisconnectStep('selectingSecondNode');\n          alert('연결을 해제할 두 번째 노드를 선택하세요.');\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      if (disconnectStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택 및 연결 해제\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          if (clickedNode._id === disconnectFirstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          setDisconnectSecondNodeId(clickedNode._id);\n          setDisconnectStep('idle');\n          document.body.style.cursor = 'default'; // 커서 복구\n\n          // 연결 해제 로직 호출 (NodeDisconnect 컴포넌트에서 처리)\n          // 여기서는 NodeDisconnect 컴포넌트의 onDisconnectSuccess를 통해 처리됩니다.\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 금지구역 삭제 모드 처리\n      if (isDeletingNoGoZone) {\n        // 클릭한 위치가 금지구역 내에 있는지 확인\n        const clickedZone = noGoZones.find(zone => {\n          const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n          const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n          return clickX >= topLeft.x && clickX <= bottomRight.x && clickY >= topLeft.y && clickY <= bottomRight.y;\n        });\n\n        if (clickedZone) {\n          handleDeleteNoGoZone(clickedZone._id);\n        } else {\n          alert('금지 구역을 클릭해주세요.');\n        }\n\n        return; // 삭제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 기존 연결 및 노드 생성, 삭제 모드 처리\n      if (connectionStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          setFirstNodeId(clickedNode._id);\n          if (waypointCount > 0) {\n            setConnectionStep('selectingWaypoints');\n            alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n            document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n          } else {\n            setConnectionStep('selectingSecondNode');\n            alert('두 번째 노드를 선택하세요.');\n            document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (connectionStep === 'selectingWaypoints') {\n        // 웨이포인트 추가\n        const newWaypoint = { x, y };\n        setWaypoints([...waypoints, newWaypoint]);\n        setCurrentWaypoint(currentWaypoint + 1);\n\n        if (currentWaypoint + 1 === waypointCount) {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n          document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n        } else {\n          alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n        }\n      } else if (connectionStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          if (clickedNode._id === firstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          try {\n            // 웨이포인트 포함 총 거리 계산\n            const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n\n            // API 요청: 연결 및 거리 정보 포함\n            const token = localStorage.getItem('token');\n            await axios.post(`http://172.30.1.33:5557/map/node/connect`, {\n              node1: firstNodeId,\n              node2: clickedNode._id,\n              waypoints: waypoints,\n              distance: totalDistance, // 거리 값 추가\n            }, {\n              headers: { Authorization: `Bearer ${token}` }\n            });\n\n            alert(`노드가 성공적으로 연결되었습니다. 전체 꺾인 경로의 가중치: ${totalDistance.toFixed(2)}`);\n\n            // 연결 생성 후 상태 초기화\n            setConnectionStep('idle');\n            setFirstNodeId(null);\n            setWaypoints([]);\n            setWaypointCount(0);\n            setCurrentWaypoint(0);\n            document.body.style.cursor = 'default'; // 커서 복구\n            await fetchNodes(selectedMap._id); // 노드 목록 갱신\n            drawAll(); // 노드 및 간선 다시 그리기\n          } catch (error) {\n            console.error('노드 연결 중 오류 발생:', error);\n            alert('노드 연결에 실패했습니다.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (isCreatingNode) {\n        // 노드 생성 로직\n        setNodeX(x);\n        setNodeY(y);\n        setIsCreatingNode(false);\n        setIsNodePopupOpen(true);\n        document.body.style.cursor = 'default';\n      } else if (isDeletingNode) {\n        // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n        let nodeToDelete = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            nodeToDelete = node;\n            break;\n          }\n        }\n\n        if (nodeToDelete) {\n          const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n          if (confirmDelete) {\n            try {\n              const token = localStorage.getItem('token');\n              await axios.put(`http://172.30.1.33:5557/map/node/${nodeToDelete._id}`, {}, { // 두 번째 인자를 빈 객체로 전달\n                headers: { Authorization: `Bearer ${token}` },\n              });\n              alert('노드가 성공적으로 삭제되었습니다.');\n\n              // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n              await fetchNodes(selectedMap._id);\n              drawAll(); // 삭제 후 모든 요소 다시 그리기\n\n              setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n            } catch (error) {\n              console.error('노드 삭제 중 오류 발생:', error);\n              alert('노드 삭제에 실패했습니다.');\n            }\n          }\n        } else {\n          alert('해당 위치에 노드를 찾을 수 없습니다.');\n        }\n      }\n    } catch (error) {\n      console.error('맵 클릭 처리 중 오류 발생:', error);\n      alert('맵 클릭 처리 중 오류가 발생했습니다.');\n    } finally {\n      // handleMapClick 이 끝나면 노드 정보를 다시 fetch하도록\n      await fetchNodes(selectedMap._id);\n      drawAll();\n    }\n  };\n\n  // 노드 간 총 꺾인 경로 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n\n    let totalDistance = 0;\n\n    // 거리 계산 함수 (직선 거리)\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지 거리\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n\n      // 각 웨이포인트 간 거리 합산\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n\n      // 마지막 웨이포인트에서 노드2까지 거리 추가\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우, 노드1과 노드2 간 직선 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.33:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id,\n      }, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      await fetchNodes(selectedMap._id); // 노드 목록 갱신\n      drawAll(); // 노드 및 간선 다시 그리기\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async (mapId) => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n\n    try {\n      await axios.put(`http://172.30.1.33:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      await fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n        setNoGoZones([]); // 금지구역 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = (e) => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = (e) => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async (e) => {\n    e.preventDefault();\n\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://172.30.1.33:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async (e) => {\n    e.preventDefault();\n\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.33:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = (map) => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    setIsDeletingNoGoZone(false); // 삭제 모드 비활성화\n    setIsCreatingNoGoZone(false); // 생성 모드 비활성화\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.33:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 맵 패치를 처리하는 함수 (기존 경로 삭제 후 재계산)\n  const handlePatchMap = async () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    const confirmPatch = window.confirm('선택한 맵의 모든 노드 간의 최단 경로를 계산하고 저장하시겠습니까?');\n    if (!confirmPatch) return;\n\n    setIsPatchingMap(true); // 로딩 상태 시작\n\n    try {\n      // Step 1: 기존 경로 데이터 삭제\n      await axios.delete(`http://172.30.1.33:5557/map/shortpaths/map/${selectedMap._id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      console.log('기존 ShortPath 데이터가 삭제되었습니다.');\n\n      // Step 2: 새로운 경로 계산 및 저장\n      const response = await axios.post('http://172.30.1.33:5557/map/calculate-paths', {\n        mapId: selectedMap._id\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        alert('맵 패치가 성공적으로 완료되었습니다.');\n        // 필요 시 추가적인 상태 업데이트나 데이터 패칭을 여기에 추가할 수 있습니다.\n        await fetchNodes(selectedMap._id); // 노드 목록 갱신\n        drawAll(); // 노드 및 간선 다시 그리기\n      } else {\n        alert('맵 패치에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('맵 패치 중 오류 발생:', error);\n      alert(`맵 패치 중 오류 발생: ${error.response?.data?.error || error.message}`);\n    } finally {\n      setIsPatchingMap(false); // 로딩 상태 종료\n    }\n  };\n\n  return (\n    <div className=\"map-management-page\">\n      {/* 상단 네비게이션 바 */}\n      <header className=\"map-management-header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n\n      {/* 툴바: 네비게이션 아래에 위치 */}\n      <div className=\"toolbar\">\n        <button onClick={handleCreateNodeMode} className=\"create-node-button\">\n          <FontAwesomeIcon icon={faPlus} /> 노드 생성\n        </button>\n        <button onClick={handleDeleteNodeMode} className=\"delete-node-button\">\n          <FontAwesomeIcon icon={faEdit} /> 노드 삭제\n        </button>\n        <button onClick={handleConnectNodeMode} className=\"connect-node-button\">\n          <FontAwesomeIcon icon={faLink} /> 노드 연결 {/* \"노드 연결\" 버튼 추가 */}\n        </button>\n        <button onClick={handleDisconnectNodeMode} className=\"disconnect-node-button\">\n          <FontAwesomeIcon icon={faUnlink} /> 연결 해제 {/* \"연결 해제\" 버튼 추가 */}\n        </button>\n        {/* '금지 구역 생성' 버튼 추가 */}\n        <button\n          onClick={handleCreateNoGoZone}\n          className=\"create-nogozone-button\"\n        >\n          금지 구역 생성\n        </button>\n        {/* '금지 구역 해제' 버튼 추가 */}\n        <button\n          onClick={handleDeleteNoGoZoneMode}\n          className=\"delete-nogozone-button\"\n        >\n          금지 구역 해제\n        </button>\n      </div>\n\n      {/* 맵 리스트와 이미지 컨텐츠 */}\n      <div className=\"map-management-content\">\n        {/* 맵 리스트 컨테이너 */}\n        <div className=\"map-list-container\">\n          <h2 className=\"map-list-header\">\n            맵 리스트\n            <button\n              onClick={() => setIsUploadPopupOpen(true)}\n              className=\"add-map-button\"\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          </h2>\n          <ul className=\"map-list\">\n            {maps.map((map) => (\n              <li\n                key={map._id}\n                className={`map-list-item ${selectedMap?._id === map._id ? 'selected-map' : ''}`}\n              >\n                <span\n                  onClick={() => handleSelectMap(map)}\n                  className=\"map-list-item-name\"\n                >\n                  {map.name}\n                </span>\n                <button\n                  onClick={() => openEditPopup(map)}\n                  className=\"edit-map-button\"\n                >\n                  <FontAwesomeIcon icon={faEdit} />\n                </button>\n                <button\n                  onClick={() => handleDeleteMap(map._id)}\n                  className=\"delete-map-button\"\n                >\n                  &times;\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {selectedMap && (\n            <div className=\"map-description\">\n              <h3>맵 설명</h3>\n              <p>{selectedMap.description}</p>\n            </div>\n          )}\n        </div>\n\n        {/* 지도 이미지와 노드 렌더링 및 노드 리스트 영역 */}\n        <div className=\"map-image-and-node-list\">\n          {/* 지도 이미지와 노드 렌더링 영역 */}\n          <div\n            className=\"map-image-container\"\n            style={{ position: 'relative' }}\n          >\n            {mapImage ? (\n              <canvas\n                ref={canvasRef}\n                className=\"map-canvas\"\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleMapClick} // 맵 클릭 이벤트 추가\n                style={{\n                  cursor:\n                    isCreatingNode\n                      ? 'crosshair'\n                      : isCreatingNoGoZone\n                      ? 'crosshair'\n                      : isDeletingNoGoZone\n                      ? 'not-allowed'\n                      : connectionStep !== 'idle' || disconnectStep !== 'idle'\n                      ? 'pointer'\n                      : 'default'\n                }} // 커서 스타일 수정\n              />\n            ) : (\n              <p>맵을 선택하여 이미지를 확인하세요.</p>\n            )}\n\n            {/* 플로팅 Send to Robots 버튼과 Map Patch 버튼 추가 */}\n            {selectedMap && (\n              <div className=\"floating-buttons\">\n                <button\n                  className=\"send-to-robots-button\"\n                  onClick={handleSendMap}\n                >\n                  로봇에게 전송\n                </button>\n                <button\n                  className=\"map-patch-button\"\n                  onClick={handlePatchMap}\n                  disabled={isPatchingMap} // 로딩 상태에 따라 버튼 비활성화\n                >\n                  {isPatchingMap ? '맵 패치 중...' : '맵 패치'}\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* 오른쪽에 노드 목록 표시 */}\n          <NodeList mapId={selectedMap?._id} /> {/* NodeList 컴포넌트 사용 */}\n        </div>\n      </div>\n\n      {/* Node 생성 팝업 */}\n      {isNodePopupOpen && (\n        <div className=\"popup-container\">\n          <h3>노드 생성</h3>\n          <p>X: {nodeX.toFixed(2)}, Y: {nodeY.toFixed(2)}</p>\n          <input\n            type=\"text\"\n            value={nodeName}\n            onChange={(e) => setNodeName(e.target.value)}\n            placeholder=\"노드 이름 입력\"\n            className=\"popup-input\"\n          />\n          <div className=\"popup-button-container\">\n            <button onClick={handleSubmitNode} className=\"popup-submit-button\">\n              생성\n            </button>\n            <button\n              onClick={() => setIsNodePopupOpen(false)}\n              className=\"popup-cancel-button\"\n            >\n              취소\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Map Upload Popup */}\n      {isUploadPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 업로드</h3>\n          <form onSubmit={handleUploadMap}>\n            <input\n              type=\"text\"\n              value={uploadName}\n              onChange={(e) => setUploadName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={uploadDescription}\n              onChange={(e) => setUploadDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            <label>맵 파일 (.pgm, .png, .jpg)</label>\n            <input\n              type=\"file\"\n              accept=\".pgm,.png,.jpg\"\n              onChange={handleFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <label>YAML 파일 (.yaml)</label>\n            <input\n              type=\"file\"\n              accept=\".yaml\"\n              onChange={handleYamlFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업로드\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsUploadPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Edit Map Popup */}\n      {isEditPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 수정</h3>\n          <form onSubmit={handleUpdateMap}>\n            <input\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={editDescription}\n              onChange={(e) => setEditDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            {/* 모니터링 지도 설정 체크박스 추가 */}\n            <label style={{ marginTop: '10px', color: '#333' }}>\n              <input\n                type=\"checkbox\"\n                checked={isMonitored}\n                onChange={(e) => setIsMonitored(e.target.checked)}\n                style={{ marginRight: '10px' }}\n              />\n              모니터링 맵으로 설정\n            </label>\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업데이트\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsEditPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Hover Tooltip */}\n      {hoveredNode && (\n        <div\n          className=\"tooltip\"\n          style={{\n            position: 'fixed',\n            top: `${tooltipPosition.y + 10}px`,\n            left: `${tooltipPosition.x + 10}px`,\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            padding: '5px 10px',\n            borderRadius: '4px',\n            pointerEvents: 'none',\n            zIndex: 1000,\n            fontSize: '12px',\n          }}\n        >\n          {hoveredNode.name}\n        </div>\n      )}\n\n      {/* NodeDisconnect 컴포넌트에 클릭한 노드 정보 전달 */}\n      <NodeDisconnect\n        firstNodeId={disconnectFirstNodeId}\n        secondNodeId={disconnectSecondNodeId}\n        onDisconnectSuccess={async (isDeleted) => {\n          if (isDeleted) {  // 삭제가 완료된 경우에만 실행\n            setDisconnectFirstNodeId(null);\n            setDisconnectSecondNodeId(null);\n            await fetchNodes(selectedMap._id); // 노드 정보 갱신\n            drawAll(); // 갱신된 정보로 노드 및 간선 다시 그리기\n          }\n        }}\n      />\n\n      {/* 로딩 인디케이터 추가 */}\n      {isPatchingMap && (\n        <div className=\"loading-overlay\">\n          <div className=\"spinner\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Mapmanage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}