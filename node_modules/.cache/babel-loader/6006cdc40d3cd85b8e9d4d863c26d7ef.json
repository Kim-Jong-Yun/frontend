{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\nfunction MapComponent({\n  robots,\n  mapUrl,\n  mapId\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n  const [nodes, setNodes] = useState([]); // 노드를 저장할 상태\n  const [hoveredNode, setHoveredNode] = useState(null); // 현재 마우스가 호버된 노드 상태\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 노드 정보를 가져오는 함수\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await axios.get(`http://172.30.1.15:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNodes(response.data); // 노드를 상태에 저장\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n      drawRobots(); // 로봇 그리기\n      drawNodes(); // 노드 그리기\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 노드를 지도 위에 그리는 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y,\n        name\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n\n      // 노드를 빨간 원으로 표시\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // 현재 마우스가 호버된 노드의 이름을 표시\n      if (hoveredNode && hoveredNode.name === name) {\n        ctx.fillStyle = 'black';\n        ctx.font = '12px Arial';\n        ctx.fillText(name, mapX + 8, mapY - 8);\n      }\n    });\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = {\n          mapX,\n          mapY,\n          robotColor\n        };\n      }\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 마우스가 노드 위에 있는지 확인하는 함수\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n      if (distance < 5) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode); // 마우스가 위치한 노드를 상태로 설정\n  };\n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes(); // 노드 정보 가져오기\n    }\n  }, [mapUrl, mapId]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n      drawNodes();\n    }\n  }, [robots, nodes, hoveredNode]);\n\n  // 마우스 이동 이벤트 리스너 등록\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      // canvas가 존재하는지 확인\n      canvas.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n      };\n    }\n  }, [nodes]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","gsap","axios","MapComponent","robots","mapUrl","mapId","canvasRef","mapImageRef","robotRefs","nodes","setNodes","hoveredNode","setHoveredNode","mapResolution","mapOrigin","fetchNodes","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","data","error","console","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawRobots","drawNodes","onerror","err","forEach","node","x","y","name","mapX","mapY","worldToMap","fillStyle","beginPath","arc","Math","PI","fill","font","fillText","robot","index","_robot$status","_robot$status2","_robot$status3","robotColor","status","state","to","duration","ease","onUpdate","mapImage","mapWidth","mapHeight","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","sqrt","addEventListener","removeEventListener","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\n\nfunction MapComponent({ robots, mapUrl, mapId }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n  const [nodes, setNodes] = useState([]); // 노드를 저장할 상태\n  const [hoveredNode, setHoveredNode] = useState(null); // 현재 마우스가 호버된 노드 상태\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 노드 정보를 가져오는 함수\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n\n      const response = await axios.get(`http://172.30.1.15:5557/map/nodes/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNodes(response.data); // 노드를 상태에 저장\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      drawRobots(); // 로봇 그리기\n      drawNodes(); // 노드 그리기\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 노드를 지도 위에 그리는 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    nodes.forEach((node) => {\n      const { x, y, name } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      // 노드를 빨간 원으로 표시\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // 현재 마우스가 호버된 노드의 이름을 표시\n      if (hoveredNode && hoveredNode.name === name) {\n        ctx.fillStyle = 'black';\n        ctx.font = '12px Arial';\n        ctx.fillText(name, mapX + 8, mapY - 8);\n      }\n    });\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    robots.forEach((robot, index) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = { mapX, mapY, robotColor };\n      }\n\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  // 마우스가 노드 위에 있는지 확인하는 함수\n  const handleMouseMove = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    let foundNode = null;\n\n    nodes.forEach((node) => {\n      const { x, y } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n\n      if (distance < 5) {\n        foundNode = node;\n      }\n    });\n\n    setHoveredNode(foundNode); // 마우스가 위치한 노드를 상태로 설정\n  };\n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes(); // 노드 정보 가져오기\n    }\n  }, [mapUrl, mapId]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n      drawNodes();\n    }\n  }, [robots, nodes, hoveredNode]);\n\n  // 마우스 이동 이벤트 리스너 등록\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {  // canvas가 존재하는지 확인\n      canvas.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n      };\n    }\n  }, [nodes]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}