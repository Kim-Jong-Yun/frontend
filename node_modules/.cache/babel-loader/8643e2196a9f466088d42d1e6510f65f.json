{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js\";\nimport React, { useState } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\nfunction TaskFlow({\n  workflow,\n  onTemporaryFlowAdd\n}) {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [temporaryWorkflow, setTemporaryWorkflow] = useState([]); // 임시 작업 플로우 상태\n\n  // 팝업 열기/닫기 토글\n  const togglePopup = () => {\n    setIsPopupOpen(!isPopupOpen);\n  };\n\n  // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n  const handleTaskFlowAdd = (nodeName, stepName) => {\n    if (nodeName.trim() === '' || stepName.trim() === '') return;\n    const newFlow = {\n      node: nodeName,\n      step: stepName\n    };\n    const updatedTemporaryWorkflow = [...temporaryWorkflow, newFlow];\n    setTemporaryWorkflow(updatedTemporaryWorkflow); // 임시 플로우에 추가\n    onTemporaryFlowAdd(newFlow); // 부모 컴포넌트에 임시 플로우 전달\n    togglePopup();\n  };\n\n  // 임시 플로우 초기화 함수\n  const clearTemporaryWorkflow = () => {\n    setTemporaryWorkflow([]);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }, workflow.concat(temporaryWorkflow).map((flow, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-flow-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 34\n    }\n  }, \"\\uB178\\uB4DC:\"), \" \", flow.node), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 34\n    }\n  }, \"\\uB2E8\\uACC4:\"), \" \", flow.step))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePopup,\n    className: \"task-flow-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, \"+\")))), isPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CreateTaskFlow, {\n    onClose: togglePopup,\n    onTaskFlowAdd: handleTaskFlowAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }))));\n}\nexport default TaskFlow;","map":{"version":3,"names":["React","useState","CreateTaskFlow","TaskFlow","workflow","onTemporaryFlowAdd","isPopupOpen","setIsPopupOpen","temporaryWorkflow","setTemporaryWorkflow","togglePopup","handleTaskFlowAdd","nodeName","stepName","trim","newFlow","node","step","updatedTemporaryWorkflow","clearTemporaryWorkflow","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","concat","map","flow","index","key","onClick","onClose","onTaskFlowAdd"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\n\nfunction TaskFlow({ workflow, onTemporaryFlowAdd }) {\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [temporaryWorkflow, setTemporaryWorkflow] = useState([]); // 임시 작업 플로우 상태\n\n    // 팝업 열기/닫기 토글\n    const togglePopup = () => {\n        setIsPopupOpen(!isPopupOpen);\n    };\n\n    // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n    const handleTaskFlowAdd = (nodeName, stepName) => {\n        if (nodeName.trim() === '' || stepName.trim() === '') return;\n        const newFlow = { node: nodeName, step: stepName };\n        const updatedTemporaryWorkflow = [...temporaryWorkflow, newFlow];\n        setTemporaryWorkflow(updatedTemporaryWorkflow); // 임시 플로우에 추가\n        onTemporaryFlowAdd(newFlow); // 부모 컴포넌트에 임시 플로우 전달\n        togglePopup();\n    };\n\n    // 임시 플로우 초기화 함수\n    const clearTemporaryWorkflow = () => {\n        setTemporaryWorkflow([]);\n    };\n\n    return (\n        <div className=\"task-flow-container\">\n            <div className=\"task-flow-background\">\n                <div className=\"task-flow-list\">\n                    {/* 저장된 workflow와 임시 저장된 temporaryWorkflow 병합하여 표시 */}\n                    {workflow.concat(temporaryWorkflow).map((flow, index) => (\n                        <div key={index} className=\"task-flow-item\">\n                            <div><strong>노드:</strong> {flow.node}</div>\n                            <div><strong>단계:</strong> {flow.step}</div>\n                        </div>\n                    ))}\n                    <div className=\"task-flow-add\">\n                        <button onClick={togglePopup} className=\"task-flow-button\">+</button>\n                    </div>\n                </div>\n            </div>\n            {isPopupOpen && (\n                <div className=\"popup-overlay\">\n                    <div className=\"popup-content\">\n                        <CreateTaskFlow onClose={togglePopup} onTaskFlowAdd={handleTaskFlowAdd} />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default TaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}