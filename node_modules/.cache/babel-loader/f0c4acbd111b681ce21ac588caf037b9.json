{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\n// MapComponent.js\nimport React, { useEffect, useRef } from 'react';\nfunction MapComponent({\n  robots,\n  mapUrl\n}) {\n  const mapCanvasRef = useRef(null); // 지도 캔버스 참조\n  const robotCanvasRef = useRef(null); // 로봇 캔버스 참조\n  const mapImageRef = useRef(null);\n  const mapResolution = 0.001; // 해상도 값\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const mapCanvas = mapCanvasRef.current;\n    if (!mapCanvas) return;\n    const ctx = mapCanvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      // 캔버스 크기 설정\n      const canvasWidth = mapCanvas.clientWidth;\n      const canvasHeight = mapCanvas.clientHeight;\n      mapCanvas.width = canvasWidth;\n      mapCanvas.height = canvasHeight;\n\n      // 지도 이미지를 그립니다.\n      ctx.drawImage(mapImageRef.current, 0, 0);\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const robotCanvas = robotCanvasRef.current;\n    if (!robotCanvas) return;\n    const ctx = robotCanvas.getContext('2d');\n    // 캔버스 초기화\n    ctx.clearRect(0, 0, robotCanvas.width, robotCanvas.height);\n    robots.forEach(robot => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      console.log(`로봇 ${robot.name}의 지도 좌표: (x: ${mapX}, y: ${mapY})`);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  /*const worldToMap = (x, y) => {\n  const mapImage = mapImageRef.current;\n  if (!mapImage) return { mapX: 0, mapY: 0 };\n   const mapWidth = mapImage.width;\n  const mapHeight = mapImage.height;\n   const mapX = (x + (mapWidth * mapResolution) / 2) / mapResolution;\n  const mapY = mapHeight - (y + (mapHeight * mapResolution) / 2) / mapResolution;\n  return { mapX, mapY };\n  };*/\n\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    if (!mapImage) {\n      console.error('지도 이미지가 로드되지 않았습니다.');\n      return {\n        mapX: 0,\n        mapY: 0\n      };\n    }\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    // 지도 이미지의 해상도 (미터당 픽셀 수)\n    const resolution = mapResolution;\n\n    // 지도 원점 설정 (지도 이미지의 중앙)\n    const originX = mapWidth / 2;\n    const originY = mapHeight / 2;\n\n    // 월드 좌표를 맵 좌표로 변환\n    const mapX = originX + x / resolution;\n    const mapY = originY - y / resolution; // Y축 방향 반전\n\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: mapCanvasRef,\n    className: \"canvas map-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: robotCanvasRef,\n    className: \"canvas robot-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","MapComponent","robots","mapUrl","mapCanvasRef","robotCanvasRef","mapImageRef","mapResolution","loadMapImage","mapCanvas","current","ctx","getContext","Image","src","onload","canvasWidth","clientWidth","canvasHeight","clientHeight","width","height","drawImage","onerror","err","console","error","drawRobots","robotCanvas","clearRect","forEach","robot","_robot$status","_robot$status2","_robot$status3","x","y","location","mapX","mapY","worldToMap","log","name","robotColor","status","state","fillStyle","beginPath","arc","Math","PI","fill","mapImage","mapWidth","mapHeight","resolution","originX","originY","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["// MapComponent.js\nimport React, { useEffect, useRef } from 'react';\n\nfunction MapComponent({ robots, mapUrl }) {\n  const mapCanvasRef = useRef(null);    // 지도 캔버스 참조\n  const robotCanvasRef = useRef(null);  // 로봇 캔버스 참조\n  const mapImageRef = useRef(null);\n  const mapResolution = 0.001; // 해상도 값\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const mapCanvas = mapCanvasRef.current;\n    if (!mapCanvas) return;\n\n    const ctx = mapCanvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      // 캔버스 크기 설정\n      const canvasWidth = mapCanvas.clientWidth;\n      const canvasHeight = mapCanvas.clientHeight;\n      mapCanvas.width = canvasWidth;\n      mapCanvas.height = canvasHeight;\n\n      // 지도 이미지를 그립니다.\n      ctx.drawImage(mapImageRef.current, 0, 0);\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const robotCanvas = robotCanvasRef.current;\n    if (!robotCanvas) return;\n\n    const ctx = robotCanvas.getContext('2d');\n    // 캔버스 초기화\n    ctx.clearRect(0, 0, robotCanvas.width, robotCanvas.height);\n\n    robots.forEach((robot) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n      console.log(`로봇 ${robot.name}의 지도 좌표: (x: ${mapX}, y: ${mapY})`);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n    /*const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    if (!mapImage) return { mapX: 0, mapY: 0 };\n\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x + (mapWidth * mapResolution) / 2) / mapResolution;\n    const mapY = mapHeight - (y + (mapHeight * mapResolution) / 2) / mapResolution;\n    return { mapX, mapY };\n  };*/\n\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    if (!mapImage) {\n      console.error('지도 이미지가 로드되지 않았습니다.');\n      return { mapX: 0, mapY: 0 };\n    }\n  \n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n  \n    // 지도 이미지의 해상도 (미터당 픽셀 수)\n    const resolution = mapResolution; \n  \n    // 지도 원점 설정 (지도 이미지의 중앙)\n    const originX = mapWidth / 2;\n    const originY = mapHeight / 2;\n  \n    // 월드 좌표를 맵 좌표로 변환\n    const mapX = originX + (x / resolution);\n    const mapY = originY - (y / resolution); // Y축 방향 반전\n  \n    return { mapX, mapY };\n  };\n  \n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <>\n          <canvas ref={mapCanvasRef} className=\"canvas map-canvas\"></canvas>\n          <canvas ref={robotCanvasRef} className=\"canvas robot-canvas\"></canvas>\n        </>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}