{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nfunction MapComponent() {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [mapResolution, setMapResolution] = useState(0.05); // 기본 값\n  const [mapDimensions, setMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    fetchMapMetadata();\n    fetchMonitoredMap();\n  }, []);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({\n          width: img.width,\n          height: img.height\n        });\n        drawMapAndRobots(img.width, img.height); // 이미지 크기대로 캔버스 조정 및 그리기\n      };\n      img.onerror = err => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n    mapImage.onload = () => {\n      const aspectRatio = imgWidth / imgHeight;\n\n      // 캔버스 크기를 고정 비율에 맞게 설정 (여기서 너비와 높이 조정)\n      const maxWidth = 800; // 캔버스의 최대 너비 설정\n      const maxHeight = 600; // 캔버스의 최대 높이 설정\n\n      if (maxWidth / aspectRatio > maxHeight) {\n        canvas.width = maxHeight * aspectRatio;\n        canvas.height = maxHeight;\n      } else {\n        canvas.width = maxWidth;\n        canvas.height = maxWidth / aspectRatio;\n      }\n      ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n    };\n    mapImage.onerror = err => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      maxWidth: '800px',\n      // 최대 너비 설정\n      maxHeight: '600px',\n      // 최대 높이 설정\n      overflow: 'auto',\n      // 넘치면 스크롤\n      border: '1px solid #ccc',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block',\n      maxWidth: '100%',\n      maxHeight: '100%',\n      objectFit: 'contain'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","MapComponent","mapUrl","setMapUrl","mapResolution","setMapResolution","mapDimensions","setMapDimensions","width","height","canvasRef","fetchMapMetadata","fetchMonitoredMap","getToken","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","responseType","url","URL","createObjectURL","data","img","Image","src","onload","drawMapAndRobots","onerror","err","console","error","metadata","resolution","parseFloat","match","imgWidth","imgHeight","canvas","current","ctx","getContext","mapImage","aspectRatio","maxWidth","maxHeight","drawImage","createElement","style","overflow","border","display","justifyContent","alignItems","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","objectFit"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nfunction MapComponent() {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [mapResolution, setMapResolution] = useState(0.05); // 기본 값\n  const [mapDimensions, setMapDimensions] = useState({ width: 0, height: 0 });\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    fetchMapMetadata();\n    fetchMonitoredMap();\n  }, []);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({ width: img.width, height: img.height });\n        drawMapAndRobots(img.width, img.height); // 이미지 크기대로 캔버스 조정 및 그리기\n      };\n      img.onerror = (err) => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n\n    mapImage.onload = () => {\n      const aspectRatio = imgWidth / imgHeight;\n\n      // 캔버스 크기를 고정 비율에 맞게 설정 (여기서 너비와 높이 조정)\n      const maxWidth = 800; // 캔버스의 최대 너비 설정\n      const maxHeight = 600; // 캔버스의 최대 높이 설정\n\n      if (maxWidth / aspectRatio > maxHeight) {\n        canvas.width = maxHeight * aspectRatio;\n        canvas.height = maxHeight;\n      } else {\n        canvas.width = maxWidth;\n        canvas.height = maxWidth / aspectRatio;\n      }\n\n      ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n    };\n\n    mapImage.onerror = (err) => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n\n  return (\n    <div style={{\n      width: '100%', \n      height: '100%', \n      maxWidth: '800px',  // 최대 너비 설정\n      maxHeight: '600px', // 최대 높이 설정\n      overflow: 'auto',   // 넘치면 스크롤\n      border: '1px solid #ccc',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n      {mapUrl ? (\n        <canvas ref={canvasRef} style={{ display: 'block', maxWidth: '100%', maxHeight: '100%', objectFit: 'contain' }}></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}