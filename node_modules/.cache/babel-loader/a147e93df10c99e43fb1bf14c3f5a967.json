{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\nfunction MapComponent({\n  robots,\n  mapUrl,\n  mapId\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [noGoZones, setNoGoZones] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n\n  // 서버에서 노드와 연결 정보 가져오기\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 서버에서 금지 구역 정보 가져오기\n  const fetchNoGoZones = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        return;\n      }\n      const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n      drawMapElements(); // 모든 요소 그리기 (노드, 연결선, 금지 구역, 로봇 등)\n    };\n  };\n\n  // 월드 좌표를 맵 좌표로 변환\n  const worldToMap = (worldX, worldY) => {\n    const mapImage = mapImageRef.current;\n    const mapHeight = mapImage.height;\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (worldY - mapOrigin[1]) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 맵 좌표를 월드 좌표로 변환\n  const mapToWorld = (mapX, mapY) => {\n    const mapImage = mapImageRef.current;\n    const mapHeight = mapImage.height;\n    const worldX = mapX * mapResolution + mapOrigin[0];\n    const worldY = (mapHeight - mapY) * mapResolution + mapOrigin[1];\n    return {\n      worldX,\n      worldY\n    };\n  };\n\n  // 지도 요소 그리기\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !mapImageRef.current) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 금지 구역\n    noGoZones.forEach(zone => {\n      const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.mapX - topLeft.mapX;\n      const height = bottomRight.mapY - topLeft.mapY;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.mapX, topLeft.mapY, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.mapX, topLeft.mapY, width, height);\n    });\n\n    // 노드 간 연결선\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const {\n            mapX: startX,\n            mapY: startY\n          } = worldToMap(node.x, node.y);\n          const {\n            mapX: endX,\n            mapY: endY\n          } = worldToMap(connectedNode.x, connectedNode.y);\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n          if (connection.waypoints) {\n            connection.waypoints.forEach(waypoint => {\n              const {\n                mapX,\n                mapY\n              } = worldToMap(waypoint.x, waypoint.y);\n              ctx.lineTo(mapX, mapY);\n            });\n          }\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n    drawNodes();\n    drawRobots();\n  };\n\n  // 노드 그리기\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y,\n        name\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - 5, mapY - 5, 10, 10);\n      if (hoveredNode && hoveredNode._id === node._id) {\n        ctx.font = '12px Arial';\n        ctx.fillStyle = 'black';\n        ctx.fillText(name, mapX + 10, mapY - 10);\n      }\n    });\n  };\n\n  // 로봇 그리기\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      const color = ((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking' ? 'blue' : ((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Error' ? 'red' : 'gray';\n      gsap.to(robotRefs.current[index] || {}, {\n        mapX,\n        mapY,\n        duration: 1,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = color;\n          ctx.beginPath();\n          ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n      fetchNoGoZones();\n    }\n  }, [mapUrl, mapId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","gsap","axios","MapComponent","robots","mapUrl","mapId","canvasRef","mapImageRef","robotRefs","nodes","setNodes","noGoZones","setNoGoZones","hoveredNode","setHoveredNode","mapResolution","mapOrigin","fetchNodes","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","data","error","console","fetchNoGoZones","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawMapElements","worldToMap","worldX","worldY","mapImage","mapHeight","mapX","mapY","mapToWorld","forEach","zone","topLeft","x","y","bottomRight","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","node","connections","connection","connectedNode","find","n","_id","startX","startY","endX","endY","beginPath","moveTo","waypoints","waypoint","lineTo","stroke","drawNodes","drawRobots","name","font","fillText","robot","index","_robot$status","_robot$status2","color","status","state","to","duration","ease","onUpdate","arc","Math","PI","fill","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\n\nfunction MapComponent({ robots, mapUrl, mapId }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [noGoZones, setNoGoZones] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n\n  // 서버에서 노드와 연결 정보 가져오기\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n\n      const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 서버에서 금지 구역 정보 가져오기\n  const fetchNoGoZones = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        return;\n      }\n\n      const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      drawMapElements(); // 모든 요소 그리기 (노드, 연결선, 금지 구역, 로봇 등)\n    };\n  };\n\n  // 월드 좌표를 맵 좌표로 변환\n  const worldToMap = (worldX, worldY) => {\n    const mapImage = mapImageRef.current;\n    const mapHeight = mapImage.height;\n\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (worldY - mapOrigin[1]) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  // 맵 좌표를 월드 좌표로 변환\n  const mapToWorld = (mapX, mapY) => {\n    const mapImage = mapImageRef.current;\n    const mapHeight = mapImage.height;\n\n    const worldX = mapX * mapResolution + mapOrigin[0];\n    const worldY = (mapHeight - mapY) * mapResolution + mapOrigin[1];\n    return { worldX, worldY };\n  };\n\n  // 지도 요소 그리기\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !mapImageRef.current) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 금지 구역\n    noGoZones.forEach((zone) => {\n      const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y);\n\n      const width = bottomRight.mapX - topLeft.mapX;\n      const height = bottomRight.mapY - topLeft.mapY;\n\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.mapX, topLeft.mapY, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.mapX, topLeft.mapY, width, height);\n    });\n\n    // 노드 간 연결선\n    nodes.forEach((node) => {\n      node.connections.forEach((connection) => {\n        const connectedNode = nodes.find((n) => n._id === connection.node);\n        if (connectedNode) {\n          const { mapX: startX, mapY: startY } = worldToMap(node.x, node.y);\n          const { mapX: endX, mapY: endY } = worldToMap(connectedNode.x, connectedNode.y);\n\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          if (connection.waypoints) {\n            connection.waypoints.forEach((waypoint) => {\n              const { mapX, mapY } = worldToMap(waypoint.x, waypoint.y);\n              ctx.lineTo(mapX, mapY);\n            });\n          }\n\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    drawNodes();\n    drawRobots();\n  };\n\n  // 노드 그리기\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    nodes.forEach((node) => {\n      const { x, y, name } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - 5, mapY - 5, 10, 10);\n\n      if (hoveredNode && hoveredNode._id === node._id) {\n        ctx.font = '12px Arial';\n        ctx.fillStyle = 'black';\n        ctx.fillText(name, mapX + 10, mapY - 10);\n      }\n    });\n  };\n\n  // 로봇 그리기\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    robots.forEach((robot, index) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      const color = robot.status?.state === 'Tasking' ? 'blue' : robot.status?.state === 'Error' ? 'red' : 'gray';\n\n      gsap.to(robotRefs.current[index] || {}, {\n        mapX,\n        mapY,\n        duration: 1,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = color;\n          ctx.beginPath();\n          ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n      fetchNoGoZones();\n    }\n  }, [mapUrl, mapId]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      <canvas ref={canvasRef} className=\"canvas\"></canvas>\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}