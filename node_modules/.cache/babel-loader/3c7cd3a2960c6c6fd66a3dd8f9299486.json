{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nfunction MapComponent({\n  robots,\n  nodes,\n  mapUrl\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n  const nodeRefs = useRef([]); // 각 노드의 참조 저장\n  const [nodesDrawn, setNodesDrawn] = useState(false); // 노드가 그려졌는지 상태 관리\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      // 노드를 한 번만 그립니다.\n      if (!nodesDrawn) {\n        drawNodes(ctx); // ctx 전달\n        setNodesDrawn(true); // 노드가 그려졌음을 표시\n      }\n\n      // 로봇을 그립니다.\n      drawRobots(ctx); // ctx 전달\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = ctx => {\n    if (!mapImageRef.current || !robots) return;\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = (robot === null || robot === void 0 ? void 0 : robot.location) || {}; // 로봇의 위치 정보 (x, y)\n      if (x === undefined || y === undefined) return;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = {\n          mapX,\n          mapY,\n          robotColor\n        };\n      }\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n\n  // 노드들을 그리는 함수\n  const drawNodes = ctx => {\n    if (!mapImageRef.current || !nodes) return;\n    console.log('노드 데이터:', nodes); // 노드 데이터 로그\n\n    nodes.forEach((node, index) => {\n      const {\n        location\n      } = node; // 노드의 위치 정보\n      if (!location || location.x === undefined || location.y === undefined) {\n        console.error(`노드 위치 정보가 없습니다: ${node}`);\n        return;\n      }\n      const {\n        x,\n        y\n      } = location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      console.log(`노드 ${index + 1} 위치 (월드 좌표): (${x}, ${y})`);\n      console.log(`노드 ${index + 1} 위치 (맵 좌표): (${mapX}, ${mapY})`);\n      let nodeColor = 'red'; // 노드는 빨간색으로 표시\n\n      if (!nodeRefs.current[index]) {\n        nodeRefs.current[index] = {\n          mapX,\n          mapY,\n          nodeColor\n        };\n      }\n\n      // GSAP를 사용하여 노드 위치 그리기\n      gsap.to(nodeRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = nodeRefs.current[index].nodeColor;\n          ctx.beginPath();\n          ctx.arc(nodeRefs.current[index].mapX, nodeRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (mapImageRef.current && canvas) {\n      const ctx = canvas.getContext('2d');\n      drawRobots(ctx); // 로봇은 계속 업데이트\n    }\n  }, [robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","gsap","MapComponent","robots","nodes","mapUrl","canvasRef","mapImageRef","robotRefs","nodeRefs","nodesDrawn","setNodesDrawn","mapResolution","mapOrigin","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawNodes","drawRobots","onerror","err","console","error","forEach","robot","index","_robot$status","_robot$status2","_robot$status3","x","y","location","undefined","mapX","mapY","worldToMap","robotColor","status","state","to","duration","ease","onUpdate","fillStyle","beginPath","arc","Math","PI","fill","log","node","nodeColor","mapImage","mapWidth","mapHeight","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\n\nfunction MapComponent({ robots, nodes, mapUrl }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n  const nodeRefs = useRef([]); // 각 노드의 참조 저장\n  const [nodesDrawn, setNodesDrawn] = useState(false); // 노드가 그려졌는지 상태 관리\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      // 노드를 한 번만 그립니다.\n      if (!nodesDrawn) {\n        drawNodes(ctx); // ctx 전달\n        setNodesDrawn(true); // 노드가 그려졌음을 표시\n      }\n\n      // 로봇을 그립니다.\n      drawRobots(ctx); // ctx 전달\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = (ctx) => {\n    if (!mapImageRef.current || !robots) return;\n\n    robots.forEach((robot, index) => {\n      const { x, y } = robot?.location || {}; // 로봇의 위치 정보 (x, y)\n      if (x === undefined || y === undefined) return;\n\n      const { mapX, mapY } = worldToMap(x, y);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = { mapX, mapY, robotColor };\n      }\n\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  // 노드들을 그리는 함수\n  const drawNodes = (ctx) => {\n    if (!mapImageRef.current || !nodes) return;\n\n    console.log('노드 데이터:', nodes); // 노드 데이터 로그\n\n    nodes.forEach((node, index) => {\n      const { location } = node; // 노드의 위치 정보\n      if (!location || location.x === undefined || location.y === undefined) {\n        console.error(`노드 위치 정보가 없습니다: ${node}`);\n        return;\n      }\n\n      const { x, y } = location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      console.log(`노드 ${index + 1} 위치 (월드 좌표): (${x}, ${y})`);\n      console.log(`노드 ${index + 1} 위치 (맵 좌표): (${mapX}, ${mapY})`);\n\n      let nodeColor = 'red'; // 노드는 빨간색으로 표시\n\n      if (!nodeRefs.current[index]) {\n        nodeRefs.current[index] = { mapX, mapY, nodeColor };\n      }\n\n      // GSAP를 사용하여 노드 위치 그리기\n      gsap.to(nodeRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = nodeRefs.current[index].nodeColor;\n          ctx.beginPath();\n          ctx.arc(nodeRefs.current[index].mapX, nodeRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (mapImageRef.current && canvas) {\n      const ctx = canvas.getContext('2d');\n      drawRobots(ctx); // 로봇은 계속 업데이트\n    }\n  }, [robots]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}