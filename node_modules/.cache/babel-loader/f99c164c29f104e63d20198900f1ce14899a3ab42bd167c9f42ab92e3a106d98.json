{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // useEffect 추가\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapCreatePage() {\n  _s();\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const ws = new WebSocket('ws://localhost:3000'); // WebSocket 서버 주소\n\n  useEffect(() => {\n    // 페이지 로드 시 로봇 목록을 가져옴\n    const fetchRobots = async () => {\n      try {\n        const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n        const response = await axios.get('http://localhost:5557/robots', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRobots(response.data); // setMaps 대신 setRobots 사용\n      } catch (error) {\n        console.error('Error fetching robots:', error);\n      }\n    };\n    fetchRobots();\n\n    // WebSocket 연결 설정\n    const ws = new WebSocket('ws://localhost:3000'); // WebSocket 서버 주소\n    ws.onopen = () => {\n      console.log('WebSocket 연결이 설정되었습니다.');\n    };\n    return () => {\n      ws.close(); // 컴포넌트 언마운트 시 WebSocket 연결 해제\n    };\n  }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행되도록 함\n\n  // 서버에 명령을 전송하는 함수\n  const sendCommand = command => {\n    const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n    fetch('http://localhost:5557/robot/send_command', {\n      // 절대 경로 사용\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // 토큰을 헤더에 추가\n      },\n      body: JSON.stringify({\n        robot_id: selectedRobot,\n        command: command\n      })\n    }).then(response => response.text()).then(data => alert(data)).catch(error => console.error('Error sending command:', error));\n  };\n\n  // 키 입력을 처리하여 로봇을 제어하는 함수\n  const handleKeyDown = e => {\n    const velocityCommands = {\n      w: {\n        linear: 0.1,\n        angular: 0\n      },\n      a: {\n        linear: 0,\n        angular: 0.1\n      },\n      s: {\n        linear: -0.1,\n        angular: 0\n      },\n      d: {\n        linear: 0,\n        angular: -0.1\n      },\n      x: {\n        linear: 0,\n        angular: 0\n      }\n    };\n    if (velocityCommands[e.key]) {\n      ws.send(JSON.stringify({\n        robot_id: selectedRobot,\n        velocity: velocityCommands[e.key]\n      }));\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedRobot]); // selectedRobot이 변경될 때마다 실행되도록 설정\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SLAM Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uB85C\\uBD07 \\uC120\\uD0DD:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedRobot(e.target.value),\n        value: selectedRobot,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\uB85C\\uBD07\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), robots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: robot._id,\n          children: robot.name\n        }, robot._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendCommand('slam'),\n      children: \"SLAM \\uC2DC\\uC791\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"http://localhost:8080/stream?topic=/camera/rgb/image_raw\",\n        alt: \"SLAM View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(MapCreatePage, \"AaFD/3nLQPKUk+GGgm4X1XPRtdU=\");\n_c = MapCreatePage;\n;\nexport default MapCreatePage;\nvar _c;\n$RefreshReg$(_c, \"MapCreatePage\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","LogoutButton","UserInfo","axios","jsxDEV","_jsxDEV","MapCreatePage","_s","robots","setRobots","selectedRobot","setSelectedRobot","ws","WebSocket","fetchRobots","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","onopen","log","close","sendCommand","command","fetch","method","body","JSON","stringify","robot_id","then","text","alert","catch","handleKeyDown","e","velocityCommands","w","linear","angular","a","s","d","x","key","send","velocity","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","target","value","map","robot","_id","name","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // useEffect 추가\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\n\nfunction MapCreatePage() {\n    const [robots, setRobots] = useState([]);\n    const [selectedRobot, setSelectedRobot] = useState('');\n    const ws = new WebSocket('ws://localhost:3000'); // WebSocket 서버 주소\n  \n    useEffect(() => {\n        // 페이지 로드 시 로봇 목록을 가져옴\n        const fetchRobots = async () => {\n            try {\n                const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n                const response = await axios.get('http://localhost:5557/robots', {\n                    headers: {\n                        Authorization: `Bearer ${token}`\n                    }\n                });\n                setRobots(response.data); // setMaps 대신 setRobots 사용\n            } catch (error) {\n                console.error('Error fetching robots:', error);\n            }\n        };\n\n        fetchRobots();\n\n        // WebSocket 연결 설정\n        const ws = new WebSocket('ws://localhost:3000'); // WebSocket 서버 주소\n        ws.onopen = () => {\n            console.log('WebSocket 연결이 설정되었습니다.');\n        };\n\n        return () => {\n            ws.close(); // 컴포넌트 언마운트 시 WebSocket 연결 해제\n        };\n    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 렌더링될 때만 실행되도록 함\n\n    // 서버에 명령을 전송하는 함수\n    const sendCommand = (command) => {\n        const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n        fetch('http://localhost:5557/robot/send_command', { // 절대 경로 사용\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}` // 토큰을 헤더에 추가\n            },\n            body: JSON.stringify({\n                robot_id: selectedRobot,\n                command: command\n            })\n        }).then(response => response.text())\n            .then(data => alert(data))\n            .catch(error => console.error('Error sending command:', error));\n    };\n\n    // 키 입력을 처리하여 로봇을 제어하는 함수\n    const handleKeyDown = (e) => {\n        const velocityCommands = {\n            w: { linear: 0.1, angular: 0 },\n            a: { linear: 0, angular: 0.1 },\n            s: { linear: -0.1, angular: 0 },\n            d: { linear: 0, angular: -0.1 },\n            x: { linear: 0, angular: 0 }\n        };\n        if (velocityCommands[e.key]) {\n            ws.send(JSON.stringify({\n                robot_id: selectedRobot,\n                velocity: velocityCommands[e.key]\n            }));\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [selectedRobot]); // selectedRobot이 변경될 때마다 실행되도록 설정\n\n    return (\n        <div>\n            <header>\n                <UserInfo />\n                <LogoutButton />\n            </header>\n            <div style={{ display: 'flex' }}>\n                <Navbar />\n            </div>\n            <h2>SLAM Control</h2>\n            <div>\n                <label>로봇 선택:</label>\n                <select onChange={(e) => setSelectedRobot(e.target.value)} value={selectedRobot}>\n                    <option value=\"\">로봇을 선택하세요</option>\n                    {robots.map(robot => (\n                        <option key={robot._id} value={robot._id}>{robot.name}</option>\n                    ))}\n                </select>\n            </div>\n            <button onClick={() => sendCommand('slam')}>SLAM 시작</button>\n            <div>\n                <img src=\"http://localhost:8080/stream?topic=/camera/rgb/image_raw\" alt=\"SLAM View\" />\n            </div>\n        </div>\n    );\n};\n\nexport default MapCreatePage;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}