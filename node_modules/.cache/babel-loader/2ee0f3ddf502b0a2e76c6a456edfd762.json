{"ast":null,"code":"import React, { useEffect } from 'react';\nimport axios from 'axios';\nfunction NodeDisconnect({\n  firstNodeId,\n  secondNodeId,\n  onDisconnectSuccess\n}) {\n  useEffect(() => {\n    if (firstNodeId && secondNodeId) {\n      const disconnectNodes = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          alert('토큰이 없습니다. 다시 로그인해주세요.');\n          return;\n        }\n        try {\n          await axios.delete(`http://3.35.87.118:5557/map/${firstNodeId}/connections/${secondNodeId}`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n          // 연결 해제 성공 후 콜백 호출\n          if (onDisconnectSuccess) {\n            onDisconnectSuccess(true);\n          }\n        } catch (error) {\n          console.error('노드 연결 해제 중 오류 발생:', error);\n          alert('노드 연결 해제에 실패했습니다.');\n          if (onDisconnectSuccess) {\n            onDisconnectSuccess(false);\n          }\n        }\n      };\n      disconnectNodes();\n    }\n  }, [firstNodeId, secondNodeId, onDisconnectSuccess]);\n  return null;\n}\nexport default NodeDisconnect;","map":{"version":3,"names":["React","useEffect","axios","NodeDisconnect","firstNodeId","secondNodeId","onDisconnectSuccess","disconnectNodes","token","localStorage","getItem","alert","delete","headers","Authorization","error","console"],"sources":["/home/ketgintern/Desktop/frontend/src/pages/Map/NodeDisconnect.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport axios from 'axios';\n\nfunction NodeDisconnect({ firstNodeId, secondNodeId, onDisconnectSuccess }) {\n  useEffect(() => {\n    if (firstNodeId && secondNodeId) {\n      const disconnectNodes = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          alert('토큰이 없습니다. 다시 로그인해주세요.');\n          return;\n        }\n\n        try {\n          await axios.delete(`http://3.35.87.118:5557/map/${firstNodeId}/connections/${secondNodeId}`, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n       \n          \n          // 연결 해제 성공 후 콜백 호출\n          if (onDisconnectSuccess) {\n            onDisconnectSuccess(true);\n          }\n        } catch (error) {\n          console.error('노드 연결 해제 중 오류 발생:', error);\n          alert('노드 연결 해제에 실패했습니다.');\n          if (onDisconnectSuccess) {\n            onDisconnectSuccess(false);\n          }\n        }\n      };\n\n      disconnectNodes();\n    }\n  }, [firstNodeId, secondNodeId, onDisconnectSuccess]);\n\n  return null;\n}\n\nexport default NodeDisconnect;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,cAAcA,CAAC;EAAEC,WAAW;EAAEC,YAAY;EAAEC;AAAoB,CAAC,EAAE;EAC1EL,SAAS,CAAC,MAAM;IACd,IAAIG,WAAW,IAAIC,YAAY,EAAE;MAC/B,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;QAClC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,IAAI,CAACF,KAAK,EAAE;UACVG,KAAK,CAAC,uBAAuB,CAAC;UAC9B;QACF;QAEA,IAAI;UACF,MAAMT,KAAK,CAACU,MAAM,CAAC,+BAA+BR,WAAW,gBAAgBC,YAAY,EAAE,EAAE;YAC3FQ,OAAO,EAAE;cAAEC,aAAa,EAAE,UAAUN,KAAK;YAAG;UAC9C,CAAC,CAAC;;UAGF;UACA,IAAIF,mBAAmB,EAAE;YACvBA,mBAAmB,CAAC,IAAI,CAAC;UAC3B;QACF,CAAC,CAAC,OAAOS,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;UACzCJ,KAAK,CAAC,mBAAmB,CAAC;UAC1B,IAAIL,mBAAmB,EAAE;YACvBA,mBAAmB,CAAC,KAAK,CAAC;UAC5B;QACF;MACF,CAAC;MAEDC,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,WAAW,EAAEC,YAAY,EAAEC,mBAAmB,CAAC,CAAC;EAEpD,OAAO,IAAI;AACb;AAEA,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}