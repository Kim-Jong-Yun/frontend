{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\nconst mapResolution = 0.05;\nconst mapOrigin = [-10.0, -10.0];\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n  const mapX = (worldX - mapOrigin[0]) / mapResolution;\n  const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution;\n  return {\n    x: mapX,\n    y: mapY\n  };\n};\nfunction CreateTaskFlow({\n  onClose,\n  onTaskFlowAdd\n}) {\n  const [selectedNode, setSelectedNode] = useState('');\n  const [selectedStep, setSelectedStep] = useState('');\n  const [nodes, setNodes] = useState([]);\n  const [steps, setSteps] = useState([]);\n  const [allSteps, setAllSteps] = useState([]);\n  const [mapImage, setMapImage] = useState(null);\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n  const [monitoredMap, setMonitoredMap] = useState(null);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const fetchMonitoredMap = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMonitoredMap(response.data);\n      fetchNodes(response.data._id);\n      loadMapImage(response.data._id);\n    } catch (error) {\n      console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n      alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n    }\n  };\n  const fetchAllSteps = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.30:5557/map/steps', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setAllSteps(response.data);\n    } catch (error) {\n      console.error('단계 정보를 가져오는 중 오류 발생:', error);\n      alert('단계 정보를 가져오는 데 실패했습니다.');\n    }\n  };\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n  const loadMapImage = async mapId => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl);\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n  useEffect(() => {\n    if (selectedNode) {\n      const node = nodes.find(n => n.name === selectedNode);\n      if (node) {\n        const nodeTasks = node.tasks || [];\n        const stepsWithNames = nodeTasks.map(taskId => {\n          const step = allSteps.find(s => s._id === taskId);\n          return step ? step.name : '';\n        });\n        setSteps(stepsWithNames);\n      }\n    } else {\n      setSteps([]);\n    }\n  }, [selectedNode, nodes, allSteps]);\n  const loadCanvasWithImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawMapElements();\n    };\n  };\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n    drawConnections();\n    drawNodes();\n  };\n  const drawConnections = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const {\n            x: startX,\n            y: startY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.moveTo(startX, startY);\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(waypoint => {\n              const {\n                x,\n                y\n              } = worldToMap(waypoint.x, waypoint.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(x, y);\n            });\n          }\n          const {\n            x: endX,\n            y: endY\n          } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n  };\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n      if (hoveredNode && hoveredNode._id === node._id) {\n        const textPadding = 4;\n        ctx.font = '12px Arial';\n        const textWidth = ctx.measureText(node.name).width;\n        const backgroundWidth = textWidth + textPadding * 2;\n        const backgroundHeight = 16;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(x + size / 2, y - size / 2 - backgroundHeight, backgroundWidth, backgroundHeight);\n        ctx.fillStyle = 'white';\n        ctx.fillText(node.name, x + size / 2 + textPadding, y - size / 2 - textPadding);\n      }\n    });\n  };\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const mouseX = (event.clientX - rect.left) * scaleX;\n    const mouseY = (event.clientY - rect.top) * scaleY;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n    setTooltipPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n  };\n  useEffect(() => {\n    fetchMonitoredMap();\n    fetchAllSteps();\n  }, []);\n  useEffect(() => {\n    if (mapImage) {\n      loadCanvasWithImage();\n    }\n  }, [mapImage, hoveredNode]);\n  const handleSubmit = () => {\n    onTaskFlowAdd(selectedNode, selectedStep);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-preview\",\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uD50C\\uB85C\\uC6B0 \\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedNode,\n    onChange: e => setSelectedNode(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }\n  }, \"\\uB178\\uB4DC \\uC120\\uD0DD\"), nodes.map(node => /*#__PURE__*/React.createElement(\"option\", {\n    key: node._id,\n    value: node.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, node.name))), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedStep,\n    onChange: e => setSelectedStep(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 21\n    }\n  }, \"\\uB2E8\\uACC4 \\uC120\\uD0DD\"), steps.map((step, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 25\n    }\n  }, step))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, \"\\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 21\n    }\n  }, \"\\uCDE8\\uC18C\"))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, hoveredNode.name));\n}\nexport default CreateTaskFlow;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","mapResolution","mapOrigin","worldToMap","worldX","worldY","imageNaturalWidth","imageNaturalHeight","mapX","mapY","x","y","CreateTaskFlow","onClose","onTaskFlowAdd","selectedNode","setSelectedNode","selectedStep","setSelectedStep","nodes","setNodes","steps","setSteps","allSteps","setAllSteps","mapImage","setMapImage","canvasRef","mapImageRef","setImageNaturalWidth","setImageNaturalHeight","monitoredMap","setMonitoredMap","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","fetchMonitoredMap","token","localStorage","getItem","response","get","headers","Authorization","data","fetchNodes","_id","loadMapImage","error","console","alert","fetchAllSteps","mapId","canvas","current","responseType","imageUrl","URL","createObjectURL","node","find","n","name","nodeTasks","tasks","stepsWithNames","map","taskId","step","s","loadCanvasWithImage","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawMapElements","drawConnections","drawNodes","forEach","connections","connection","connectedNode","strokeStyle","lineWidth","beginPath","startX","startY","moveTo","waypoints","length","waypoint","lineTo","endX","endY","stroke","size","fillStyle","fillRect","textPadding","font","textWidth","measureText","backgroundWidth","backgroundHeight","fillText","handleMouseMove","event","rect","getBoundingClientRect","scaleX","scaleY","mouseX","clientX","left","mouseY","clientY","top","foundNode","handleSubmit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","ref","style","border","value","onChange","e","target","marginBottom","padding","borderRadius","key","index","onClick","position","backgroundColor","color","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\n\nconst mapResolution = 0.05;\nconst mapOrigin = [-10.0, -10.0];\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution;\n    return { x: mapX, y: mapY };\n};\n\nfunction CreateTaskFlow({ onClose, onTaskFlowAdd }) {\n    const [selectedNode, setSelectedNode] = useState('');\n    const [selectedStep, setSelectedStep] = useState('');\n    const [nodes, setNodes] = useState([]);\n    const [steps, setSteps] = useState([]);\n    const [allSteps, setAllSteps] = useState([]);\n    const [mapImage, setMapImage] = useState(null);\n    const canvasRef = useRef(null);\n    const mapImageRef = useRef(null);\n    const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n    const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n    const [monitoredMap, setMonitoredMap] = useState(null);\n    const [hoveredNode, setHoveredNode] = useState(null);\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n    const fetchMonitoredMap = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setMonitoredMap(response.data);\n            fetchNodes(response.data._id);\n            loadMapImage(response.data._id);\n        } catch (error) {\n            console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n            alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n        }\n    };\n\n    const fetchAllSteps = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.30:5557/map/steps', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setAllSteps(response.data);\n        } catch (error) {\n            console.error('단계 정보를 가져오는 중 오류 발생:', error);\n            alert('단계 정보를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    const fetchNodes = async (mapId) => {\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n            setNodes(response.data);\n        } catch (error) {\n            console.error('노드를 가져오는 중 오류 발생:', error);\n            alert('노드를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    const loadMapImage = async (mapId) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const token = localStorage.getItem('token');\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n                responseType: 'blob',\n            });\n            const imageUrl = URL.createObjectURL(response.data);\n            setMapImage(imageUrl);\n        } catch (error) {\n            console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n            alert('맵 이미지를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    useEffect(() => {\n        if (selectedNode) {\n            const node = nodes.find((n) => n.name === selectedNode);\n            if (node) {\n                const nodeTasks = node.tasks || [];\n                const stepsWithNames = nodeTasks.map(taskId => {\n                    const step = allSteps.find(s => s._id === taskId);\n                    return step ? step.name : '';\n                });\n                setSteps(stepsWithNames);\n            }\n        } else {\n            setSteps([]);\n        }\n    }, [selectedNode, nodes, allSteps]);\n\n    const loadCanvasWithImage = () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        mapImageRef.current = new Image();\n        mapImageRef.current.src = mapImage;\n\n        mapImageRef.current.onload = () => {\n            const imgWidth = mapImageRef.current.width;\n            const imgHeight = mapImageRef.current.height;\n            setImageNaturalWidth(imgWidth);\n            setImageNaturalHeight(imgHeight);\n\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n            drawMapElements();\n        };\n    };\n\n    const drawMapElements = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n        drawConnections();\n        drawNodes();\n    };\n\n    const drawConnections = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        nodes.forEach((node) => {\n            node.connections.forEach((connection) => {\n                const connectedNode = nodes.find(n => n._id === connection.node);\n                if (connectedNode) {\n                    ctx.strokeStyle = 'blue';\n                    ctx.lineWidth = 2;\n                    ctx.beginPath();\n\n                    const { x: startX, y: startY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n                    ctx.moveTo(startX, startY);\n\n                    if (connection.waypoints && connection.waypoints.length > 0) {\n                        connection.waypoints.forEach((waypoint) => {\n                            const { x, y } = worldToMap(waypoint.x, waypoint.y, imageNaturalWidth, imageNaturalHeight);\n                            ctx.lineTo(x, y);\n                        });\n                    }\n\n                    const { x: endX, y: endY } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n                    ctx.lineTo(endX, endY);\n                    ctx.stroke();\n                }\n            });\n        });\n    };\n\n    const drawNodes = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            ctx.fillStyle = 'red';\n            ctx.fillRect(x - size / 2, y - size / 2, size, size);\n\n            if (hoveredNode && hoveredNode._id === node._id) {\n                const textPadding = 4;\n                ctx.font = '12px Arial';\n                const textWidth = ctx.measureText(node.name).width;\n                const backgroundWidth = textWidth + textPadding * 2;\n                const backgroundHeight = 16;\n\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n                ctx.fillRect(x + size / 2, y - size / 2 - backgroundHeight, backgroundWidth, backgroundHeight);\n                ctx.fillStyle = 'white';\n                ctx.fillText(node.name, x + size / 2 + textPadding, y - size / 2 - textPadding);\n            }\n        });\n    };\n\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        const mouseX = (event.clientX - rect.left) * scaleX;\n        const mouseY = (event.clientY - rect.top) * scaleY;\n\n        let foundNode = null;\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n                foundNode = node;\n            }\n        });\n\n        setHoveredNode(foundNode);\n        setTooltipPosition({ x: event.clientX, y: event.clientY });\n    };\n\n    useEffect(() => {\n        fetchMonitoredMap();\n        fetchAllSteps();\n    }, []);\n\n    useEffect(() => {\n        if (mapImage) {\n            loadCanvasWithImage();\n        }\n    }, [mapImage, hoveredNode]);\n\n    const handleSubmit = () => {\n        onTaskFlowAdd(selectedNode, selectedStep);\n    };\n\n    return (\n        <div className=\"create-task-flow-container\">\n            <div className=\"map-preview\" onMouseMove={handleMouseMove}>\n                <canvas ref={canvasRef} style={{ border: '1px solid #ccc', width: '100%', height: '100%' }}></canvas>\n            </div>\n\n            <div className=\"task-flow-form\">\n                <h3>작업 플로우 추가</h3>\n                <select\n                    value={selectedNode}\n                    onChange={(e) => setSelectedNode(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">노드 선택</option>\n                    {nodes.map((node) => (\n                        <option key={node._id} value={node.name}>\n                            {node.name}\n                        </option>\n                    ))}\n                </select>\n                <select\n                    value={selectedStep}\n                    onChange={(e) => setSelectedStep(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">단계 선택</option>\n                    {steps.map((step, index) => (\n                        <option key={index} value={step}>\n                            {step}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"buttons\">\n                    <button onClick={handleSubmit}>추가</button>\n                    <button onClick={onClose}>취소</button>\n                </div>\n            </div>\n\n            {hoveredNode && (\n                <div\n                    className=\"tooltip\"\n                    style={{\n                        position: 'fixed',\n                        top: `${tooltipPosition.y + 10}px`,\n                        left: `${tooltipPosition.x + 10}px`,\n                        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        pointerEvents: 'none',\n                        zIndex: 1000,\n                        fontSize: '12px',\n                    }}\n                >\n                    {hoveredNode.name}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default CreateTaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}