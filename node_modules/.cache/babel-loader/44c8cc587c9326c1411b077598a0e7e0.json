{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // MapComponent 임포트\nimport RobotListComponent from './RobotListComponent'; // RobotListComponent 임포트\nimport TaskLogComponent from './TaskLogComponent'; // TaskLogComponent 임포트\nimport './TestPage.css';\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null); // 지도 URL 상태\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap(); // 지도 불러오기\n      fetchRobots(); // 로봇 리스트 API 호출\n      fetchAllTasks(); // 모든 작업 로그 API 호출\n    };\n    fetchData();\n\n    // WebSocket 연결 설정\n    const socket = new WebSocket('ws://172.30.1.28:5050'); // WebSocket 주소를 설정하세요\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n    socket.onmessage = event => {\n      const updatedRobots = JSON.parse(event.data);\n      setRobots(updatedRobots); // WebSocket으로 받은 데이터를 로봇 상태로 설정\n    };\n    socket.onerror = error => {\n      console.error('WebSocket 오류:', error);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n    return () => {\n      socket.close(); // 컴포넌트가 언마운트되면 WebSocket 연결 종료\n    };\n  }, []);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url); // 지도 URL 설정\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchRobots = async () => {\n    console.log('로봇 정보 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchRobots 종료');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.28:5559/robot/robots', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setRobots(response.data); // 로봇 데이터를 상태에 저장\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MapComponent, {\n    robots: robots,\n    mapUrl: mapUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RobotListComponent, {\n    robots: robots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(TaskLogComponent, {\n    tasks: tasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n}\nexport default TestPage;","map":{"version":3,"names":["React","useState","useEffect","Navbar","LogoutButton","UserInfo","axios","MapComponent","RobotListComponent","TaskLogComponent","TestPage","robots","setRobots","tasks","setTasks","mapUrl","setMapUrl","fetchData","fetchMonitoredMap","fetchRobots","fetchAllTasks","socket","WebSocket","onopen","console","log","onmessage","event","updatedRobots","JSON","parse","data","onerror","error","onclose","close","getToken","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","responseType","url","URL","createObjectURL","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\n\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // MapComponent 임포트\nimport RobotListComponent from './RobotListComponent'; // RobotListComponent 임포트\nimport TaskLogComponent from './TaskLogComponent'; // TaskLogComponent 임포트\nimport './TestPage.css';\n\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null); // 지도 URL 상태\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap(); // 지도 불러오기\n      fetchRobots(); // 로봇 리스트 API 호출\n      fetchAllTasks(); // 모든 작업 로그 API 호출\n    };\n    fetchData();\n\n    // WebSocket 연결 설정\n    const socket = new WebSocket('ws://172.30.1.28:5050'); // WebSocket 주소를 설정하세요\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n\n    socket.onmessage = (event) => {\n      const updatedRobots = JSON.parse(event.data);\n      setRobots(updatedRobots); // WebSocket으로 받은 데이터를 로봇 상태로 설정\n    };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket 오류:', error);\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n\n    return () => {\n      socket.close(); // 컴포넌트가 언마운트되면 WebSocket 연결 종료\n    };\n  }, []);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url); // 지도 URL 설정\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchRobots = async () => {\n    console.log('로봇 정보 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchRobots 종료');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5559/robot/robots', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setRobots(response.data); // 로봇 데이터를 상태에 저장\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n\n  return (\n    <div className=\"test-page\">\n      <header className=\"header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n      <h1></h1>\n      <div className=\"main-content\">\n        {/* MapComponent에 robots와 mapUrl 전달 */}\n        <MapComponent robots={robots} mapUrl={mapUrl} />\n        <RobotListComponent robots={robots} /> {/* 로봇 리스트 컴포넌트 */}\n      </div>\n      {/* 작업 로그 컴포넌트 */}\n      <TaskLogComponent tasks={tasks} />\n    </div>\n  );\n}\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}