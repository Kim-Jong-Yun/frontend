{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css'; // 스타일 파일 임포트\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n  const mapX = (worldX - mapOrigin[0]) / mapResolution;\n  const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n  return {\n    x: mapX,\n    y: mapY\n  };\n};\nfunction CreateTaskFlow({\n  onClose,\n  onTaskFlowAdd\n}) {\n  const [selectedNode, setSelectedNode] = useState(''); // 선택한 노드 상태\n  const [selectedStep, setSelectedStep] = useState(''); // 선택한 단계 상태\n  const [nodes, setNodes] = useState([]); // 노드 목록 상태\n  const [steps, setSteps] = useState([]); // 선택된 노드의 단계 목록 상태\n  const [allSteps, setAllSteps] = useState([]); // 모든 단계 목록\n  const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 이미지 참조\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n  const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n  const [hoveredNode, setHoveredNode] = useState(null); // 마우스가 올라간 노드\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  }); // 툴팁 위치\n\n  // 모니터링 중인 맵 정보를 가져오는 함수\n  const fetchMonitoredMap = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n      fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n      loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n    } catch (error) {\n      console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n      alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 모든 step 정보를 가져오는 함수\n  const fetchAllSteps = async () => {\n    try {\n      const token = localStorage.getItem('token'); // localStorage에서 토큰을 가져옴\n      if (!token) {\n        alert('인증이 필요합니다. 로그인 후 다시 시도하세요.');\n        return;\n      }\n      const response = await axios.get('http://172.30.1.30:5557/map/steps', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Authorization 헤더에 토큰 추가\n      });\n      setAllSteps(response.data); // 모든 step 정보 저장\n    } catch (error) {\n      console.error('단계 정보를 가져오는 중 오류 발생:', error);\n      if (error.response && error.response.status === 401) {\n        alert('인증 오류: 다시 로그인하세요.');\n      } else {\n        alert('단계 정보를 가져오는 데 실패했습니다.');\n      }\n    }\n  };\n\n  // 노드를 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵 이미지 로드 함수\n  const loadMapImage = async mapId => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 지도 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 선택한 노드가 바뀌면 해당 노드의 task 목록을 가져옴\n  useEffect(() => {\n    if (selectedNode) {\n      const node = nodes.find(n => n.name === selectedNode);\n      if (node) {\n        const nodeTasks = node.tasks || [];\n        const stepsWithNames = nodeTasks.map(taskId => {\n          const step = allSteps.find(s => s._id === taskId); // taskId에 해당하는 이름 찾기\n          return step ? step.name : ''; // 이름을 반환\n        });\n        setSteps(stepsWithNames); // 노드의 단계 목록 업데이트\n      }\n    } else {\n      setSteps([]); // 노드가 선택되지 않은 경우 단계 목록 초기화\n    }\n  }, [selectedNode, nodes, allSteps]);\n\n  // 이미지가 로드될 때 캔버스에 그리는 함수\n  const loadCanvasWithImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawNodes(); // 노드 그리기\n    };\n  };\n\n  // 노드 그리기 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 기존 노드 그리기 전에 캔버스를 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 다시 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10; // 정사각형의 크기\n\n      // 노드를 빨간 정사각형으로 그리기\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n    });\n  };\n\n  // 마우스 이동 이벤트 핸들러\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width; // 캔버스와 화면 좌표의 비율\n    const scaleY = canvas.height / rect.height; // 캔버스와 화면 좌표의 비율\n    const mouseX = (event.clientX - rect.left) * scaleX; // 마우스 X 좌표 변환\n    const mouseY = (event.clientY - rect.top) * scaleY; // 마우스 Y 좌표 변환\n\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n    setTooltipPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n  };\n\n  // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보와 모든 step 정보 가져오기\n  useEffect(() => {\n    fetchMonitoredMap();\n    fetchAllSteps(); // 모든 step 정보 가져오기\n  }, []);\n\n  // 지도 이미지가 변경될 때마다 캔버스에 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadCanvasWithImage();\n    }\n  }, [mapImage, hoveredNode]);\n\n  // 작업 플로우 추가 처리\n  const handleSubmit = () => {\n    onTaskFlowAdd(selectedNode, selectedStep); // 선택한 노드와 단계를 부모 컴포넌트에 전달\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-preview\",\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uD50C\\uB85C\\uC6B0 \\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedNode,\n    onChange: e => setSelectedNode(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, \"\\uB178\\uB4DC \\uC120\\uD0DD\"), nodes.map(node => /*#__PURE__*/React.createElement(\"option\", {\n    key: node._id,\n    value: node.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }, node.name))), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedStep,\n    onChange: e => setSelectedStep(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 21\n    }\n  }, \"\\uB2E8\\uACC4 \\uC120\\uD0DD\"), steps.map((step, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, step, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 21\n    }\n  }, \"\\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 21\n    }\n  }, \"\\uCDE8\\uC18C\"))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 17\n    }\n  }, hoveredNode.name));\n}\nexport default CreateTaskFlow;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","mapResolution","mapOrigin","worldToMap","worldX","worldY","imageNaturalWidth","imageNaturalHeight","mapX","mapY","x","y","CreateTaskFlow","onClose","onTaskFlowAdd","selectedNode","setSelectedNode","selectedStep","setSelectedStep","nodes","setNodes","steps","setSteps","allSteps","setAllSteps","mapImage","setMapImage","canvasRef","mapImageRef","setImageNaturalWidth","setImageNaturalHeight","monitoredMap","setMonitoredMap","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","fetchMonitoredMap","token","localStorage","getItem","response","get","headers","Authorization","data","fetchNodes","_id","loadMapImage","error","console","alert","fetchAllSteps","status","mapId","canvas","current","responseType","imageUrl","URL","createObjectURL","node","find","n","name","nodeTasks","tasks","stepsWithNames","map","taskId","step","s","loadCanvasWithImage","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawNodes","forEach","size","fillStyle","fillRect","handleMouseMove","event","rect","getBoundingClientRect","scaleX","scaleY","mouseX","clientX","left","mouseY","clientY","top","foundNode","handleSubmit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","ref","style","border","value","onChange","e","target","marginBottom","padding","borderRadius","key","index","onClick","position","backgroundColor","color","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css'; // 스타일 파일 임포트\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n    return { x: mapX, y: mapY };\n};\n\nfunction CreateTaskFlow({ onClose, onTaskFlowAdd }) {\n    const [selectedNode, setSelectedNode] = useState(''); // 선택한 노드 상태\n    const [selectedStep, setSelectedStep] = useState(''); // 선택한 단계 상태\n    const [nodes, setNodes] = useState([]); // 노드 목록 상태\n    const [steps, setSteps] = useState([]); // 선택된 노드의 단계 목록 상태\n    const [allSteps, setAllSteps] = useState([]); // 모든 단계 목록\n    const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n    const canvasRef = useRef(null); // 캔버스 참조\n    const mapImageRef = useRef(null); // 이미지 참조\n    const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n    const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n    const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n    const [hoveredNode, setHoveredNode] = useState(null); // 마우스가 올라간 노드\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 }); // 툴팁 위치\n\n    // 모니터링 중인 맵 정보를 가져오는 함수\n    const fetchMonitoredMap = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n            fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n            loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n        } catch (error) {\n            console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n            alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 모든 step 정보를 가져오는 함수\n    const fetchAllSteps = async () => {\n        try {\n            const token = localStorage.getItem('token'); // localStorage에서 토큰을 가져옴\n            if (!token) {\n                alert('인증이 필요합니다. 로그인 후 다시 시도하세요.');\n                return;\n            }\n    \n            const response = await axios.get('http://172.30.1.30:5557/map/steps', {\n                headers: { Authorization: `Bearer ${token}` } // Authorization 헤더에 토큰 추가\n            });\n    \n            setAllSteps(response.data); // 모든 step 정보 저장\n        } catch (error) {\n            console.error('단계 정보를 가져오는 중 오류 발생:', error);\n            if (error.response && error.response.status === 401) {\n                alert('인증 오류: 다시 로그인하세요.');\n            } else {\n                alert('단계 정보를 가져오는 데 실패했습니다.');\n            }\n        }\n    };\n\n    // 노드를 가져오는 함수\n    const fetchNodes = async (mapId) => {\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n            if (response.status === 200) {\n                setNodes(response.data); // 노드 리스트 상태 업데이트\n            } else {\n                setNodes([]); // 실패 시 빈 배열로 초기화\n            }\n        } catch (error) {\n            console.error('노드를 가져오는 중 오류 발생:', error);\n            setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n            alert('노드를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 맵 이미지 로드 함수\n    const loadMapImage = async (mapId) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const token = localStorage.getItem('token');\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n                responseType: 'blob',\n            });\n            const imageUrl = URL.createObjectURL(response.data);\n            setMapImage(imageUrl); // 지도 이미지 설정\n        } catch (error) {\n            console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n            alert('맵 이미지를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 선택한 노드가 바뀌면 해당 노드의 task 목록을 가져옴\n    useEffect(() => {\n        if (selectedNode) {\n            const node = nodes.find((n) => n.name === selectedNode);\n            if (node) {\n                const nodeTasks = node.tasks || [];\n                const stepsWithNames = nodeTasks.map(taskId => {\n                    const step = allSteps.find(s => s._id === taskId); // taskId에 해당하는 이름 찾기\n                    return step ? step.name : ''; // 이름을 반환\n                });\n                setSteps(stepsWithNames); // 노드의 단계 목록 업데이트\n            }\n        } else {\n            setSteps([]); // 노드가 선택되지 않은 경우 단계 목록 초기화\n        }\n    }, [selectedNode, nodes, allSteps]);\n\n    // 이미지가 로드될 때 캔버스에 그리는 함수\n    const loadCanvasWithImage = () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        mapImageRef.current = new Image();\n        mapImageRef.current.src = mapImage;\n\n        mapImageRef.current.onload = () => {\n            const imgWidth = mapImageRef.current.width;\n            const imgHeight = mapImageRef.current.height;\n            setImageNaturalWidth(imgWidth);\n            setImageNaturalHeight(imgHeight);\n\n            // 캔버스 크기 조정 및 기존 내용 클리어\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // 지도 이미지를 캔버스에 그리기\n            ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n            drawNodes(); // 노드 그리기\n        };\n    };\n\n    // 노드 그리기 함수\n    const drawNodes = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n        // 기존 노드 그리기 전에 캔버스를 클리어\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // 지도 이미지 다시 그리기\n        ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n        // 노드 그리기\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10; // 정사각형의 크기\n\n            // 노드를 빨간 정사각형으로 그리기\n            ctx.fillStyle = 'red';\n            ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n        });\n    };\n\n    // 마우스 이동 이벤트 핸들러\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;  // 캔버스와 화면 좌표의 비율\n        const scaleY = canvas.height / rect.height; // 캔버스와 화면 좌표의 비율\n        const mouseX = (event.clientX - rect.left) * scaleX; // 마우스 X 좌표 변환\n        const mouseY = (event.clientY - rect.top) * scaleY;  // 마우스 Y 좌표 변환\n\n        let foundNode = null;\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n                foundNode = node;\n            }\n        });\n\n        setHoveredNode(foundNode);\n        setTooltipPosition({ x: event.clientX, y: event.clientY });\n    };\n\n    // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보와 모든 step 정보 가져오기\n    useEffect(() => {\n        fetchMonitoredMap();\n        fetchAllSteps(); // 모든 step 정보 가져오기\n    }, []);\n\n    // 지도 이미지가 변경될 때마다 캔버스에 그리기\n    useEffect(() => {\n        if (mapImage) {\n            loadCanvasWithImage();\n        }\n    }, [mapImage, hoveredNode]);\n\n    // 작업 플로우 추가 처리\n    const handleSubmit = () => {\n        onTaskFlowAdd(selectedNode, selectedStep); // 선택한 노드와 단계를 부모 컴포넌트에 전달\n    };\n\n    return (\n        <div className=\"create-task-flow-container\">\n            {/* 좌측: 지도와 노드를 표시 */}\n            <div className=\"map-preview\" onMouseMove={handleMouseMove}>\n                <canvas ref={canvasRef} style={{ border: '1px solid #ccc', width: '100%', height: '100%' }}></canvas>\n            </div>\n\n            {/* 우측: 작업 플로우 추가 폼 */}\n            <div className=\"task-flow-form\">\n                <h3>작업 플로우 추가</h3>\n                {/* 노드 선택 드롭다운 */}\n                <select\n                    value={selectedNode}\n                    onChange={(e) => setSelectedNode(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">노드 선택</option>\n                    {nodes.map((node) => (\n                        <option key={node._id} value={node.name}>\n                            {node.name}\n                        </option>\n                    ))}\n                </select>\n\n                {/* 단계 선택 드롭다운 */}\n                <select\n                    value={selectedStep}\n                    onChange={(e) => setSelectedStep(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">단계 선택</option>\n                    {steps.map((step, index) => (\n                        <option key={index} value={step}>\n                            {step} {/* step 이름을 표시 */}\n                        </option>\n                    ))}\n                </select>\n\n                <div className=\"buttons\">\n                    <button onClick={handleSubmit}>추가</button>\n                    <button onClick={onClose}>취소</button>\n                </div>\n            </div>\n\n            {/* Hover Tooltip */}\n            {hoveredNode && (\n                <div\n                    className=\"tooltip\"\n                    style={{\n                        position: 'fixed',\n                        top: `${tooltipPosition.y + 10}px`,\n                        left: `${tooltipPosition.x + 10}px`,\n                        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        pointerEvents: 'none',\n                        zIndex: 1000,\n                        fontSize: '12px',\n                    }}\n                >\n                    {hoveredNode.name}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default CreateTaskFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}