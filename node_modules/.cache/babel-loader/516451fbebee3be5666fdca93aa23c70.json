{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js\";\n// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink, faUnlink } from '@fortawesome/free-solid-svg-icons';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\nimport NodeDisconnect from './NodeDisconnect'; // NodeDisconnect 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 연결 해제 단계 관리\n  const [disconnectStep, setDisconnectStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingSecondNode'\n  const [disconnectFirstNodeId, setDisconnectFirstNodeId] = useState(null);\n  const [disconnectSecondNodeId, setDisconnectSecondNodeId] = useState(null);\n\n  // 금지구역 관련 상태\n  const [isCreatingNoGoZone, setIsCreatingNoGoZone] = useState(false); // 금지 구역 생성 모드\n  const [dragging, setDragging] = useState(false); // 드래그 상태\n  const [dragStart, setDragStart] = useState(null); // 드래그 시작 지점\n  const [currentRect, setCurrentRect] = useState(null); // 현재 그려지고 있는 사각형\n  const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 목록 저장\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.30:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 금지구역 목록을 서버에서 가져오는 함수\n  const fetchNoGoZones = async mapId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n      alert('금지구역을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async map => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${map._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n\n    // 금지구역 가져오기\n    await fetchNoGoZones(map._id);\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawAll(); // 모든 요소 그리기 (노드, 금지구역 등)\n    };\n  };\n\n  // 맵 좌표계를 캔버스 좌표계로 변환하는 함수\n  const mapToMapCoordinates = (x, y) => {\n    return worldToMap(x, y, imageNaturalWidth, imageNaturalHeight);\n  };\n\n  // 캔버스에 모든 요소를 그리는 함수 (지도, 노드, 연결선, 금지구역)\n  const drawAll = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 캔버스 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 금지구역 그리기\n    noGoZones.forEach(zone => {\n      const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.x - topLeft.x;\n      const height = bottomRight.y - topLeft.y;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.x, topLeft.y, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n    });\n\n    // 드래그 중인 사각형 그리기\n    if (currentRect) {\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.2)'; // 반투명 붉은 배경\n      ctx.fillRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n      ctx.strokeStyle = 'red'; // 빨간색 테두리\n      ctx.lineWidth = 1;\n      ctx.strokeRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n    }\n\n    // 연결선을 먼저 그리기\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const {\n            x: startX,\n            y: startY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const {\n            x: endX,\n            y: endY\n          } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(wp => {\n              const {\n                x: wpX,\n                y: wpY\n              } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 또는 금지구역 변경 시마다 캔버스에 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawAll(); // 모든 요소 다시 그리기\n    }\n  }, [nodes, noGoZones, currentRect]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (!isDeletingNode && !connectionStep.startsWith('selecting') && !disconnectStep.startsWith('selecting') && !isCreatingNoGoZone && !dragging) {\n      document.body.style.cursor = 'default'; // 모든 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep, disconnectStep, isCreatingNoGoZone, dragging]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    let foundNode = null;\n    for (let node of nodes) {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) {\n        // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      setHoveredNode(null);\n    }\n\n    // 금지구역 생성 모드일 때 드래그 중인 사각형 업데이트\n    if (isCreatingNoGoZone && dragging && dragStart) {\n      const newRect = {\n        x: Math.min(mouseX, dragStart.x),\n        y: Math.min(mouseY, dragStart.y),\n        width: Math.abs(mouseX - dragStart.x),\n        height: Math.abs(mouseY - dragStart.y)\n      };\n      setCurrentRect(newRect);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화 및 드래그 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n    // 드래그 중이었는데 캔버스를 벗어났을 경우 드래그 취소\n    if (isCreatingNoGoZone && dragging) {\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n    }\n  };\n\n  // 드래그 시작 이벤트 핸들러\n  const handleMouseDown = e => {\n    if (isCreatingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const startX = e.clientX - rect.left;\n      const startY = e.clientY - rect.top;\n      setDragStart({\n        x: startX,\n        y: startY\n      });\n      setDragging(true);\n      document.body.style.cursor = 'crosshair';\n    }\n  };\n\n  // 드래그 종료 이벤트 핸들러\n  const handleMouseUp = async e => {\n    if (isCreatingNoGoZone && dragging && dragStart && currentRect) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n\n      // 드래그 완료 후 사각형의 최종 위치와 크기 설정\n      const finalRect = {\n        x: Math.min(endX, dragStart.x),\n        y: Math.min(endY, dragStart.y),\n        width: Math.abs(endX - dragStart.x),\n        height: Math.abs(endY - dragStart.y)\n      };\n\n      // 실제 월드 좌표로 변환하여 금지 구역 생성\n      const topLeftWorld = mapToWorld(finalRect.x, finalRect.y, imageNaturalWidth, imageNaturalHeight);\n      const bottomRightWorld = mapToWorld(finalRect.x + finalRect.width, finalRect.y + finalRect.height, imageNaturalWidth, imageNaturalHeight);\n      const noGoZone = {\n        topLeft: topLeftWorld,\n        bottomRight: bottomRightWorld,\n        mapId: selectedMap._id\n      };\n\n      // 금지구역 서버에 저장\n      const token = localStorage.getItem('token');\n      try {\n        const response = await axios.post('http://172.30.1.30:5557/map/no-go-zones', noGoZone, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        alert('금지 구역이 성공적으로 생성되었습니다.');\n        setNoGoZones([...noGoZones, response.data.noGoZone]); // 생성된 금지 구역 추가\n      } catch (error) {\n        console.error('금지 구역 생성 중 오류 발생:', error);\n        alert('금지 구역 생성에 실패했습니다.');\n      }\n\n      // 상태 초기화\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 연결 해제 모드 활성화 함수\n  const handleDisconnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setDisconnectStep('selectingFirstNode');\n    setDisconnectFirstNodeId(null);\n    setDisconnectSecondNodeId(null);\n    alert('연결을 해제할 첫 번째 노드를 선택하세요.');\n    document.body.style.cursor = 'pointer'; // 연결 해제 모드 커서로 변경\n  };\n\n  // 금지구역 생성 모드 활성화 함수\n  const handleCreateNoGoZone = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNoGoZone(true);\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    document.body.style.cursor = 'crosshair'; // 금지 구역 생성 모드 커서로 변경\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가, 연결 해제\n  const handleMapClick = async e => {\n    if (!selectedMap) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n    const {\n      x,\n      y\n    } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n    try {\n      // 연결 해제 모드 처리\n      if (disconnectStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          setDisconnectFirstNodeId(clickedNode._id);\n          setDisconnectStep('selectingSecondNode');\n          alert('연결을 해제할 두 번째 노드를 선택하세요.');\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n      if (disconnectStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택 및 연결 해제\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          if (clickedNode._id === disconnectFirstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          setDisconnectSecondNodeId(clickedNode._id);\n          setDisconnectStep('idle');\n          document.body.style.cursor = 'default'; // 커서 복구\n\n          // 연결 해제 로직 호출 (NodeDisconnect 컴포넌트에서 처리)\n          // 여기서는 NodeDisconnect 컴포넌트의 onDisconnectSuccess를 통해 처리됩니다.\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 기존 연결 및 노드 생성, 삭제 모드 처리\n      if (connectionStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          setFirstNodeId(clickedNode._id);\n          if (waypointCount > 0) {\n            setConnectionStep('selectingWaypoints');\n            alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n            document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n          } else {\n            setConnectionStep('selectingSecondNode');\n            alert('두 번째 노드를 선택하세요.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (connectionStep === 'selectingWaypoints') {\n        // 웨이포인트 추가\n        const newWaypoint = {\n          x,\n          y\n        };\n        setWaypoints([...waypoints, newWaypoint]);\n        setCurrentWaypoint(currentWaypoint + 1);\n        if (currentWaypoint + 1 === waypointCount) {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n          document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n        } else {\n          alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n        }\n      } else if (connectionStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n        if (clickedNode) {\n          if (clickedNode._id === firstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          try {\n            // 웨이포인트 포함 총 거리 계산\n            const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n\n            // API 요청: 연결 및 거리 정보 포함\n            const token = localStorage.getItem('token');\n            await axios.post(`http://172.30.1.30:5557/map/node/connect`, {\n              node1: firstNodeId,\n              node2: clickedNode._id,\n              waypoints: waypoints,\n              distance: totalDistance // 거리 값 추가\n            }, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            alert(`노드가 성공적으로 연결되었습니다. 전체 꺾인 경로의 가중치: ${totalDistance.toFixed(2)}`);\n\n            // 연결 생성 후 상태 초기화\n            setConnectionStep('idle');\n            setFirstNodeId(null);\n            setWaypoints([]);\n            setWaypointCount(0);\n            setCurrentWaypoint(0);\n            document.body.style.cursor = 'default'; // 커서 복구\n            await fetchNodes(selectedMap._id); // 노드 목록 갱신\n            drawAll(); // 노드 및 간선 다시 그리기\n          } catch (error) {\n            console.error('노드 연결 중 오류 발생:', error);\n            alert('노드 연결에 실패했습니다.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (isCreatingNode) {\n        // 노드 생성 로직\n        setNodeX(x);\n        setNodeY(y);\n        setIsCreatingNode(false);\n        setIsNodePopupOpen(true);\n        document.body.style.cursor = 'default';\n      } else if (isDeletingNode) {\n        // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n        let nodeToDelete = null;\n        for (let node of nodes) {\n          const {\n            x: nodeX,\n            y: nodeY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            nodeToDelete = node;\n            break;\n          }\n        }\n        if (nodeToDelete) {\n          const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n          if (confirmDelete) {\n            try {\n              const token = localStorage.getItem('token');\n              await axios.put(`http://172.30.1.30:5557/map/node/${nodeToDelete._id}`, {}, {\n                // 두 번째 인자를 빈 객체로 전달\n                headers: {\n                  Authorization: `Bearer ${token}`\n                }\n              });\n              alert('노드가 성공적으로 삭제되었습니다.');\n\n              // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n              await fetchNodes(selectedMap._id);\n              drawAll(); // 삭제 후 모든 요소 다시 그리기\n\n              setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n            } catch (error) {\n              console.error('노드 삭제 중 오류 발생:', error);\n              alert('노드 삭제에 실패했습니다.');\n            }\n          }\n        } else {\n          alert('해당 위치에 노드를 찾을 수 없습니다.');\n        }\n      }\n    } catch (error) {\n      console.error('맵 클릭 처리 중 오류 발생:', error);\n      alert('맵 클릭 처리 중 오류가 발생했습니다.');\n    } finally {\n      // handleMapClick 이 끝나면 노드 정보를 다시 fetch하도록\n      await fetchNodes(selectedMap._id);\n      drawAll();\n    }\n  };\n\n  // 노드 간 총 꺾인 경로 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n    let totalDistance = 0;\n\n    // 거리 계산 함수 (직선 거리)\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지 거리\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n\n      // 각 웨이포인트 간 거리 합산\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n\n      // 마지막 웨이포인트에서 노드2까지 거리 추가\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우, 노드1과 노드2 간 직선 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      await fetchNodes(selectedMap._id); // 노드 목록 갱신\n      drawAll(); // 노드 및 간선 다시 그리기\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async mapId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      await fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n        setNoGoZones([]); // 금지구역 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = e => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = e => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async e => {\n    e.preventDefault();\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async e => {\n    e.preventDefault();\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = map => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"map-management-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNodeMode,\n    className: \"create-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDeleteNodeMode,\n    className: \"delete-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0AD\\uC81C\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleConnectNodeMode,\n    className: \"connect-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC5F0\\uACB0 \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDisconnectNodeMode,\n    className: \"disconnect-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faUnlink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 11\n    }\n  }), \" \\uC5F0\\uACB0 \\uD574\\uC81C \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNoGoZone,\n    className: \"create-nogozone-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 9\n    }\n  }, \"\\uAE08\\uC9C0 \\uAD6C\\uC5ED \\uC0DD\\uC131\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 950,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"map-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uB9AC\\uC2A4\\uD2B8\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsUploadPopupOpen(true),\n    className: \"add-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"map-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 11\n    }\n  }, maps.map(map => /*#__PURE__*/React.createElement(\"li\", {\n    key: map._id,\n    className: `map-list-item ${(selectedMap === null || selectedMap === void 0 ? void 0 : selectedMap._id) === map._id ? 'selected-map' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleSelectMap(map),\n    className: \"map-list-item-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 966,\n      columnNumber: 17\n    }\n  }, map.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => openEditPopup(map),\n    className: \"edit-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteMap(map._id),\n    className: \"delete-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), selectedMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5 \\uC124\\uBA85\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 991,\n      columnNumber: 15\n    }\n  }, selectedMap.description))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-and-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 997,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-container\",\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 11\n    }\n  }, mapImage ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"map-canvas\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseLeave,\n    style: {\n      cursor: isCreatingNode ? 'crosshair' : isCreatingNoGoZone ? 'crosshair' : connectionStep !== 'idle' || disconnectStep !== 'idle' ? 'pointer' : 'default'\n    } // 커서 스타일 수정\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5\\uC744 \\uC120\\uD0DD\\uD558\\uC5EC \\uC774\\uBBF8\\uC9C0\\uB97C \\uD655\\uC778\\uD558\\uC138\\uC694.\"), selectedMap && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"send-to-robots-button\",\n    onClick: handleSendMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 15\n    }\n  }, \"\\uB85C\\uBD07\\uC5D0\\uAC8C \\uC804\\uC1A1\")), /*#__PURE__*/React.createElement(NodeList, {\n    nodes: nodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 11\n    }\n  }), \" \")), isNodePopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 11\n    }\n  }, \"\\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 11\n    }\n  }, \"X: \", nodeX.toFixed(2), \", Y: \", nodeY.toFixed(2)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nodeName,\n    onChange: e => setNodeName(e.target.value),\n    placeholder: \"\\uB178\\uB4DC \\uC774\\uB984 \\uC785\\uB825\",\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitNode,\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 13\n    }\n  }, \"\\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsNodePopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 13\n    }\n  }, \"\\uCDE8\\uC18C\"))), isUploadPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUploadMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: uploadName,\n    onChange: e => setUploadName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: uploadDescription,\n    onChange: e => setUploadDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 13\n    }\n  }, \"\\uB9F5 \\uD30C\\uC77C (.pgm, .png, .jpg)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".pgm,.png,.jpg\",\n    onChange: handleFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 13\n    }\n  }, \"YAML \\uD30C\\uC77C (.yaml)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".yaml\",\n    onChange: handleYamlFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsUploadPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1108,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), isEditPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC218\\uC815\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUpdateMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: editName,\n    onChange: e => setEditName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1125,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: editDescription,\n    onChange: e => setEditDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      marginTop: '10px',\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: isMonitored,\n    onChange: e => setIsMonitored(e.target.checked),\n    style: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 15\n    }\n  }), \"\\uBAA8\\uB2C8\\uD130\\uB9C1 \\uB9F5\\uC73C\\uB85C \\uC124\\uC815\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB370\\uC774\\uD2B8\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsEditPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1154,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1168,\n      columnNumber: 9\n    }\n  }, hoveredNode.name), /*#__PURE__*/React.createElement(NodeDisconnect, {\n    firstNodeId: disconnectFirstNodeId,\n    secondNodeId: disconnectSecondNodeId,\n    onDisconnectSuccess: async isDeleted => {\n      if (isDeleted) {\n        // 삭제가 완료된 경우에만 실행\n        setDisconnectFirstNodeId(null);\n        setDisconnectSecondNodeId(null);\n        await fetchNodes(selectedMap._id); // 노드 정보 갱신\n        drawAll(); // 갱신된 정보로 노드 및 간선 다시 그리기\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1188,\n      columnNumber: 7\n    }\n  }));\n}\nexport default Mapmanage;\n뉴;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","FontAwesomeIcon","faEdit","faPlus","faLink","faUnlink","Navbar","LogoutButton","UserInfo","worldToMap","mapToWorld","NodeList","NodeDisconnect","Mapmanage","maps","setMaps","selectedMap","setSelectedMap","editName","setEditName","editDescription","setEditDescription","isMonitored","setIsMonitored","uploadName","setUploadName","uploadDescription","setUploadDescription","mapFile","setMapFile","yamlFile","setYamlFile","mapImage","setMapImage","isUploadPopupOpen","setIsUploadPopupOpen","isEditPopupOpen","setIsEditPopupOpen","isCreatingNode","setIsCreatingNode","nodeX","setNodeX","nodeY","setNodeY","nodeName","setNodeName","isNodePopupOpen","setIsNodePopupOpen","canvasRef","mapImageRef","nodes","setNodes","isDeletingNode","setIsDeletingNode","imageNaturalWidth","setImageNaturalWidth","imageNaturalHeight","setImageNaturalHeight","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","x","y","connectionStep","setConnectionStep","waypointCount","setWaypointCount","currentWaypoint","setCurrentWaypoint","waypoints","setWaypoints","firstNodeId","setFirstNodeId","disconnectStep","setDisconnectStep","disconnectFirstNodeId","setDisconnectFirstNodeId","disconnectSecondNodeId","setDisconnectSecondNodeId","isCreatingNoGoZone","setIsCreatingNoGoZone","dragging","setDragging","dragStart","setDragStart","currentRect","setCurrentRect","noGoZones","setNoGoZones","fetchMaps","token","localStorage","getItem","alert","response","get","headers","data","length","handleSelectMap","error","console","fetchNodes","mapId","status","fetchNoGoZones","map","name","description","_id","Authorization","responseType","imageUrl","URL","createObjectURL","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawAll","mapToMapCoordinates","forEach","zone","topLeft","bottomRight","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","node","connections","connection","connectedNode","find","n","startX","startY","endX","endY","beginPath","moveTo","wp","wpX","wpY","lineTo","stroke","size","startsWith","document","body","style","cursor","handleMouseMove","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","Math","sqrt","newRect","min","abs","handleMouseLeave","handleMouseDown","handleMouseUp","finalRect","topLeftWorld","bottomRightWorld","noGoZone","post","handleConnectNodeMode","count","parseInt","prompt","isNaN","handleDisconnectNodeMode","handleCreateNoGoZone","handleMapClick","clickX","clickY","clickedNode","newWaypoint","totalDistance","calculateTotalDistance","node1","node2","toFixed","nodeToDelete","confirmDelete","window","confirm","put","node1Id","node2Id","x1","y1","x2","y2","i","handleSubmitNode","trim","handleDeleteMap","handleFileChange","target","files","handleYamlFileChange","handleUpdateMap","preventDefault","_error$response","_error$response$data","message","handleUploadMap","formData","FormData","append","openEditPopup","handleCreateNodeMode","revokeObjectURL","handleDeleteNodeMode","handleSendMap","_error$response2","_error$response2$data","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","key","position","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","type","value","onChange","placeholder","onSubmit","required","accept","marginTop","color","checked","marginRight","backgroundColor","padding","borderRadius","pointerEvents","zIndex","fontSize","secondNodeId","onDisconnectSuccess","isDeleted","뉴"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js"],"sourcesContent":["// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink, faUnlink } from '@fortawesome/free-solid-svg-icons';\n\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\nimport NodeDisconnect from './NodeDisconnect'; // NodeDisconnect 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 연결 해제 단계 관리\n  const [disconnectStep, setDisconnectStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingSecondNode'\n  const [disconnectFirstNodeId, setDisconnectFirstNodeId] = useState(null);\n  const [disconnectSecondNodeId, setDisconnectSecondNodeId] = useState(null);\n\n  // 금지구역 관련 상태\n  const [isCreatingNoGoZone, setIsCreatingNoGoZone] = useState(false); // 금지 구역 생성 모드\n  const [dragging, setDragging] = useState(false); // 드래그 상태\n  const [dragStart, setDragStart] = useState(null); // 드래그 시작 지점\n  const [currentRect, setCurrentRect] = useState(null); // 현재 그려지고 있는 사각형\n  const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 목록 저장\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.30:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async (mapId) => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 금지구역 목록을 서버에서 가져오는 함수\n  const fetchNoGoZones = async (mapId) => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n      alert('금지구역을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async (map) => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${map._id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n\n    // 금지구역 가져오기\n    await fetchNoGoZones(map._id);\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawAll(); // 모든 요소 그리기 (노드, 금지구역 등)\n    };\n  };\n\n  // 맵 좌표계를 캔버스 좌표계로 변환하는 함수\n  const mapToMapCoordinates = (x, y) => {\n    return worldToMap(x, y, imageNaturalWidth, imageNaturalHeight);\n  };\n\n  // 캔버스에 모든 요소를 그리는 함수 (지도, 노드, 연결선, 금지구역)\n  const drawAll = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 캔버스 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 금지구역 그리기\n    noGoZones.forEach((zone) => {\n      const topLeft = mapToMapCoordinates(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = mapToMapCoordinates(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.x - topLeft.x;\n      const height = bottomRight.y - topLeft.y;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.x, topLeft.y, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n    });\n\n    // 드래그 중인 사각형 그리기\n    if (currentRect) {\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.2)'; // 반투명 붉은 배경\n      ctx.fillRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n      ctx.strokeStyle = 'red'; // 빨간색 테두리\n      ctx.lineWidth = 1;\n      ctx.strokeRect(currentRect.x, currentRect.y, currentRect.width, currentRect.height);\n    }\n\n    // 연결선을 먼저 그리기\n    nodes.forEach((node) => {\n      node.connections.forEach((connection) => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const { x: startX, y: startY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const { x: endX, y: endY } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach((wp) => {\n              const { x: wpX, y: wpY } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드 그리기\n    nodes.forEach((node) => {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 또는 금지구역 변경 시마다 캔버스에 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawAll(); // 모든 요소 다시 그리기\n    }\n  }, [nodes, noGoZones, currentRect]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (\n      !isDeletingNode &&\n      !connectionStep.startsWith('selecting') &&\n      !disconnectStep.startsWith('selecting') &&\n      !isCreatingNoGoZone &&\n      !dragging\n    ) {\n      document.body.style.cursor = 'default'; // 모든 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep, disconnectStep, isCreatingNoGoZone, dragging]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    let foundNode = null;\n\n    for (let node of nodes) {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) { // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({ x: e.clientX, y: e.clientY });\n    } else {\n      setHoveredNode(null);\n    }\n\n    // 금지구역 생성 모드일 때 드래그 중인 사각형 업데이트\n    if (isCreatingNoGoZone && dragging && dragStart) {\n      const newRect = {\n        x: Math.min(mouseX, dragStart.x),\n        y: Math.min(mouseY, dragStart.y),\n        width: Math.abs(mouseX - dragStart.x),\n        height: Math.abs(mouseY - dragStart.y),\n      };\n      setCurrentRect(newRect);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화 및 드래그 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n    // 드래그 중이었는데 캔버스를 벗어났을 경우 드래그 취소\n    if (isCreatingNoGoZone && dragging) {\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n    }\n  };\n\n  // 드래그 시작 이벤트 핸들러\n  const handleMouseDown = (e) => {\n    if (isCreatingNoGoZone) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const startX = e.clientX - rect.left;\n      const startY = e.clientY - rect.top;\n      setDragStart({ x: startX, y: startY });\n      setDragging(true);\n      document.body.style.cursor = 'crosshair';\n    }\n  };\n\n  // 드래그 종료 이벤트 핸들러\n  const handleMouseUp = async (e) => {\n    if (isCreatingNoGoZone && dragging && dragStart && currentRect) {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n\n      const rect = canvas.getBoundingClientRect();\n      const endX = e.clientX - rect.left;\n      const endY = e.clientY - rect.top;\n\n      // 드래그 완료 후 사각형의 최종 위치와 크기 설정\n      const finalRect = {\n        x: Math.min(endX, dragStart.x),\n        y: Math.min(endY, dragStart.y),\n        width: Math.abs(endX - dragStart.x),\n        height: Math.abs(endY - dragStart.y),\n      };\n\n      // 실제 월드 좌표로 변환하여 금지 구역 생성\n      const topLeftWorld = mapToWorld(finalRect.x, finalRect.y, imageNaturalWidth, imageNaturalHeight);\n      const bottomRightWorld = mapToWorld(finalRect.x + finalRect.width, finalRect.y + finalRect.height, imageNaturalWidth, imageNaturalHeight);\n\n      const noGoZone = {\n        topLeft: topLeftWorld,\n        bottomRight: bottomRightWorld,\n        mapId: selectedMap._id,\n      };\n\n      // 금지구역 서버에 저장\n      const token = localStorage.getItem('token');\n      try {\n        const response = await axios.post('http://172.30.1.30:5557/map/no-go-zones', noGoZone, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        alert('금지 구역이 성공적으로 생성되었습니다.');\n        setNoGoZones([...noGoZones, response.data.noGoZone]); // 생성된 금지 구역 추가\n      } catch (error) {\n        console.error('금지 구역 생성 중 오류 발생:', error);\n        alert('금지 구역 생성에 실패했습니다.');\n      }\n\n      // 상태 초기화\n      setDragging(false);\n      setDragStart(null);\n      setCurrentRect(null);\n      setIsCreatingNoGoZone(false);\n      document.body.style.cursor = 'default';\n      drawAll();\n    }\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 연결 해제 모드 활성화 함수\n  const handleDisconnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setDisconnectStep('selectingFirstNode');\n    setDisconnectFirstNodeId(null);\n    setDisconnectSecondNodeId(null);\n    alert('연결을 해제할 첫 번째 노드를 선택하세요.');\n    document.body.style.cursor = 'pointer'; // 연결 해제 모드 커서로 변경\n  };\n\n  // 금지구역 생성 모드 활성화 함수\n  const handleCreateNoGoZone = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNoGoZone(true);\n    setDragging(false);\n    setDragStart(null);\n    setCurrentRect(null);\n    document.body.style.cursor = 'crosshair'; // 금지 구역 생성 모드 커서로 변경\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가, 연결 해제\n  const handleMapClick = async (e) => {\n    if (!selectedMap) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    const { x, y } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n\n    try {\n      // 연결 해제 모드 처리\n      if (disconnectStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          setDisconnectFirstNodeId(clickedNode._id);\n          setDisconnectStep('selectingSecondNode');\n          alert('연결을 해제할 두 번째 노드를 선택하세요.');\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      if (disconnectStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택 및 연결 해제\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          if (clickedNode._id === disconnectFirstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          setDisconnectSecondNodeId(clickedNode._id);\n          setDisconnectStep('idle');\n          document.body.style.cursor = 'default'; // 커서 복구\n\n          // 연결 해제 로직 호출 (NodeDisconnect 컴포넌트에서 처리)\n          // 여기서는 NodeDisconnect 컴포넌트의 onDisconnectSuccess를 통해 처리됩니다.\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n\n        return; // 연결 해제 모드일 때 다른 모드 처리하지 않도록 return\n      }\n\n      // 기존 연결 및 노드 생성, 삭제 모드 처리\n      if (connectionStep === 'selectingFirstNode') {\n        // 첫 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          setFirstNodeId(clickedNode._id);\n          if (waypointCount > 0) {\n            setConnectionStep('selectingWaypoints');\n            alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n            document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n          } else {\n            setConnectionStep('selectingSecondNode');\n            alert('두 번째 노드를 선택하세요.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (connectionStep === 'selectingWaypoints') {\n        // 웨이포인트 추가\n        const newWaypoint = { x, y };\n        setWaypoints([...waypoints, newWaypoint]);\n        setCurrentWaypoint(currentWaypoint + 1);\n\n        if (currentWaypoint + 1 === waypointCount) {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n          document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n        } else {\n          alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n        }\n      } else if (connectionStep === 'selectingSecondNode') {\n        // 두 번째 노드 선택\n        let clickedNode = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            clickedNode = node;\n            break;\n          }\n        }\n\n        if (clickedNode) {\n          if (clickedNode._id === firstNodeId) {\n            alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n            return;\n          }\n          try {\n            // 웨이포인트 포함 총 거리 계산\n            const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n\n            // API 요청: 연결 및 거리 정보 포함\n            const token = localStorage.getItem('token');\n            await axios.post(`http://172.30.1.30:5557/map/node/connect`, {\n              node1: firstNodeId,\n              node2: clickedNode._id,\n              waypoints: waypoints,\n              distance: totalDistance, // 거리 값 추가\n            }, {\n              headers: { Authorization: `Bearer ${token}` }\n            });\n\n            alert(`노드가 성공적으로 연결되었습니다. 전체 꺾인 경로의 가중치: ${totalDistance.toFixed(2)}`);\n\n            // 연결 생성 후 상태 초기화\n            setConnectionStep('idle');\n            setFirstNodeId(null);\n            setWaypoints([]);\n            setWaypointCount(0);\n            setCurrentWaypoint(0);\n            document.body.style.cursor = 'default'; // 커서 복구\n            await fetchNodes(selectedMap._id); // 노드 목록 갱신\n            drawAll(); // 노드 및 간선 다시 그리기\n          } catch (error) {\n            console.error('노드 연결 중 오류 발생:', error);\n            alert('노드 연결에 실패했습니다.');\n          }\n        } else {\n          alert('유효한 노드를 클릭해주세요.');\n        }\n      } else if (isCreatingNode) {\n        // 노드 생성 로직\n        setNodeX(x);\n        setNodeY(y);\n        setIsCreatingNode(false);\n        setIsNodePopupOpen(true);\n        document.body.style.cursor = 'default';\n      } else if (isDeletingNode) {\n        // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n        let nodeToDelete = null;\n        for (let node of nodes) {\n          const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n          if (distance < 5) {\n            nodeToDelete = node;\n            break;\n          }\n        }\n\n        if (nodeToDelete) {\n          const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n          if (confirmDelete) {\n            try {\n              const token = localStorage.getItem('token');\n              await axios.put(`http://172.30.1.30:5557/map/node/${nodeToDelete._id}`, {}, { // 두 번째 인자를 빈 객체로 전달\n                headers: { Authorization: `Bearer ${token}` },\n              });\n              alert('노드가 성공적으로 삭제되었습니다.');\n\n              // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n              await fetchNodes(selectedMap._id);\n              drawAll(); // 삭제 후 모든 요소 다시 그리기\n\n              setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n            } catch (error) {\n              console.error('노드 삭제 중 오류 발생:', error);\n              alert('노드 삭제에 실패했습니다.');\n            }\n          }\n        } else {\n          alert('해당 위치에 노드를 찾을 수 없습니다.');\n        }\n      }\n    } catch (error) {\n      console.error('맵 클릭 처리 중 오류 발생:', error);\n      alert('맵 클릭 처리 중 오류가 발생했습니다.');\n    } finally {\n      // handleMapClick 이 끝나면 노드 정보를 다시 fetch하도록\n      await fetchNodes(selectedMap._id);\n      drawAll();\n    }\n  };\n\n  // 노드 간 총 꺾인 경로 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n\n    let totalDistance = 0;\n\n    // 거리 계산 함수 (직선 거리)\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지 거리\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n\n      // 각 웨이포인트 간 거리 합산\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n\n      // 마지막 웨이포인트에서 노드2까지 거리 추가\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우, 노드1과 노드2 간 직선 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id,\n      }, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      await fetchNodes(selectedMap._id); // 노드 목록 갱신\n      drawAll(); // 노드 및 간선 다시 그리기\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async (mapId) => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      await fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n        setNoGoZones([]); // 금지구역 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = (e) => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = (e) => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async (e) => {\n    e.preventDefault();\n\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async (e) => {\n    e.preventDefault();\n\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      await fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = (map) => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"map-management-page\">\n      {/* 상단 네비게이션 바 */}\n      <header className=\"map-management-header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n\n      {/* 툴바: 네비게이션 아래에 위치 */}\n      <div className=\"toolbar\">\n        <button onClick={handleCreateNodeMode} className=\"create-node-button\">\n          <FontAwesomeIcon icon={faPlus} /> 노드 생성\n        </button>\n        <button onClick={handleDeleteNodeMode} className=\"delete-node-button\">\n          <FontAwesomeIcon icon={faEdit} /> 노드 삭제\n        </button>\n        <button onClick={handleConnectNodeMode} className=\"connect-node-button\">\n          <FontAwesomeIcon icon={faLink} /> 노드 연결 {/* \"노드 연결\" 버튼 추가 */}\n        </button>\n        <button onClick={handleDisconnectNodeMode} className=\"disconnect-node-button\">\n          <FontAwesomeIcon icon={faUnlink} /> 연결 해제 {/* \"연결 해제\" 버튼 추가 */}\n        </button>\n        {/* '금지 구역 생성' 버튼 추가 */}\n        <button\n          onClick={handleCreateNoGoZone}\n          className=\"create-nogozone-button\"\n        >\n          금지 구역 생성\n        </button>\n      </div>\n\n      {/* 맵 리스트와 이미지 컨텐츠 */}\n      <div className=\"map-management-content\">\n        {/* 맵 리스트 컨테이너 */}\n        <div className=\"map-list-container\">\n          <h2 className=\"map-list-header\">\n            맵 리스트\n            <button\n              onClick={() => setIsUploadPopupOpen(true)}\n              className=\"add-map-button\"\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          </h2>\n          <ul className=\"map-list\">\n            {maps.map((map) => (\n              <li\n                key={map._id}\n                className={`map-list-item ${selectedMap?._id === map._id ? 'selected-map' : ''}`}\n              >\n                <span\n                  onClick={() => handleSelectMap(map)}\n                  className=\"map-list-item-name\"\n                >\n                  {map.name}\n                </span>\n                <button\n                  onClick={() => openEditPopup(map)}\n                  className=\"edit-map-button\"\n                >\n                  <FontAwesomeIcon icon={faEdit} />\n                </button>\n                <button\n                  onClick={() => handleDeleteMap(map._id)}\n                  className=\"delete-map-button\"\n                >\n                  &times;\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {selectedMap && (\n            <div className=\"map-description\">\n              <h3>맵 설명</h3>\n              <p>{selectedMap.description}</p>\n            </div>\n          )}\n        </div>\n\n        {/* 지도 이미지와 노드 렌더링 및 노드 리스트 영역 */}\n        <div className=\"map-image-and-node-list\">\n          {/* 지도 이미지와 노드 렌더링 영역 */}\n          <div\n            className=\"map-image-container\"\n            style={{ position: 'relative' }}\n          >\n            {mapImage ? (\n              <canvas\n                ref={canvasRef}\n                className=\"map-canvas\"\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                onMouseLeave={handleMouseLeave}\n                style={{\n                  cursor:\n                    isCreatingNode\n                      ? 'crosshair'\n                      : isCreatingNoGoZone\n                      ? 'crosshair'\n                      : connectionStep !== 'idle' || disconnectStep !== 'idle'\n                      ? 'pointer'\n                      : 'default'\n                }} // 커서 스타일 수정\n              />\n            ) : (\n              <p>맵을 선택하여 이미지를 확인하세요.</p>\n            )}\n\n            {/* 플로팅 Send to Robots 버튼 추가 */}\n            {selectedMap && (\n              <button\n                className=\"send-to-robots-button\"\n                onClick={handleSendMap}\n              >\n                로봇에게 전송\n              </button>\n            )}\n          </div>\n\n          {/* 오른쪽에 노드 목록 표시 */}\n          <NodeList nodes={nodes} /> {/* NodeList 컴포넌트 사용 */}\n        </div>\n      </div>\n\n      {/* Node 생성 팝업 */}\n      {isNodePopupOpen && (\n        <div className=\"popup-container\">\n          <h3>노드 생성</h3>\n          <p>X: {nodeX.toFixed(2)}, Y: {nodeY.toFixed(2)}</p>\n          <input\n            type=\"text\"\n            value={nodeName}\n            onChange={(e) => setNodeName(e.target.value)}\n            placeholder=\"노드 이름 입력\"\n            className=\"popup-input\"\n          />\n          <div className=\"popup-button-container\">\n            <button onClick={handleSubmitNode} className=\"popup-submit-button\">\n              생성\n            </button>\n            <button\n              onClick={() => setIsNodePopupOpen(false)}\n              className=\"popup-cancel-button\"\n            >\n              취소\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Map Upload Popup */}\n      {isUploadPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 업로드</h3>\n          <form onSubmit={handleUploadMap}>\n            <input\n              type=\"text\"\n              value={uploadName}\n              onChange={(e) => setUploadName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={uploadDescription}\n              onChange={(e) => setUploadDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            <label>맵 파일 (.pgm, .png, .jpg)</label>\n            <input\n              type=\"file\"\n              accept=\".pgm,.png,.jpg\"\n              onChange={handleFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <label>YAML 파일 (.yaml)</label>\n            <input\n              type=\"file\"\n              accept=\".yaml\"\n              onChange={handleYamlFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업로드\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsUploadPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Edit Map Popup */}\n      {isEditPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 수정</h3>\n          <form onSubmit={handleUpdateMap}>\n            <input\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={editDescription}\n              onChange={(e) => setEditDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            {/* 모니터링 지도 설정 체크박스 추가 */}\n            <label style={{ marginTop: '10px', color: '#333' }}>\n              <input\n                type=\"checkbox\"\n                checked={isMonitored}\n                onChange={(e) => setIsMonitored(e.target.checked)}\n                style={{ marginRight: '10px' }}\n              />\n              모니터링 맵으로 설정\n            </label>\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업데이트\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsEditPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Hover Tooltip */}\n      {hoveredNode && (\n        <div\n          className=\"tooltip\"\n          style={{\n            position: 'fixed',\n            top: `${tooltipPosition.y + 10}px`,\n            left: `${tooltipPosition.x + 10}px`,\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            padding: '5px 10px',\n            borderRadius: '4px',\n            pointerEvents: 'none',\n            zIndex: 1000,\n            fontSize: '12px',\n          }}\n        >\n          {hoveredNode.name}\n        </div>\n      )}\n\n      {/* NodeDisconnect 컴포넌트에 클릭한 노드 정보 전달 */}\n      <NodeDisconnect\n        firstNodeId={disconnectFirstNodeId}\n        secondNodeId={disconnectSecondNodeId}\n        onDisconnectSuccess={async (isDeleted) => {\n          if (isDeleted) {  // 삭제가 완료된 경우에만 실행\n            setDisconnectFirstNodeId(null);\n            setDisconnectSecondNodeId(null);\n            await fetchNodes(selectedMap._id); // 노드 정보 갱신\n            drawAll(); // 갱신된 정보로 노드 및 간선 다시 그리기\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Mapmanage;\n뉴"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}