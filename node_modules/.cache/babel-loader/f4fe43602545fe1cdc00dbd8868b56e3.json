{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef } from 'react';\nfunction MapComponent({\n  robots,\n  mapUrl\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const mapResolution = 0.05; // 지도 해상도 값 (1픽셀당 미터)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      // 캔버스 크기 설정\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n\n      // 지도 이미지를 캔버스에 그립니다.\n      ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n      // 로봇 위치를 그립니다.\n      drawRobots();\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    // 캔버스를 지우고 지도 이미지를 다시 그립니다.\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 로봇들을 지도 위에 그립니다.\n    robots.forEach(robot => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n\n      // 로봇 상태에 따라 색상을 다르게 설정\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 그리기\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI); // 로봇을 원으로 표시\n      ctx.fill();\n\n      // 로봇의 위치 텍스트로 표시 (x, y 좌표)\n      ctx.font = '12px Arial';\n      ctx.fillStyle = 'black';\n      ctx.fillText(`(${x.toFixed(2)}, ${y.toFixed(2)})`, mapX + 10, mapY); // 로봇 좌표 출력\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n    const mapX = (x + mapWidth * mapResolution / 2) / mapResolution;\n    const mapY = mapHeight - (y + mapHeight * mapResolution / 2) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 지도 이미지를 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    style: {\n      border: '1px solid black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","MapComponent","robots","mapUrl","canvasRef","mapImageRef","mapResolution","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","width","clientWidth","height","clientHeight","drawImage","drawRobots","onerror","err","console","error","clearRect","forEach","robot","_robot$status","_robot$status2","_robot$status3","x","y","location","mapX","mapY","worldToMap","robotColor","status","state","fillStyle","beginPath","arc","Math","PI","fill","font","fillText","toFixed","mapImage","mapWidth","mapHeight","createElement","className","style","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","border"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nfunction MapComponent({ robots, mapUrl }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const mapResolution = 0.05; // 지도 해상도 값 (1픽셀당 미터)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      // 캔버스 크기 설정\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n\n      // 지도 이미지를 캔버스에 그립니다.\n      ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n      // 로봇 위치를 그립니다.\n      drawRobots();\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    // 캔버스를 지우고 지도 이미지를 다시 그립니다.\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 로봇들을 지도 위에 그립니다.\n    robots.forEach((robot) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      // 로봇 상태에 따라 색상을 다르게 설정\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 그리기\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI); // 로봇을 원으로 표시\n      ctx.fill();\n\n      // 로봇의 위치 텍스트로 표시 (x, y 좌표)\n      ctx.font = '12px Arial';\n      ctx.fillStyle = 'black';\n      ctx.fillText(`(${x.toFixed(2)}, ${y.toFixed(2)})`, mapX + 10, mapY); // 로봇 좌표 출력\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x + (mapWidth * mapResolution) / 2) / mapResolution;\n    const mapY = mapHeight - (y + (mapHeight * mapResolution) / 2) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  // 지도 이미지를 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n\n  return (\n    <div className=\"map-canvas-container\" style={{ position: 'relative' }}>\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\" style={{ border: '1px solid black' }}></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}