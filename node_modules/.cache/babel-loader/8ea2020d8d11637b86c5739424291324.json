{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css'; // 스타일 파일 임포트\n\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n  const mapX = (worldX - mapOrigin[0]) / mapResolution;\n  const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n  return {\n    x: mapX,\n    y: mapY\n  };\n};\nfunction CreateTaskFlow({\n  onClose,\n  onTaskFlowAdd\n}) {\n  const [nodeName, setNodeName] = useState('');\n  const [stepName, setStepName] = useState('');\n  const [nodes, setNodes] = useState([]); // 노드 목록 상태\n  const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 이미지 참조\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n  const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n  const [hoveredNode, setHoveredNode] = useState(null); // 마우스가 올라간 노드\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  }); // 툴팁 위치\n\n  // 모니터링 중인 맵 정보를 가져오는 함수\n  const fetchMonitoredMap = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n      fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n      loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n    } catch (error) {\n      console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n      alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 노드를 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵 이미지 로드 함수\n  const loadMapImage = async mapId => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 지도 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 이미지가 로드될 때 캔버스에 그리는 함수\n  const loadCanvasWithImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawNodes(); // 노드 그리기\n    };\n  };\n\n  // 노드 그리기 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 기존 노드 그리기 전에 캔버스를 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 다시 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10; // 정사각형의 크기\n\n      // 노드를 빨간 정사각형으로 그리기\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n\n      // 호버된 노드에 대해 이름을 그리기\n      if (hoveredNode && hoveredNode.name === node.name) {\n        ctx.fillStyle = 'black';\n        ctx.font = '12px Arial';\n        ctx.fillText(node.name, x + size / 2 + 4, y - size / 2 - 4); // 노드 오른쪽 위에 이름 표시\n      }\n    });\n  };\n\n  // 마우스 이동 이벤트 핸들러\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n    setTooltipPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n  };\n\n  // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보 가져오기\n  useEffect(() => {\n    fetchMonitoredMap();\n  }, []);\n\n  // 지도 이미지가 변경될 때마다 캔버스에 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadCanvasWithImage();\n    }\n  }, [mapImage, hoveredNode]);\n\n  // 작업 플로우 추가 처리\n  const handleSubmit = () => {\n    onTaskFlowAdd(nodeName, stepName); // 부모 컴포넌트에 작업 플로우 추가 요청\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-preview\",\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uD50C\\uB85C\\uC6B0 \\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nodeName,\n    onChange: e => setNodeName(e.target.value),\n    placeholder: \"\\uB178\\uB4DC \\uC774\\uB984 \\uC785\\uB825\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: stepName,\n    onChange: e => setStepName(e.target.value),\n    placeholder: \"\\uB2E8\\uACC4 \\uC774\\uB984 \\uC785\\uB825\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, \"\\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"\\uCDE8\\uC18C\"))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, hoveredNode.name));\n}\nexport default CreateTaskFlow;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","mapResolution","mapOrigin","worldToMap","worldX","worldY","imageNaturalWidth","imageNaturalHeight","mapX","mapY","x","y","CreateTaskFlow","onClose","onTaskFlowAdd","nodeName","setNodeName","stepName","setStepName","nodes","setNodes","mapImage","setMapImage","canvasRef","mapImageRef","setImageNaturalWidth","setImageNaturalHeight","monitoredMap","setMonitoredMap","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","fetchMonitoredMap","token","localStorage","getItem","response","get","headers","Authorization","data","fetchNodes","_id","loadMapImage","error","console","alert","mapId","status","canvas","current","responseType","imageUrl","URL","createObjectURL","loadCanvasWithImage","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawNodes","forEach","node","size","fillStyle","fillRect","name","font","fillText","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","handleSubmit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","ref","style","border","type","value","onChange","e","target","placeholder","onClick","position","backgroundColor","color","padding","borderRadius","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css'; // 스타일 파일 임포트\n\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n    return { x: mapX, y: mapY };\n};\n\nfunction CreateTaskFlow({ onClose, onTaskFlowAdd }) {\n    const [nodeName, setNodeName] = useState('');\n    const [stepName, setStepName] = useState('');\n    const [nodes, setNodes] = useState([]); // 노드 목록 상태\n    const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n    const canvasRef = useRef(null); // 캔버스 참조\n    const mapImageRef = useRef(null); // 이미지 참조\n    const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n    const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n    const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n    const [hoveredNode, setHoveredNode] = useState(null); // 마우스가 올라간 노드\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 }); // 툴팁 위치\n\n    // 모니터링 중인 맵 정보를 가져오는 함수\n    const fetchMonitoredMap = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n            fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n            loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n        } catch (error) {\n            console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n            alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 노드를 가져오는 함수\n    const fetchNodes = async (mapId) => {\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n            if (response.status === 200) {\n                setNodes(response.data); // 노드 리스트 상태 업데이트\n            } else {\n                setNodes([]); // 실패 시 빈 배열로 초기화\n            }\n        } catch (error) {\n            console.error('노드를 가져오는 중 오류 발생:', error);\n            setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n            alert('노드를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 맵 이미지 로드 함수\n    const loadMapImage = async (mapId) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const token = localStorage.getItem('token');\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n                responseType: 'blob',\n            });\n            const imageUrl = URL.createObjectURL(response.data);\n            setMapImage(imageUrl); // 지도 이미지 설정\n        } catch (error) {\n            console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n            alert('맵 이미지를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 이미지가 로드될 때 캔버스에 그리는 함수\n    const loadCanvasWithImage = () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        mapImageRef.current = new Image();\n        mapImageRef.current.src = mapImage;\n\n        mapImageRef.current.onload = () => {\n            const imgWidth = mapImageRef.current.width;\n            const imgHeight = mapImageRef.current.height;\n            setImageNaturalWidth(imgWidth);\n            setImageNaturalHeight(imgHeight);\n\n            // 캔버스 크기 조정 및 기존 내용 클리어\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // 지도 이미지를 캔버스에 그리기\n            ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n            drawNodes(); // 노드 그리기\n        };\n    };\n\n    // 노드 그리기 함수\n    const drawNodes = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n        // 기존 노드 그리기 전에 캔버스를 클리어\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // 지도 이미지 다시 그리기\n        ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n        // 노드 그리기\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10; // 정사각형의 크기\n\n            // 노드를 빨간 정사각형으로 그리기\n            ctx.fillStyle = 'red';\n            ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n\n            // 호버된 노드에 대해 이름을 그리기\n            if (hoveredNode && hoveredNode.name === node.name) {\n                ctx.fillStyle = 'black';\n                ctx.font = '12px Arial';\n                ctx.fillText(node.name, x + size / 2 + 4, y - size / 2 - 4); // 노드 오른쪽 위에 이름 표시\n            }\n        });\n    };\n\n    // 마우스 이동 이벤트 핸들러\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const rect = canvas.getBoundingClientRect();\n        const mouseX = event.clientX - rect.left;\n        const mouseY = event.clientY - rect.top;\n\n        let foundNode = null;\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n                foundNode = node;\n            }\n        });\n\n        setHoveredNode(foundNode);\n        setTooltipPosition({ x: event.clientX, y: event.clientY });\n    };\n\n    // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보 가져오기\n    useEffect(() => {\n        fetchMonitoredMap();\n    }, []);\n\n    // 지도 이미지가 변경될 때마다 캔버스에 그리기\n    useEffect(() => {\n        if (mapImage) {\n            loadCanvasWithImage();\n        }\n    }, [mapImage, hoveredNode]);\n\n    // 작업 플로우 추가 처리\n    const handleSubmit = () => {\n        onTaskFlowAdd(nodeName, stepName); // 부모 컴포넌트에 작업 플로우 추가 요청\n    };\n\n    return (\n        <div className=\"create-task-flow-container\">\n            {/* 좌측: 지도와 노드를 표시 */}\n            <div className=\"map-preview\" onMouseMove={handleMouseMove}>\n                <canvas ref={canvasRef} style={{ border: '1px solid #ccc', width: '100%', height: '100%' }}></canvas>\n            </div>\n\n            {/* 우측: 작업 플로우 추가 폼 */}\n            <div className=\"task-flow-form\">\n                <h3>작업 플로우 추가</h3>\n                <input \n                    type=\"text\" \n                    value={nodeName} \n                    onChange={(e) => setNodeName(e.target.value)} \n                    placeholder=\"노드 이름 입력\"\n                />\n                <input \n                    type=\"text\" \n                    value={stepName} \n                    onChange={(e) => setStepName(e.target.value)} \n                    placeholder=\"단계 이름 입력\"\n                />\n                <div className=\"buttons\">\n                    <button onClick={handleSubmit}>추가</button>\n                    <button onClick={onClose}>취소</button>\n                </div>\n            </div>\n\n            {/* Hover Tooltip */}\n            {hoveredNode && (\n                <div\n                    className=\"tooltip\"\n                    style={{\n                        position: 'fixed',\n                        top: `${tooltipPosition.y + 10}px`,\n                        left: `${tooltipPosition.x + 10}px`,\n                        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        pointerEvents: 'none',\n                        zIndex: 1000,\n                        fontSize: '12px',\n                    }}\n                >\n                    {hoveredNode.name}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default CreateTaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}