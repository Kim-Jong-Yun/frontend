{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport './TestPage.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport throttle from 'lodash/throttle';\nfunction TestPage() {\n  const [mapData, setMapData] = useState(null); // SLAM 맵 데이터\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  const [selectedTask, setSelectedTask] = useState('');\n  const [availableTasks, setAvailableTasks] = useState(['Task 1', 'Task 2', 'Task 3']);\n  const mapCanvasRef = useRef(null); // 지도 캔버스 레퍼런스\n  const robotsCanvasRef = useRef(null); // 로봇 캔버스 레퍼런스\n  const [mapResolution, setMapResolution] = useState(0.05); // 예시 해상도\n  const [dragging, setDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [lastMousePos, setLastMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [expandedRobotId, setExpandedRobotId] = useState(null);\n\n  // WebSocket URL을 실제 서버 주소로 변경하세요.\n  const WEBSOCKET_URL = 'ws://your-websocket-url';\n\n  // 데이터 초기화 및 WebSocket 설정\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMapMetadata();\n      await fetchMonitoredMap();\n      fetchRobots();\n      fetchAllTasks();\n    };\n    fetchData();\n    const socket = new WebSocket(WEBSOCKET_URL); // 실제 WebSocket URL로 변경\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n\n    // Throttle을 사용하여 메시지 수신 빈도를 1.5초로 제한\n    const throttledOnMessage = throttle(event => {\n      console.log('WebSocket 메시지 수신:', event.data); // 디버깅용\n      try {\n        const updatedRobots = JSON.parse(event.data);\n        setRobots(updatedRobots); // 상태 업데이트\n      } catch (err) {\n        console.error('로봇 데이터 파싱 오류:', err);\n      }\n    }, 1500); // 1500ms = 1.5초\n\n    socket.onmessage = throttledOnMessage;\n    socket.onerror = error => {\n      console.error('WebSocket 오류:', error);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n    return () => {\n      socket.close();\n      throttledOnMessage.cancel(); // Throttle 취소\n    };\n  }, []);\n\n  // 지도 그리기 useEffect\n  useEffect(() => {\n    drawMap();\n  }, [mapData, dragOffset]);\n\n  // 로봇 그리기 useEffect\n  useEffect(() => {\n    drawRobots();\n  }, [robots, dragOffset]);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login';\n      return null;\n    }\n    return token;\n  };\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const metadata = response.data;\n      console.log('지도 메타데이터:', metadata); // 디버깅용\n\n      // metadata가 객체인지 문자열인지 확인\n      let resolution;\n      if (typeof metadata === 'object' && metadata.resolution) {\n        resolution = parseFloat(metadata.resolution);\n      } else if (typeof metadata === 'string') {\n        const match = metadata.match(/resolution:\\s*(\\d+(\\.\\d+)?)/);\n        if (match && match[1]) {\n          resolution = parseFloat(match[1]);\n        }\n      }\n      if (resolution) {\n        console.log('지도 해상도:', resolution); // 디버깅용\n        setMapResolution(resolution);\n      } else {\n        console.error('지도 해상도 정보를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'json' // SLAM 데이터 형식에 맞게 수정\n      });\n      const mapData = response.data; // SLAM에서 받은 맵 데이터 (예: 그리드 맵)\n      setMapData(mapData);\n      console.log('지도 데이터 수신:', mapData); // 디버깅용\n      drawMap(mapData);\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchAllTasks = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setTasks(response.data);\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n  const fetchRobots = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5559/robot/robots', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setRobots(response.data);\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n  const toggleExpand = robotId => {\n    if (expandedRobotId === robotId) {\n      setExpandedRobotId(null);\n    } else {\n      setExpandedRobotId(robotId);\n    }\n  };\n  const openPopup = robot => {\n    setSelectedRobot(robot);\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const handleTaskChange = event => {\n    setSelectedTask(event.target.value);\n  };\n  const formatDate = date => {\n    const parsedDate = new Date(date);\n    return isNaN(parsedDate) ? 'N/A' : parsedDate.toLocaleString();\n  };\n\n  // 좌표 변환 함수\n  const worldToMap = (x, y, mapWidth, mapHeight, offsetX, offsetY, resolution) => {\n    // SLAM에서 제공하는 좌표계를 웹 맵 좌표계로 변환\n    // 예: x, y는 미터 단위, resolution은 픽셀/미터\n    const mapX = x * resolution + mapWidth / 2 + offsetX;\n    const mapY = mapHeight / 2 - y * resolution + offsetY;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 지도 그리기 함수\n  const drawMap = (mapDataParam = mapData) => {\n    const mapCanvas = mapCanvasRef.current;\n    if (!mapCanvas) {\n      console.error('mapCanvasRef가 참조되지 않습니다.');\n      return;\n    }\n    const ctx = mapCanvas.getContext('2d');\n    ctx.clearRect(0, 0, mapCanvas.width, mapCanvas.height);\n    if (mapDataParam) {\n      // 예시: 그리드 맵 데이터를 사용하여 맵을 그리기\n      // mapDataParam은 2D 배열 또는 포인트 클라우드 형식이어야 합니다.\n      const gridSize = 10; // 셀 크기 (픽셀 단위)\n      for (let y = 0; y < mapDataParam.length; y++) {\n        for (let x = 0; x < mapDataParam[y].length; x++) {\n          if (mapDataParam[y][x] === 1) {\n            // 장애물\n            ctx.fillStyle = 'black';\n            ctx.fillRect(x * gridSize, y * gridSize, gridSize, gridSize);\n          } else {\n            ctx.fillStyle = 'white';\n            ctx.fillRect(x * gridSize, y * gridSize, gridSize, gridSize);\n          }\n        }\n      }\n      console.log('동적 맵 그리기 완료'); // 디버깅용\n    } else {\n      console.warn('mapData가 존재하지 않습니다.');\n    }\n  };\n\n  // 로봇 그리기 함수\n  const drawRobots = () => {\n    const robotsCanvas = robotsCanvasRef.current;\n    if (!robotsCanvas) {\n      console.error('robotsCanvasRef가 참조되지 않습니다.');\n      return;\n    }\n    const ctx = robotsCanvas.getContext('2d');\n    ctx.clearRect(0, 0, robotsCanvas.width, robotsCanvas.height);\n    robots.forEach(robot => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y,\n        heading\n      } = robot.location; // heading은 로봇의 방향 (라디안 단위)\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y, robotsCanvas.width, robotsCanvas.height, dragOffset.x, dragOffset.y, mapResolution);\n      if (isNaN(mapX) || isNaN(mapY)) {\n        console.warn(`로봇 ${robot.name}의 변환된 좌표가 유효하지 않습니다: mapX=${mapX}, mapY=${mapY}`);\n        return;\n      }\n\n      // 로봇의 방향을 화살표로 표시\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(mapX, mapY);\n      ctx.lineTo(mapX + Math.cos(heading) * 15, mapY + Math.sin(heading) * 15);\n      ctx.stroke();\n\n      // 로봇의 위치를 원으로 표시\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 8, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n\n      // 로봇 이름 표시\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.fillText(robot.name, mapX + 10, mapY - 10);\n    });\n    console.log('로봇 그리기 완료'); // 디버깅용\n  };\n\n  // 지도 드래그 핸들링\n  const handleMouseDown = e => {\n    setDragging(true);\n    setLastMousePos({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n  const handleMouseMove = e => {\n    if (dragging && mapData) {\n      const deltaX = e.clientX - lastMousePos.x;\n      const deltaY = e.clientY - lastMousePos.y;\n      let newOffsetX = dragOffset.x + deltaX;\n      let newOffsetY = dragOffset.y + deltaY;\n\n      // 지도 이동 제한 (지도 크기와 캔버스 크기에 따라 조정)\n      // 여기서는 임의의 제한을 설정했습니다. 실제 맵 크기에 맞게 수정하세요.\n      const maxOffsetX = 100;\n      const maxOffsetY = 100;\n      newOffsetX = Math.min(maxOffsetX, Math.max(-maxOffsetX, newOffsetX));\n      newOffsetY = Math.min(maxOffsetY, Math.max(-maxOffsetY, newOffsetY));\n      setDragOffset({\n        x: newOffsetX,\n        y: newOffsetY\n      });\n      setLastMousePos({\n        x: e.clientX,\n        y: e.clientY\n      });\n      // 지도와 로봇을 다시 그립니다.\n      drawMap();\n      drawRobots();\n    }\n  };\n  const handleMouseUp = () => setDragging(false);\n  const handleMouseLeave = () => setDragging(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-page-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }\n  }, mapData ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: mapCanvasRef,\n    className: \"map-canvas\",\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: robotsCanvasRef,\n    className: \"robots-canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"robot-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 11\n    }\n  }, \"\\uB85C\\uBD07 \\uB9AC\\uC2A4\\uD2B8\"), /*#__PURE__*/React.createElement(\"ul\", {\n    style: {\n      listStyleType: 'none',\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 11\n    }\n  }, robots.length > 0 ? robots.map(robot => {\n    var _robot$status4, _robot$status5, _robot$status6;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: robot._id,\n      className: \"robot-list-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 27\n      }\n    }, \"\\uC774\\uB984:\"), \" \", robot.name), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 27\n      }\n    }, \"\\uC0C1\\uD0DC:\"), \" \", ((_robot$status4 = robot.status) === null || _robot$status4 === void 0 ? void 0 : _robot$status4.state) || 'Unknown'), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 27\n      }\n    }, \"\\uBC30\\uD130\\uB9AC:\"), \" \", ((_robot$status5 = robot.status) === null || _robot$status5 === void 0 ? void 0 : _robot$status5.battery) || 'N/A', \"%\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => toggleExpand(robot._id),\n      style: {\n        background: 'none',\n        border: 'none',\n        cursor: 'pointer',\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }\n    }, expandedRobotId === robot._id ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-chevron-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 56\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-chevron-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 96\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `robot-details ${expandedRobotId === robot._id ? 'expanded' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 24\n      }\n    }, \"IP:\"), \" \", robot.ip), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 24\n      }\n    }, \"\\uC704\\uCE58:\"), \" x: \", robot.location.x, \", y: \", robot.location.y), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 24\n      }\n    }, \"\\uC18D\\uB3C4:\"), \" \", ((_robot$status6 = robot.status) === null || _robot$status6 === void 0 ? void 0 : _robot$status6.speed) || 'N/A', \" m/s\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 23\n      }\n    }, \"job\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => openPopup(robot),\n      style: {\n        background: 'none',\n        border: '1px solid #ccc',\n        cursor: 'pointer',\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 23\n      }\n    }, \"+\"))));\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 15\n    }\n  }, \"\\uC5F0\\uACB0\\uB41C \\uB85C\\uBD07\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\")))), isPopupOpen && selectedRobot && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    onClick: closePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    onClick: e => e.stopPropagation(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, \"\\uC791\\uC5C5 \\uC120\\uD0DD - \", selectedRobot.name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 15\n    }\n  }, \"\\uC791\\uC5C5\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694:\", /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedTask,\n    onChange: handleTaskChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 19\n    }\n  }, \"\\uC120\\uD0DD\\uD558\\uC138\\uC694\"), availableTasks.map((task, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 21\n    }\n  }, task))))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"popup-close-button\",\n    onClick: closePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 13\n    }\n  }, \"\\uB2EB\\uAE30\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-log-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }\n  }, \"\\uC791\\uC5C5 \\uB85C\\uADF8\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-log-table-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"task-log-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uC774\\uB984\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 17\n    }\n  }, \"\\uB85C\\uBD07 IP\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uC720\\uD615\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, \"\\uC0C1\\uD0DC\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, \"\\uC2DC\\uC791 \\uC2DC\\uAC04\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 17\n    }\n  }, \"\\uC885\\uB8CC \\uC2DC\\uAC04\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }, tasks.length > 0 ? tasks.map((task, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 21\n    }\n  }, task.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 21\n    }\n  }, task.robotIp), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 21\n    }\n  }, task.taskType), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 21\n    }\n  }, task.status), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 21\n    }\n  }, formatDate(task.startTime)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 21\n    }\n  }, formatDate(task.endTime)))) : /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    colSpan: \"6\",\n    style: {\n      textAlign: 'center',\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 19\n    }\n  }, \"\\uC791\\uC5C5 \\uB85C\\uADF8\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\")))))));\n}\nexport default TestPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","Navbar","LogoutButton","UserInfo","axios","throttle","TestPage","mapData","setMapData","robots","setRobots","tasks","setTasks","isPopupOpen","setIsPopupOpen","selectedRobot","setSelectedRobot","selectedTask","setSelectedTask","availableTasks","setAvailableTasks","mapCanvasRef","robotsCanvasRef","mapResolution","setMapResolution","dragging","setDragging","dragOffset","setDragOffset","x","y","lastMousePos","setLastMousePos","expandedRobotId","setExpandedRobotId","WEBSOCKET_URL","fetchData","fetchMapMetadata","fetchMonitoredMap","fetchRobots","fetchAllTasks","socket","WebSocket","onopen","console","log","throttledOnMessage","event","data","updatedRobots","JSON","parse","err","error","onmessage","onerror","onclose","close","cancel","drawMap","drawRobots","getToken","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","metadata","resolution","parseFloat","match","responseType","toggleExpand","robotId","openPopup","robot","closePopup","handleTaskChange","target","value","formatDate","date","parsedDate","Date","isNaN","toLocaleString","worldToMap","mapWidth","mapHeight","offsetX","offsetY","mapX","mapY","mapDataParam","mapCanvas","current","ctx","getContext","clearRect","width","height","gridSize","length","fillStyle","fillRect","warn","robotsCanvas","forEach","_robot$status","_robot$status2","_robot$status3","heading","name","strokeStyle","lineWidth","beginPath","moveTo","lineTo","Math","cos","sin","stroke","robotColor","status","state","arc","PI","fill","font","fillText","handleMouseDown","e","clientX","clientY","handleMouseMove","deltaX","deltaY","newOffsetX","newOffsetY","maxOffsetX","maxOffsetY","min","max","handleMouseUp","handleMouseLeave","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","style","listStyleType","padding","map","_robot$status4","_robot$status5","_robot$status6","key","_id","display","justifyContent","alignItems","battery","onClick","background","border","cursor","fontSize","ip","speed","stopPropagation","onChange","task","index","robotIp","taskType","startTime","endTime","colSpan","textAlign"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport './TestPage.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport throttle from 'lodash/throttle';\n\nfunction TestPage() {\n  const [mapData, setMapData] = useState(null); // SLAM 맵 데이터\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [selectedRobot, setSelectedRobot] = useState(null);\n  const [selectedTask, setSelectedTask] = useState('');\n  const [availableTasks, setAvailableTasks] = useState(['Task 1', 'Task 2', 'Task 3']);\n  const mapCanvasRef = useRef(null); // 지도 캔버스 레퍼런스\n  const robotsCanvasRef = useRef(null); // 로봇 캔버스 레퍼런스\n  const [mapResolution, setMapResolution] = useState(0.05); // 예시 해상도\n  const [dragging, setDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [lastMousePos, setLastMousePos] = useState({ x: 0, y: 0 });\n  const [expandedRobotId, setExpandedRobotId] = useState(null);\n\n  // WebSocket URL을 실제 서버 주소로 변경하세요.\n  const WEBSOCKET_URL = 'ws://your-websocket-url';\n\n  // 데이터 초기화 및 WebSocket 설정\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMapMetadata();\n      await fetchMonitoredMap();\n      fetchRobots();\n      fetchAllTasks();\n    };\n    fetchData();\n\n    const socket = new WebSocket(WEBSOCKET_URL); // 실제 WebSocket URL로 변경\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n\n    // Throttle을 사용하여 메시지 수신 빈도를 1.5초로 제한\n    const throttledOnMessage = throttle((event) => {\n      console.log('WebSocket 메시지 수신:', event.data); // 디버깅용\n      try {\n        const updatedRobots = JSON.parse(event.data);\n        setRobots(updatedRobots); // 상태 업데이트\n      } catch (err) {\n        console.error('로봇 데이터 파싱 오류:', err);\n      }\n    }, 1500); // 1500ms = 1.5초\n\n    socket.onmessage = throttledOnMessage;\n\n    socket.onerror = (error) => {\n      console.error('WebSocket 오류:', error);\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n\n    return () => {\n      socket.close();\n      throttledOnMessage.cancel(); // Throttle 취소\n    };\n  }, []);\n\n  // 지도 그리기 useEffect\n  useEffect(() => {\n    drawMap();\n  }, [mapData, dragOffset]);\n\n  // 로봇 그리기 useEffect\n  useEffect(() => {\n    drawRobots();\n  }, [robots, dragOffset]);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login';\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const metadata = response.data;\n      console.log('지도 메타데이터:', metadata); // 디버깅용\n\n      // metadata가 객체인지 문자열인지 확인\n      let resolution;\n      if (typeof metadata === 'object' && metadata.resolution) {\n        resolution = parseFloat(metadata.resolution);\n      } else if (typeof metadata === 'string') {\n        const match = metadata.match(/resolution:\\s*(\\d+(\\.\\d+)?)/);\n        if (match && match[1]) {\n          resolution = parseFloat(match[1]);\n        }\n      }\n\n      if (resolution) {\n        console.log('지도 해상도:', resolution); // 디버깅용\n        setMapResolution(resolution);\n      } else {\n        console.error('지도 해상도 정보를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'json', // SLAM 데이터 형식에 맞게 수정\n      });\n      const mapData = response.data; // SLAM에서 받은 맵 데이터 (예: 그리드 맵)\n      setMapData(mapData);\n      console.log('지도 데이터 수신:', mapData); // 디버깅용\n      drawMap(mapData);\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchAllTasks = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setTasks(response.data);\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n\n  const fetchRobots = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5559/robot/robots', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setRobots(response.data);\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n\n  const toggleExpand = (robotId) => {\n    if (expandedRobotId === robotId) {\n      setExpandedRobotId(null);\n    } else {\n      setExpandedRobotId(robotId);\n    }\n  };\n\n  const openPopup = (robot) => {\n    setSelectedRobot(robot);\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleTaskChange = (event) => {\n    setSelectedTask(event.target.value);\n  };\n\n  const formatDate = (date) => {\n    const parsedDate = new Date(date);\n    return isNaN(parsedDate) ? 'N/A' : parsedDate.toLocaleString();\n  };\n\n  // 좌표 변환 함수\n  const worldToMap = (x, y, mapWidth, mapHeight, offsetX, offsetY, resolution) => {\n    // SLAM에서 제공하는 좌표계를 웹 맵 좌표계로 변환\n    // 예: x, y는 미터 단위, resolution은 픽셀/미터\n    const mapX = (x * resolution) + mapWidth / 2 + offsetX;\n    const mapY = mapHeight / 2 - (y * resolution) + offsetY;\n    return { mapX, mapY };\n  };\n\n  // 지도 그리기 함수\n  const drawMap = (mapDataParam = mapData) => {\n    const mapCanvas = mapCanvasRef.current;\n    if (!mapCanvas) {\n      console.error('mapCanvasRef가 참조되지 않습니다.');\n      return;\n    }\n    const ctx = mapCanvas.getContext('2d');\n    ctx.clearRect(0, 0, mapCanvas.width, mapCanvas.height);\n\n    if (mapDataParam) {\n      // 예시: 그리드 맵 데이터를 사용하여 맵을 그리기\n      // mapDataParam은 2D 배열 또는 포인트 클라우드 형식이어야 합니다.\n      const gridSize = 10; // 셀 크기 (픽셀 단위)\n      for (let y = 0; y < mapDataParam.length; y++) {\n        for (let x = 0; x < mapDataParam[y].length; x++) {\n          if (mapDataParam[y][x] === 1) { // 장애물\n            ctx.fillStyle = 'black';\n            ctx.fillRect(x * gridSize, y * gridSize, gridSize, gridSize);\n          } else {\n            ctx.fillStyle = 'white';\n            ctx.fillRect(x * gridSize, y * gridSize, gridSize, gridSize);\n          }\n        }\n      }\n      console.log('동적 맵 그리기 완료'); // 디버깅용\n    } else {\n      console.warn('mapData가 존재하지 않습니다.');\n    }\n  };\n\n  // 로봇 그리기 함수\n  const drawRobots = () => {\n    const robotsCanvas = robotsCanvasRef.current;\n    if (!robotsCanvas) {\n      console.error('robotsCanvasRef가 참조되지 않습니다.');\n      return;\n    }\n    const ctx = robotsCanvas.getContext('2d');\n    ctx.clearRect(0, 0, robotsCanvas.width, robotsCanvas.height);\n\n    robots.forEach((robot) => {\n      const { x, y, heading } = robot.location; // heading은 로봇의 방향 (라디안 단위)\n      const { mapX, mapY } = worldToMap(\n        x,\n        y,\n        robotsCanvas.width,\n        robotsCanvas.height,\n        dragOffset.x,\n        dragOffset.y,\n        mapResolution\n      );\n\n      if (isNaN(mapX) || isNaN(mapY)) {\n        console.warn(`로봇 ${robot.name}의 변환된 좌표가 유효하지 않습니다: mapX=${mapX}, mapY=${mapY}`);\n        return;\n      }\n\n      // 로봇의 방향을 화살표로 표시\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(mapX, mapY);\n      ctx.lineTo(mapX + Math.cos(heading) * 15, mapY + Math.sin(heading) * 15);\n      ctx.stroke();\n\n      // 로봇의 위치를 원으로 표시\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 8, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n\n      // 로봇 이름 표시\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.fillText(robot.name, mapX + 10, mapY - 10);\n    });\n\n    console.log('로봇 그리기 완료'); // 디버깅용\n  };\n\n  // 지도 드래그 핸들링\n  const handleMouseDown = (e) => {\n    setDragging(true);\n    setLastMousePos({ x: e.clientX, y: e.clientY });\n  };\n\n  const handleMouseMove = (e) => {\n    if (dragging && mapData) {\n      const deltaX = e.clientX - lastMousePos.x;\n      const deltaY = e.clientY - lastMousePos.y;\n      let newOffsetX = dragOffset.x + deltaX;\n      let newOffsetY = dragOffset.y + deltaY;\n\n      // 지도 이동 제한 (지도 크기와 캔버스 크기에 따라 조정)\n      // 여기서는 임의의 제한을 설정했습니다. 실제 맵 크기에 맞게 수정하세요.\n      const maxOffsetX = 100;\n      const maxOffsetY = 100;\n      newOffsetX = Math.min(maxOffsetX, Math.max(-maxOffsetX, newOffsetX));\n      newOffsetY = Math.min(maxOffsetY, Math.max(-maxOffsetY, newOffsetY));\n\n      setDragOffset({ x: newOffsetX, y: newOffsetY });\n      setLastMousePos({ x: e.clientX, y: e.clientY });\n      // 지도와 로봇을 다시 그립니다.\n      drawMap();\n      drawRobots();\n    }\n  };\n\n  const handleMouseUp = () => setDragging(false);\n  const handleMouseLeave = () => setDragging(false);\n\n  return (\n    <div className=\"test-page-container\">\n      <header className=\"header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n      <div className=\"main-content\">\n        <div className=\"map-container\">\n          {mapData ? (\n            <>\n              {/* 지도 캔버스 */}\n              <canvas\n                ref={mapCanvasRef}\n                className=\"map-canvas\"\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                onMouseLeave={handleMouseLeave}\n              ></canvas>\n              {/* 로봇 캔버스 */}\n              <canvas\n                ref={robotsCanvasRef}\n                className=\"robots-canvas\"\n              ></canvas>\n            </>\n          ) : (\n            <p>지도를 불러오는 중...</p>\n          )}\n        </div>\n\n        <div className=\"robot-list-container\">\n          <h3>로봇 리스트</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {robots.length > 0 ? (\n              robots.map((robot) => (\n                <li key={robot._id} className=\"robot-list-item\">\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <span><strong>이름:</strong> {robot.name}</span>\n                    <span><strong>상태:</strong> {robot.status?.state || 'Unknown'}</span>\n                    <span><strong>배터리:</strong> {robot.status?.battery || 'N/A'}%</span>\n                    <button\n                      onClick={() => toggleExpand(robot._id)}\n                      style={{ background: 'none', border: 'none', cursor: 'pointer', fontSize: '16px' }}\n                    >\n                      {expandedRobotId === robot._id ? <i className=\"fas fa-chevron-up\"></i> : <i className=\"fas fa-chevron-down\"></i>}\n                    </button>\n                  </div>\n                  <div className={`robot-details ${expandedRobotId === robot._id ? 'expanded' : ''}`}>\n                    <p><strong>IP:</strong> {robot.ip}</p>\n                    <p><strong>위치:</strong> x: {robot.location.x}, y: {robot.location.y}</p>\n                    <p><strong>속도:</strong> {robot.status?.speed || 'N/A'} m/s</p>\n                    <p>\n                      <strong>job</strong>\n                      <button onClick={() => openPopup(robot)} style={{ background: 'none', border: '1px solid #ccc', cursor: 'pointer', fontSize: '16px' }}>+</button>\n                    </p>\n                  </div>\n                </li>\n              ))\n            ) : (\n              <p>연결된 로봇이 없습니다.</p>\n            )}\n          </ul>\n        </div>\n      </div>\n\n      {isPopupOpen && selectedRobot && (\n        <div className=\"popup-overlay\" onClick={closePopup}>\n          <div className=\"popup-container\" onClick={(e) => e.stopPropagation()}>\n            <h2>작업 선택 - {selectedRobot.name}</h2>\n            <div>\n              <label>\n                작업을 선택하세요:\n                <select value={selectedTask} onChange={handleTaskChange}>\n                  <option value=\"\">선택하세요</option>\n                  {availableTasks.map((task, index) => (\n                    <option key={index} value={task}>{task}</option>\n                  ))}\n                </select>\n              </label>\n            </div>\n            <button className=\"popup-close-button\" onClick={closePopup}>닫기</button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"task-log-container\">\n        <h3>작업 로그</h3>\n        <div className=\"task-log-table-wrapper\">\n          <table className=\"task-log-table\">\n            <thead>\n              <tr>\n                <th>작업 이름</th>\n                <th>로봇 IP</th>\n                <th>작업 유형</th>\n                <th>상태</th>\n                <th>시작 시간</th>\n                <th>종료 시간</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tasks.length > 0 ? (\n                tasks.map((task, index) => (\n                  <tr key={index}>\n                    <td>{task.name}</td>\n                    <td>{task.robotIp}</td>\n                    <td>{task.taskType}</td>\n                    <td>{task.status}</td>\n                    <td>{formatDate(task.startTime)}</td>\n                    <td>{formatDate(task.endTime)}</td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan=\"6\" style={{ textAlign: 'center', padding: '10px' }}>작업 로그가 없습니다.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}