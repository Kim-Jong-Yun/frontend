{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js\";\nimport React, { useState } from 'react';\nimport './TaskFlow.css'; // 스타일 파일 임포트\nimport CreateTaskFlow from './CreateTaskFlow';\nfunction TaskFlow({\n  onTaskFlowAdd\n}) {\n  const [taskFlows, setTaskFlows] = useState([]); // 추가된 작업 플로우 목록\n  const [isPopupOpen, setIsPopupOpen] = useState(false); // 팝업 상태 관리\n\n  // 팝업 열기/닫기 토글\n  const togglePopup = () => {\n    setIsPopupOpen(!isPopupOpen);\n  };\n\n  // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n  const handleTaskFlowAdd = (nodeName, stepName) => {\n    if (nodeName.trim() === '' || stepName.trim() === '') return; // 빈 값일 경우 추가하지 않음\n    const newFlow = {\n      node: nodeName,\n      step: stepName\n    };\n    const updatedTaskFlows = [...taskFlows, newFlow]; // 새로운 플로우 추가\n    setTaskFlows(updatedTaskFlows); // 로컬 상태 업데이트\n    onTaskFlowAdd(updatedTaskFlows); // 부모 컴포넌트(TaskPage)로 작업 플로우 전달\n    togglePopup(); // 팝업 닫기\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, taskFlows.map((flow, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-flow-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 34\n    }\n  }, \"\\uB178\\uB4DC:\"), \" \", flow.node), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 34\n    }\n  }, \"\\uB2E8\\uACC4:\"), \" \", flow.step))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePopup,\n    className: \"task-flow-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, \"+\")))), isPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CreateTaskFlow, {\n    onClose: togglePopup,\n    onTaskFlowAdd: handleTaskFlowAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }))));\n}\nexport default TaskFlow;","map":{"version":3,"names":["React","useState","CreateTaskFlow","TaskFlow","onTaskFlowAdd","taskFlows","setTaskFlows","isPopupOpen","setIsPopupOpen","togglePopup","handleTaskFlowAdd","nodeName","stepName","trim","newFlow","node","step","updatedTaskFlows","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","flow","index","key","onClick","onClose"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './TaskFlow.css'; // 스타일 파일 임포트\nimport CreateTaskFlow from './CreateTaskFlow';\n\nfunction TaskFlow({ onTaskFlowAdd }) {\n    const [taskFlows, setTaskFlows] = useState([]); // 추가된 작업 플로우 목록\n    const [isPopupOpen, setIsPopupOpen] = useState(false); // 팝업 상태 관리\n\n    // 팝업 열기/닫기 토글\n    const togglePopup = () => {\n        setIsPopupOpen(!isPopupOpen);\n    };\n\n    // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n    const handleTaskFlowAdd = (nodeName, stepName) => {\n        if (nodeName.trim() === '' || stepName.trim() === '') return; // 빈 값일 경우 추가하지 않음\n        const newFlow = { node: nodeName, step: stepName };\n        const updatedTaskFlows = [...taskFlows, newFlow]; // 새로운 플로우 추가\n        setTaskFlows(updatedTaskFlows); // 로컬 상태 업데이트\n        onTaskFlowAdd(updatedTaskFlows); // 부모 컴포넌트(TaskPage)로 작업 플로우 전달\n        togglePopup(); // 팝업 닫기\n    };\n\n    return (\n        <div className=\"task-flow-container\">\n            <div className=\"task-flow-background\">\n                <div className=\"task-flow-list\">\n                    {taskFlows.map((flow, index) => (\n                        <div key={index} className=\"task-flow-item\">\n                            <div><strong>노드:</strong> {flow.node}</div>\n                            <div><strong>단계:</strong> {flow.step}</div>\n                        </div>\n                    ))}\n                    {/* + 버튼 클릭 시 팝업 열기 */}\n                    <div className=\"task-flow-add\">\n                        <button onClick={togglePopup} className=\"task-flow-button\">+</button>\n                    </div>\n                </div>\n            </div>\n\n            {/* 팝업 창 - CreateTaskFlow */}\n            {isPopupOpen && (\n                <div className=\"popup-overlay\">\n                    <div className=\"popup-content\">\n                        <CreateTaskFlow onClose={togglePopup} onTaskFlowAdd={handleTaskFlowAdd} />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default TaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}