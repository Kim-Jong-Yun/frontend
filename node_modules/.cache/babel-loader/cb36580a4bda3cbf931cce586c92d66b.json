{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js\";\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport SimplePeer from 'simple-peer';\nfunction MapCreatePage() {\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const videoRef = useRef();\n  const peerRef = useRef(null);\n  const mapRef = useRef(null);\n  const webcamSocketRef = useRef(null);\n  const slamSocketRef = useRef(null);\n\n  // 로봇 목록을 가져오는 부분\n  useEffect(() => {\n    const fetchRobots = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRobots(response.data);\n      } catch (error) {\n        console.error('Error fetching robots:', error);\n      }\n    };\n    fetchRobots();\n  }, []);\n\n  // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const webcamSocket = io('http://172.30.1.40:7000', {\n        transports: ['websocket'],\n        withCredentials: true\n      });\n      webcamSocket.on('connect', () => {\n        console.log('Webcam socket connected');\n      });\n      webcamSocket.on('disconnect', () => {\n        console.log('Webcam socket disconnected');\n      });\n      webcamSocket.on('connect_error', error => {\n        console.error('Webcam socket connection error:', error);\n      });\n      webcamSocket.on('error', error => {\n        console.error('Webcam socket error:', error);\n      });\n      const peer = new SimplePeer({\n        initiator: true,\n        trickle: false\n      });\n      peer.on('signal', data => {\n        webcamSocket.emit('signal', data);\n      });\n      peer.on('stream', stream => {\n        console.log('Stream received:', stream);\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      });\n      peer.on('data', data => {\n        // SLAM 데이터를 수신하여 처리\n        console.log('Received SLAM data:', data);\n      });\n      webcamSocket.on('signal', signal => {\n        peer.signal(signal);\n      });\n      peerRef.current = peer;\n      webcamSocketRef.current = webcamSocket;\n      return () => {\n        if (peerRef.current) {\n          peerRef.current.destroy();\n        }\n        if (webcamSocketRef.current) {\n          webcamSocketRef.current.disconnect();\n        }\n      };\n    }\n  }, [selectedRobot]);\n\n  // ROS 연결 설정 및 SLAM 데이터 처리 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const ros = new window.ROSLIB.Ros({\n        url: 'ws://172.30.1.40:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to ROS websocket server.');\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to ROS websocket server: ', error);\n      });\n      ros.on('close', () => {\n        console.log('Connection to ROS websocket server closed.');\n      });\n      const mapTopic = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/map',\n        messageType: 'nav_msgs/OccupancyGrid'\n      });\n      mapTopic.subscribe(message => {\n        console.log('Received message on /map: ', message);\n        if (message.info && message.data) {\n          const {\n            width,\n            height\n          } = message.info;\n          const data = message.data;\n          const canvas = mapRef.current;\n          const context = canvas.getContext('2d');\n          const imageData = context.createImageData(width, height);\n          for (let i = 0; i < data.length; i++) {\n            const value = data[i];\n            const color = value === -1 ? 255 : 255 - value;\n            imageData.data[i * 4] = color;\n            imageData.data[i * 4 + 1] = color;\n            imageData.data[i * 4 + 2] = color;\n            imageData.data[i * 4 + 3] = 255;\n          }\n          context.putImageData(imageData, 0, 0);\n        } else {\n          console.error('Received invalid /map message:', message);\n        }\n      });\n      slamSocketRef.current = ros;\n      return () => {\n        ros.close();\n      };\n    }\n  }, [selectedRobot]);\n\n  // 키보드 입력으로 로봇을 제어하는 부분\n  const handleKeyDown = useCallback(e => {\n    const velocityCommands = {\n      w: {\n        linear: 0.1,\n        angular: 0\n      },\n      a: {\n        linear: 0,\n        angular: 0.1\n      },\n      s: {\n        linear: -0.1,\n        angular: 0\n      },\n      d: {\n        linear: 0,\n        angular: -0.1\n      },\n      ' ': {\n        linear: 0,\n        angular: 0\n      }\n    };\n    if (velocityCommands[e.key]) {\n      if (slamSocketRef.current) {\n        slamSocketRef.current.emit('key_press', {\n          robot_id: selectedRobot,\n          velocity: velocityCommands[e.key]\n        });\n      }\n    }\n  }, [selectedRobot]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedRobot, handleKeyDown]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"SLAM Control\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }\n  }, \"\\uB85C\\uBD07 \\uC120\\uD0DD:\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedRobot(e.target.value),\n    value: selectedRobot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, \"\\uB85C\\uBD07\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"), robots.map(robot => /*#__PURE__*/React.createElement(\"option\", {\n    key: robot._id,\n    value: robot._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, robot.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }, \"SLAM \\uD654\\uBA74\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: mapRef,\n    width: \"600\",\n    height: \"600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, \"WebCam \\uD654\\uBA74\"), /*#__PURE__*/React.createElement(\"video\", {\n    ref: videoRef,\n    autoPlay: true,\n    playsInline: true,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }))));\n}\nexport default MapCreatePage;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Navbar","LogoutButton","UserInfo","axios","io","SimplePeer","MapCreatePage","robots","setRobots","selectedRobot","setSelectedRobot","videoRef","peerRef","mapRef","webcamSocketRef","slamSocketRef","fetchRobots","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","webcamSocket","transports","withCredentials","on","log","peer","initiator","trickle","emit","stream","current","srcObject","signal","destroy","disconnect","ros","window","ROSLIB","Ros","url","mapTopic","Topic","name","messageType","subscribe","message","info","width","height","canvas","context","getContext","imageData","createImageData","i","length","value","color","putImageData","close","handleKeyDown","e","velocityCommands","w","linear","angular","a","s","d","key","robot_id","velocity","addEventListener","removeEventListener","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","target","map","robot","_id","justifyContent","ref","autoPlay","playsInline"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport SimplePeer from 'simple-peer';\n\nfunction MapCreatePage() {\n    const [robots, setRobots] = useState([]);\n    const [selectedRobot, setSelectedRobot] = useState('');\n    const videoRef = useRef();\n    const peerRef = useRef(null);\n    const mapRef = useRef(null);\n    const webcamSocketRef = useRef(null);\n    const slamSocketRef = useRef(null);\n\n    // 로봇 목록을 가져오는 부분\n    useEffect(() => {\n        const fetchRobots = async () => {\n            try {\n                const token = localStorage.getItem('token');\n                const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRobots(response.data);\n            } catch (error) {\n                console.error('Error fetching robots:', error);\n            }\n        };\n\n        fetchRobots();\n    }, []);\n\n    // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const webcamSocket = io('http://172.30.1.40:7000', {\n                transports: ['websocket'],\n                withCredentials: true\n            });\n\n            webcamSocket.on('connect', () => {\n                console.log('Webcam socket connected');\n            });\n\n            webcamSocket.on('disconnect', () => {\n                console.log('Webcam socket disconnected');\n            });\n\n            webcamSocket.on('connect_error', (error) => {\n                console.error('Webcam socket connection error:', error);\n            });\n\n            webcamSocket.on('error', (error) => {\n                console.error('Webcam socket error:', error);\n            });\n\n            const peer = new SimplePeer({ initiator: true, trickle: false });\n\n            peer.on('signal', data => {\n                webcamSocket.emit('signal', data);\n            });\n\n            peer.on('stream', stream => {\n                console.log('Stream received:', stream);\n                if (videoRef.current) {\n                    videoRef.current.srcObject = stream;\n                }\n            });\n\n            peer.on('data', data => {\n                // SLAM 데이터를 수신하여 처리\n                console.log('Received SLAM data:', data);\n            });\n\n            webcamSocket.on('signal', signal => {\n                peer.signal(signal);\n            });\n\n            peerRef.current = peer;\n            webcamSocketRef.current = webcamSocket;\n\n            return () => {\n                if (peerRef.current) {\n                    peerRef.current.destroy();\n                }\n                if (webcamSocketRef.current) {\n                    webcamSocketRef.current.disconnect();\n                }\n            };\n        }\n    }, [selectedRobot]);\n\n    // ROS 연결 설정 및 SLAM 데이터 처리 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const ros = new window.ROSLIB.Ros({\n                url: 'ws://172.30.1.40:9090'\n            });\n\n            ros.on('connection', () => {\n                console.log('Connected to ROS websocket server.');\n            });\n\n            ros.on('error', (error) => {\n                console.log('Error connecting to ROS websocket server: ', error);\n            });\n\n            ros.on('close', () => {\n                console.log('Connection to ROS websocket server closed.');\n            });\n\n            const mapTopic = new window.ROSLIB.Topic({\n                ros: ros,\n                name: '/map',\n                messageType: 'nav_msgs/OccupancyGrid'\n            });\n\n            mapTopic.subscribe((message) => {\n                console.log('Received message on /map: ', message);\n                if (message.info && message.data) {\n                    const { width, height } = message.info;\n                    const data = message.data;\n                    const canvas = mapRef.current;\n                    const context = canvas.getContext('2d');\n                    const imageData = context.createImageData(width, height);\n\n                    for (let i = 0; i < data.length; i++) {\n                        const value = data[i];\n                        const color = value === -1 ? 255 : 255 - value;\n                        imageData.data[i * 4] = color;\n                        imageData.data[i * 4 + 1] = color;\n                        imageData.data[i * 4 + 2] = color;\n                        imageData.data[i * 4 + 3] = 255;\n                    }\n\n                    context.putImageData(imageData, 0, 0);\n                } else {\n                    console.error('Received invalid /map message:', message);\n                }\n            });\n\n            slamSocketRef.current = ros;\n\n            return () => {\n                ros.close();\n            };\n        }\n    }, [selectedRobot]);\n\n    // 키보드 입력으로 로봇을 제어하는 부분\n    const handleKeyDown = useCallback((e) => {\n        const velocityCommands = {\n            w: { linear: 0.1, angular: 0 },\n            a: { linear: 0, angular: 0.1 },\n            s: { linear: -0.1, angular: 0 },\n            d: { linear: 0, angular: -0.1 },\n            ' ': { linear: 0, angular: 0 }\n        };\n        if (velocityCommands[e.key]) {\n            if (slamSocketRef.current) {\n                slamSocketRef.current.emit('key_press', { robot_id: selectedRobot, velocity: velocityCommands[e.key] });\n            }\n        }\n    }, [selectedRobot]);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [selectedRobot, handleKeyDown]);\n\n    return (\n        <div>\n            <header>\n                <UserInfo />\n                <LogoutButton />\n            </header>\n            <div style={{ display: 'flex' }}>\n                <Navbar />\n            </div>\n            <h2>SLAM Control</h2>\n            <div>\n                <label>로봇 선택:</label>\n                <select onChange={(e) => setSelectedRobot(e.target.value)} value={selectedRobot}>\n                    <option value=\"\">로봇을 선택하세요</option>\n                    {robots.map(robot => (\n                        <option key={robot._id} value={robot._id}>{robot.name}</option>\n                    ))}\n                </select>\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div style={{ width: '50%' }}>\n                    <h3>SLAM 화면</h3>\n                    <canvas ref={mapRef} width=\"600\" height=\"600\" />\n                </div>\n                <div style={{ width: '50%' }}>\n                    <h3>WebCam 화면</h3>\n                    <video ref={videoRef} autoPlay playsInline style={{ width: '100%' }} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MapCreatePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}