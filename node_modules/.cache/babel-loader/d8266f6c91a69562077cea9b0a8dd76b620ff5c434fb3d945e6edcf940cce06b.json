{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Robot/RobotPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RobotPage() {\n  _s();\n  const [name, setName] = useState('');\n  const [ip, setIp] = useState('');\n  const [model, setModel] = useState('');\n  const handleUpload = async e => {\n    e.preventDefault();\n    const formData = {\n      name: name,\n      ip: ip,\n      model: model\n    };\n    const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n\n    if (!token) {\n      alert('No token found, please log in again.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.40:5557/robot/register_robot', formData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('Robot registered successfully');\n    } catch (error) {\n      console.error('Error registering robot:', error);\n      alert('Failed to register robot');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Robot Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Robot Name\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Robot IP\",\n        value: ip,\n        onChange: e => setIp(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Robot Model\",\n        value: model,\n        onChange: e => setModel(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register Robot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(RobotPage, \"yNN3vopJopUnbKsmvRBpb5LYI1Y=\");\n_c = RobotPage;\nexport default RobotPage;\nvar _c;\n$RefreshReg$(_c, \"RobotPage\");","map":{"version":3,"names":["React","useState","Navbar","LogoutButton","UserInfo","axios","jsxDEV","_jsxDEV","RobotPage","_s","name","setName","ip","setIp","model","setModel","handleUpload","e","preventDefault","formData","token","localStorage","getItem","alert","post","headers","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Robot/RobotPage.js"],"sourcesContent":["import React, { useState } from 'react'; \nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\n\nfunction RobotPage() {\n    const [name, setName] = useState('');\n    const [ip, setIp] = useState('');\n    const [model, setModel] = useState('');\n\n    const handleUpload = async (e) => {\n        e.preventDefault();\n        const formData = {\n            name: name,\n            ip: ip,\n            model: model\n        };\n\n        const token = localStorage.getItem('token'); // 로그인 시 저장한 토큰을 가져옴\n\n        if (!token) {\n            alert('No token found, please log in again.');\n            return;\n        }\n\n        try {\n            await axios.post('http://172.30.1.40:5557/robot/register_robot', formData, {\n                headers: { \n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}` \n                }\n            });\n            alert('Robot registered successfully');\n        } catch (error) {\n            console.error('Error registering robot:', error);\n            alert('Failed to register robot');\n        }\n    };\n\n    return (\n        <div>\n          <header>\n                <UserInfo />\n                <LogoutButton />\n          </header>\n          <div style={{ display: 'flex' }}>\n                <Navbar />\n          </div>\n          <h2>Robot Register</h2>\n          <form onSubmit={handleUpload}>\n            <input\n                type=\"text\"\n                placeholder=\"Robot Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Robot IP\"\n                value={ip}\n                onChange={(e) => setIp(e.target.value)}\n                required\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Robot Model\"\n                value={model}\n                onChange={(e) => setModel(e.target.value)}\n                required\n            />\n            <button type=\"submit\">Register Robot</button>\n          </form>\n        </div>\n    );\n}\n\nexport default RobotPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}