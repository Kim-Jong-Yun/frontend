{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js\";\n// TestPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // 수정된 MapComponent 임포트\nimport RobotListComponent from './RobotListComponent';\nimport TaskLogComponent from './TaskLogComponent';\nimport './TestPage.css';\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap();\n      fetchAllTasks();\n    };\n    fetchData();\n\n    // ROSBridge에 연결\n    const ros = new ROSLIB.Ros({\n      url: 'ws://localhost:9090' // ROSBridge 서버 주소\n    });\n    ros.on('connection', () => {\n      console.log('ROSBridge에 연결되었습니다.');\n\n      // /odom 토픽 구독\n      const odomListener = new ROSLIB.Topic({\n        ros: ros,\n        name: '/odom',\n        messageType: 'nav_msgs/Odometry'\n      });\n      odomListener.subscribe(message => {\n        const position = message.pose.pose.position;\n\n        // 로봇 데이터 업데이트\n        const robotData = [{\n          _id: 'robot1',\n          name: 'Robot 1',\n          location: {\n            x: position.x,\n            y: position.y\n          },\n          status: {\n            state: 'Tasking',\n            battery: 80 // 필요에 따라 조정\n          }\n        }];\n        setRobots(robotData);\n      });\n    });\n    ros.on('error', error => {\n      console.error('ROSBridge 연결 오류:', error);\n    });\n    ros.on('close', () => {\n      console.log('ROSBridge 연결이 종료되었습니다.');\n    });\n    return () => {\n      ros.close(); // 컴포넌트 언마운트 시 연결 종료\n    };\n  }, []);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url); // 지도 URL 설정\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MapComponent, {\n    robots: robots,\n    mapUrl: mapUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RobotListComponent, {\n    robots: robots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TaskLogComponent, {\n    tasks: tasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n}\nexport default TestPage;","map":{"version":3,"names":["React","useState","useEffect","ROSLIB","Navbar","LogoutButton","UserInfo","axios","MapComponent","RobotListComponent","TaskLogComponent","TestPage","robots","setRobots","tasks","setTasks","mapUrl","setMapUrl","fetchData","fetchMonitoredMap","fetchAllTasks","ros","Ros","url","on","console","log","odomListener","Topic","name","messageType","subscribe","message","position","pose","robotData","_id","location","x","y","status","state","battery","error","close","getToken","token","localStorage","getItem","alert","window","href","response","get","headers","Authorization","responseType","URL","createObjectURL","data","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js"],"sourcesContent":["// TestPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // 수정된 MapComponent 임포트\nimport RobotListComponent from './RobotListComponent';\nimport TaskLogComponent from './TaskLogComponent';\nimport './TestPage.css';\n\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap();\n      fetchAllTasks();\n    };\n    fetchData();\n\n    // ROSBridge에 연결\n    const ros = new ROSLIB.Ros({\n      url: 'ws://localhost:9090', // ROSBridge 서버 주소\n    });\n\n    ros.on('connection', () => {\n      console.log('ROSBridge에 연결되었습니다.');\n\n      // /odom 토픽 구독\n      const odomListener = new ROSLIB.Topic({\n        ros: ros,\n        name: '/odom',\n        messageType: 'nav_msgs/Odometry',\n      });\n\n      odomListener.subscribe((message) => {\n        const position = message.pose.pose.position;\n\n        // 로봇 데이터 업데이트\n        const robotData = [\n          {\n            _id: 'robot1',\n            name: 'Robot 1',\n            location: {\n              x: position.x,\n              y: position.y,\n            },\n            status: {\n              state: 'Tasking',\n              battery: 80, // 필요에 따라 조정\n            },\n          },\n        ];\n\n        setRobots(robotData);\n      });\n    });\n\n    ros.on('error', (error) => {\n      console.error('ROSBridge 연결 오류:', error);\n    });\n\n    ros.on('close', () => {\n      console.log('ROSBridge 연결이 종료되었습니다.');\n    });\n\n    return () => {\n      ros.close(); // 컴포넌트 언마운트 시 연결 종료\n    };\n  }, []);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url); // 지도 URL 설정\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.28:8080/task/all', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n\n  return (\n    <div className=\"test-page\">\n      <header className=\"header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n      <h1></h1>\n      <div className=\"main-content\">\n        {/* MapComponent에 robots와 mapUrl 전달 */}\n        <MapComponent robots={robots} mapUrl={mapUrl} />\n        <RobotListComponent robots={robots} />\n      </div>\n      {/* 작업 로그 컴포넌트 */}\n      <TaskLogComponent tasks={tasks} />\n    </div>\n  );\n}\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}