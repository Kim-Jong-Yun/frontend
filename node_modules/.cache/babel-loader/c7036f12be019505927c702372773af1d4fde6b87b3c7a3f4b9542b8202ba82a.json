{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapCreatePage() {\n  _s();\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const videoRef = useRef();\n  const peerRef = useRef(null);\n  const mapRef = useRef(null);\n  const webcamSocketRef = useRef(null);\n  const slamSocketRef = useRef(null);\n\n  // 로봇 목록을 가져오는 부분\n  useEffect(() => {\n    const fetchRobots = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRobots(response.data);\n      } catch (error) {\n        console.error('Error fetching robots:', error);\n      }\n    };\n    fetchRobots();\n  }, []);\n\n  // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const webcamSocket = io('http://172.30.1.76:7000', {\n        transports: ['websocket'],\n        withCredentials: true\n      });\n      webcamSocket.on('connect', () => {\n        console.log('Webcam socket connected');\n      });\n      webcamSocket.on('disconnect', () => {\n        console.log('Webcam socket disconnected');\n      });\n      webcamSocket.on('connect_error', error => {\n        console.error('Webcam socket connection error:', error);\n      });\n      webcamSocket.on('error', error => {\n        console.error('Webcam socket error:', error);\n      });\n      const peer = new RTCPeerConnection();\n      peer.ontrack = event => {\n        console.log('Stream received:', event.streams[0]);\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n      peer.onicecandidate = event => {\n        if (event.candidate) {\n          console.log('Sending candidate:', event.candidate);\n          webcamSocket.emit('candidate', event.candidate);\n        }\n      };\n      peer.oniceconnectionstatechange = () => {\n        console.log('ICE Connection State Change:', peer.iceConnectionState);\n      };\n      peer.onconnectionstatechange = () => {\n        console.log('Connection State Change:', peer.connectionState);\n      };\n      peerRef.current = peer;\n\n      // 신호 데이터 전송\n      console.log('Joining with robot_id:', selectedRobot);\n      webcamSocket.emit('join', {\n        robot_id: selectedRobot\n      });\n      webcamSocket.on('signal', async data => {\n        console.log('Received signal:', data);\n        const {\n          signal\n        } = data;\n        try {\n          if (signal.type === 'offer') {\n            await peer.setRemoteDescription(new RTCSessionDescription(signal));\n            const answer = await peer.createAnswer();\n            await peer.setLocalDescription(answer);\n            webcamSocket.emit('signal', {\n              signal: peer.localDescription,\n              robot_id: selectedRobot\n            });\n          } else if (signal.type === 'answer') {\n            await peer.setRemoteDescription(new RTCSessionDescription(signal));\n          }\n        } catch (error) {\n          console.error('Error handling signal:', error);\n        }\n      });\n      webcamSocket.on('candidate', async candidate => {\n        console.log('Received candidate:', candidate);\n        try {\n          await peer.addIceCandidate(new RTCIceCandidate(candidate));\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      });\n      webcamSocketRef.current = webcamSocket;\n      return () => {\n        if (peerRef.current) {\n          peerRef.current.close();\n        }\n        if (webcamSocketRef.current) {\n          webcamSocketRef.current.disconnect();\n        }\n      };\n    }\n  }, [selectedRobot]);\n\n  // ROS 연결 설정 및 SLAM 데이터 처리 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const ros = new window.ROSLIB.Ros({\n        url: 'ws://172.30.1.40:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to ROS websocket server.');\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to ROS websocket server: ', error);\n      });\n      ros.on('close', () => {\n        console.log('Connection to ROS websocket server closed.');\n      });\n      const mapTopic = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/map',\n        messageType: 'nav_msgs/OccupancyGrid'\n      });\n      mapTopic.subscribe(message => {\n        console.log('Received message on /map: ', message);\n        if (message.info && message.data) {\n          const {\n            width,\n            height\n          } = message.info;\n          const data = message.data;\n          const canvas = mapRef.current;\n          const context = canvas.getContext('2d');\n          const imageData = context.createImageData(width, height);\n          for (let i = 0; i < data.length; i++) {\n            const value = data[i];\n            const color = value === -1 ? 255 : 255 - value;\n            imageData.data[i * 4] = color;\n            imageData.data[i * 4 + 1] = color;\n            imageData.data[i * 4 + 2] = color;\n            imageData.data[i * 4 + 3] = 255;\n          }\n          context.putImageData(imageData, 0, 0);\n        } else {\n          console.error('Received invalid /map message:', message);\n        }\n      });\n      slamSocketRef.current = ros;\n      return () => {\n        ros.close();\n      };\n    }\n  }, [selectedRobot]);\n\n  // 키보드 입력으로 로봇을 제어하는 부분\n  const handleKeyDown = useCallback(e => {\n    const velocityCommands = {\n      w: {\n        linear: 0.1,\n        angular: 0\n      },\n      a: {\n        linear: 0,\n        angular: 0.1\n      },\n      s: {\n        linear: -0.1,\n        angular: 0\n      },\n      d: {\n        linear: 0,\n        angular: -0.1\n      },\n      ' ': {\n        linear: 0,\n        angular: 0\n      }\n    };\n    if (velocityCommands[e.key]) {\n      if (slamSocketRef.current) {\n        slamSocketRef.current.emit('key_press', {\n          robot_id: selectedRobot,\n          velocity: velocityCommands[e.key]\n        });\n      }\n    }\n  }, [selectedRobot]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedRobot, handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SLAM Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uB85C\\uBD07 \\uC120\\uD0DD:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedRobot(e.target.value),\n        value: selectedRobot,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\uB85C\\uBD07\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this), robots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: robot._id,\n          children: robot.name\n        }, robot._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"SLAM \\uD654\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: mapRef,\n          width: \"600\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"WebCam \\uD654\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s(MapCreatePage, \"AlCyx1QYVTgBtY6XZXA/yUJoxfY=\");\n_c = MapCreatePage;\nexport default MapCreatePage;\nvar _c;\n$RefreshReg$(_c, \"MapCreatePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Navbar","LogoutButton","UserInfo","axios","io","jsxDEV","_jsxDEV","MapCreatePage","_s","robots","setRobots","selectedRobot","setSelectedRobot","videoRef","peerRef","mapRef","webcamSocketRef","slamSocketRef","fetchRobots","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","webcamSocket","transports","withCredentials","on","log","peer","RTCPeerConnection","ontrack","event","streams","current","srcObject","onicecandidate","candidate","emit","oniceconnectionstatechange","iceConnectionState","onconnectionstatechange","connectionState","robot_id","signal","type","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","localDescription","addIceCandidate","RTCIceCandidate","close","disconnect","ros","window","ROSLIB","Ros","url","mapTopic","Topic","name","messageType","subscribe","message","info","width","height","canvas","context","getContext","imageData","createImageData","i","length","value","color","putImageData","handleKeyDown","e","velocityCommands","w","linear","angular","a","s","d","key","velocity","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","target","map","robot","_id","justifyContent","ref","autoPlay","playsInline","_c","$RefreshReg$"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nfunction MapCreatePage() {\n    const [robots, setRobots] = useState([]);\n    const [selectedRobot, setSelectedRobot] = useState('');\n    const videoRef = useRef();\n    const peerRef = useRef(null);\n    const mapRef = useRef(null);\n    const webcamSocketRef = useRef(null);\n    const slamSocketRef = useRef(null);\n\n    // 로봇 목록을 가져오는 부분\n    useEffect(() => {\n        const fetchRobots = async () => {\n            try {\n                const token = localStorage.getItem('token');\n                const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRobots(response.data);\n            } catch (error) {\n                console.error('Error fetching robots:', error);\n            }\n        };\n\n        fetchRobots();\n    }, []);\n\n    // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const webcamSocket = io('http://172.30.1.76:7000', {\n                transports: ['websocket'],\n                withCredentials: true\n            });\n\n            webcamSocket.on('connect', () => {\n                console.log('Webcam socket connected');\n            });\n\n            webcamSocket.on('disconnect', () => {\n                console.log('Webcam socket disconnected');\n            });\n\n            webcamSocket.on('connect_error', (error) => {\n                console.error('Webcam socket connection error:', error);\n            });\n\n            webcamSocket.on('error', (error) => {\n                console.error('Webcam socket error:', error);\n            });\n\n            const peer = new RTCPeerConnection();\n\n            peer.ontrack = (event) => {\n                console.log('Stream received:', event.streams[0]);\n                if (videoRef.current) {\n                    videoRef.current.srcObject = event.streams[0];\n                }\n            };\n\n            peer.onicecandidate = (event) => {\n                if (event.candidate) {\n                    console.log('Sending candidate:', event.candidate);\n                    webcamSocket.emit('candidate', event.candidate);\n                }\n            };\n\n            peer.oniceconnectionstatechange = () => {\n                console.log('ICE Connection State Change:', peer.iceConnectionState);\n            };\n\n            peer.onconnectionstatechange = () => {\n                console.log('Connection State Change:', peer.connectionState);\n            };\n\n            peerRef.current = peer;\n\n            // 신호 데이터 전송\n            console.log('Joining with robot_id:', selectedRobot);\n            webcamSocket.emit('join', { robot_id: selectedRobot });\n\n            webcamSocket.on('signal', async (data) => {\n                console.log('Received signal:', data);\n                const { signal } = data;\n                try {\n                    if (signal.type === 'offer') {\n                        await peer.setRemoteDescription(new RTCSessionDescription(signal));\n                        const answer = await peer.createAnswer();\n                        await peer.setLocalDescription(answer);\n                        webcamSocket.emit('signal', { signal: peer.localDescription, robot_id: selectedRobot });\n                    } else if (signal.type === 'answer') {\n                        await peer.setRemoteDescription(new RTCSessionDescription(signal));\n                    }\n                } catch (error) {\n                    console.error('Error handling signal:', error);\n                }\n            });\n\n            webcamSocket.on('candidate', async (candidate) => {\n                console.log('Received candidate:', candidate);\n                try {\n                    await peer.addIceCandidate(new RTCIceCandidate(candidate));\n                } catch (error) {\n                    console.error('Error adding ICE candidate:', error);\n                }\n            });\n\n            webcamSocketRef.current = webcamSocket;\n\n            return () => {\n                if (peerRef.current) {\n                    peerRef.current.close();\n                }\n                if (webcamSocketRef.current) {\n                    webcamSocketRef.current.disconnect();\n                }\n            };\n        }\n    }, [selectedRobot]);\n\n    // ROS 연결 설정 및 SLAM 데이터 처리 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const ros = new window.ROSLIB.Ros({\n                url: 'ws://172.30.1.40:9090'\n            });\n\n            ros.on('connection', () => {\n                console.log('Connected to ROS websocket server.');\n            });\n\n            ros.on('error', (error) => {\n                console.log('Error connecting to ROS websocket server: ', error);\n            });\n\n            ros.on('close', () => {\n                console.log('Connection to ROS websocket server closed.');\n            });\n\n            const mapTopic = new window.ROSLIB.Topic({\n                ros: ros,\n                name: '/map',\n                messageType: 'nav_msgs/OccupancyGrid'\n            });\n\n            mapTopic.subscribe((message) => {\n                console.log('Received message on /map: ', message);\n                if (message.info && message.data) {\n                    const { width, height } = message.info;\n                    const data = message.data;\n                    const canvas = mapRef.current;\n                    const context = canvas.getContext('2d');\n                    const imageData = context.createImageData(width, height);\n\n                    for (let i = 0; i < data.length; i++) {\n                        const value = data[i];\n                        const color = value === -1 ? 255 : 255 - value;\n                        imageData.data[i * 4] = color;\n                        imageData.data[i * 4 + 1] = color;\n                        imageData.data[i * 4 + 2] = color;\n                        imageData.data[i * 4 + 3] = 255;\n                    }\n\n                    context.putImageData(imageData, 0, 0);\n                } else {\n                    console.error('Received invalid /map message:', message);\n                }\n            });\n\n            slamSocketRef.current = ros;\n\n            return () => {\n                ros.close();\n            };\n        }\n    }, [selectedRobot]);\n\n    // 키보드 입력으로 로봇을 제어하는 부분\n    const handleKeyDown = useCallback((e) => {\n        const velocityCommands = {\n            w: { linear: 0.1, angular: 0 },\n            a: { linear: 0, angular: 0.1 },\n            s: { linear: -0.1, angular: 0 },\n            d: { linear: 0, angular: -0.1 },\n            ' ': { linear: 0, angular: 0 }\n        };\n        if (velocityCommands[e.key]) {\n            if (slamSocketRef.current) {\n                slamSocketRef.current.emit('key_press', { robot_id: selectedRobot, velocity: velocityCommands[e.key] });\n            }\n        }\n    }, [selectedRobot]);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [selectedRobot, handleKeyDown]);\n\n    return (\n        <div>\n            <header>\n                <UserInfo />\n                <LogoutButton />\n            </header>\n            <div style={{ display: 'flex' }}>\n                <Navbar />\n            </div>\n            <h2>SLAM Control</h2>\n            <div>\n                <label>로봇 선택:</label>\n                <select onChange={(e) => setSelectedRobot(e.target.value)} value={selectedRobot}>\n                    <option value=\"\">로봇을 선택하세요</option>\n                    {robots.map(robot => (\n                        <option key={robot._id} value={robot._id}>{robot.name}</option>\n                    ))}\n                </select>\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div style={{ width: '50%' }}>\n                    <h3>SLAM 화면</h3>\n                    <canvas ref={mapRef} width=\"600\" height=\"600\" />\n                </div>\n                <div style={{ width: '50%' }}>\n                    <h3>WebCam 화면</h3>\n                    <video ref={videoRef} autoPlay playsInline style={{ width: '100%' }} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MapCreatePage;\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}