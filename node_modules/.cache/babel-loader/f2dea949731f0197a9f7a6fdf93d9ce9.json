{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // MapComponent 임포트\nimport RobotListComponent from './RobotListComponent'; // RobotListComponent 임포트\nimport TaskLogComponent from './TaskLogComponent'; // TaskLogComponent 임포트\nimport './TestPage.css';\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null); // 지도 URL 상태\n  const [nodes, setNodes] = useState([]); // 노드 상태\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap(); // 지도 불러오기\n      fetchAllTasks(); // 모든 작업 로그 API 호출\n      fetchNodes(); // 노드 데이터 불러오기\n    };\n    fetchData();\n\n    // 2초마다 로봇 데이터를 가져오는 타이머 설정\n    const intervalId = setInterval(() => {\n      fetchRobots(); // 로봇 리스트 API 호출\n    }, 2000);\n\n    // 컴포넌트가 언마운트될 때 타이머 정리\n    return () => clearInterval(intervalId);\n  }, []);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.15:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const monitoredMap = response.data;\n      if (monitoredMap && monitoredMap._id) {\n        console.log('Monitored Map ID:', monitoredMap._id); // mapId가 제대로 받아지는지 확인\n        setMapUrl(monitoredMap.fileUrl); // 지도 URL 설정\n        await fetchNodes(monitoredMap._id); // mapId를 기반으로 노드 불러오기\n      } else {\n        console.error('Monitored map not found or has no ID.');\n      }\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchRobots = async () => {\n    console.log('로봇 정보 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchRobots 종료');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.15:5559/robot/robots', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setRobots(response.data); // 로봇 데이터를 상태에 저장\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.15:8080/task/all', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n  const fetchNodes = async mapId => {\n    if (!mapId) {\n      console.error('Invalid mapId:', mapId); // mapId가 undefined인지 확인\n      return;\n    }\n    const token = getToken();\n    if (!token) return;\n    try {\n      console.log(`Fetching nodes for mapId: ${mapId}`); // mapId가 제대로 전달되었는지 확인\n      const response = await axios.get(`http://172.30.1.15:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data && response.data.length > 0) {\n        console.log('Fetched nodes:', response.data); // 노드 데이터 로그 확인\n        setNodes(response.data); // 해당 맵의 노드 데이터를 상태에 저장\n      } else {\n        console.log('No nodes found for the map'); // 노드가 비어 있을 경우\n      }\n    } catch (error) {\n      console.error('노드 정보 가져오기 오류:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"test-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MapComponent, {\n    robots: robots,\n    mapUrl: mapUrl,\n    nodes: nodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RobotListComponent, {\n    robots: robots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(TaskLogComponent, {\n    tasks: tasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }));\n}\nexport default TestPage;","map":{"version":3,"names":["React","useState","useEffect","Navbar","LogoutButton","UserInfo","axios","MapComponent","RobotListComponent","TaskLogComponent","TestPage","robots","setRobots","tasks","setTasks","mapUrl","setMapUrl","nodes","setNodes","fetchData","fetchMonitoredMap","fetchAllTasks","fetchNodes","intervalId","setInterval","fetchRobots","clearInterval","getToken","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","monitoredMap","data","_id","console","log","fileUrl","error","mapId","length","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/TestPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\n\nimport axios from 'axios';\nimport MapComponent from './MapComponent'; // MapComponent 임포트\nimport RobotListComponent from './RobotListComponent'; // RobotListComponent 임포트\nimport TaskLogComponent from './TaskLogComponent'; // TaskLogComponent 임포트\nimport './TestPage.css';\n\nfunction TestPage() {\n  const [robots, setRobots] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [mapUrl, setMapUrl] = useState(null); // 지도 URL 상태\n  const [nodes, setNodes] = useState([]); // 노드 상태\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMonitoredMap(); // 지도 불러오기\n      fetchAllTasks(); // 모든 작업 로그 API 호출\n      fetchNodes(); // 노드 데이터 불러오기\n    };\n    fetchData();\n\n    // 2초마다 로봇 데이터를 가져오는 타이머 설정\n    const intervalId = setInterval(() => {\n      fetchRobots(); // 로봇 리스트 API 호출\n    }, 2000);\n\n    // 컴포넌트가 언마운트될 때 타이머 정리\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.15:5557/map/monitored', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      const monitoredMap = response.data;\n      if (monitoredMap && monitoredMap._id) {\n        console.log('Monitored Map ID:', monitoredMap._id); // mapId가 제대로 받아지는지 확인\n        setMapUrl(monitoredMap.fileUrl); // 지도 URL 설정\n        await fetchNodes(monitoredMap._id); // mapId를 기반으로 노드 불러오기\n      } else {\n        console.error('Monitored map not found or has no ID.');\n      }\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchRobots = async () => {\n    console.log('로봇 정보 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchRobots 종료');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.15:5559/robot/robots', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setRobots(response.data); // 로봇 데이터를 상태에 저장\n    } catch (error) {\n      console.error('로봇 정보 가져오기 오류:', error);\n    }\n  };\n\n  const fetchAllTasks = async () => {\n    console.log('모든 작업 로그 가져오는 중');\n    const token = getToken();\n    if (!token) {\n      console.log('토큰이 없어 fetchAllTasks 종료');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.15:8080/task/all', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setTasks(response.data); // 작업 로그를 상태로 설정\n    } catch (error) {\n      console.error('작업 로그 가져오기 오류:', error);\n    }\n  };\n\n  const fetchNodes = async (mapId) => {\n    if (!mapId) {\n      console.error('Invalid mapId:', mapId); // mapId가 undefined인지 확인\n      return;\n    }\n\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      console.log(`Fetching nodes for mapId: ${mapId}`); // mapId가 제대로 전달되었는지 확인\n      const response = await axios.get(`http://172.30.1.15:5557/map/nodes/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.data && response.data.length > 0) {\n        console.log('Fetched nodes:', response.data); // 노드 데이터 로그 확인\n        setNodes(response.data); // 해당 맵의 노드 데이터를 상태에 저장\n      } else {\n        console.log('No nodes found for the map'); // 노드가 비어 있을 경우\n      }\n    } catch (error) {\n      console.error('노드 정보 가져오기 오류:', error);\n    }\n  };\n\n  return (\n    <div className=\"test-page\">\n      <header className=\"header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n      <h1></h1>\n      <div className=\"main-content\">\n        {/* MapComponent에 robots, mapUrl, nodes 전달 */}\n        <MapComponent robots={robots} mapUrl={mapUrl} nodes={nodes} />\n        <RobotListComponent robots={robots} /> {/* 로봇 리스트 컴포넌트 */}\n      </div>\n      {/* 작업 로그 컴포넌트 */}\n      <TaskLogComponent tasks={tasks} />\n    </div>\n  );\n}\n\nexport default TestPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}