{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef } from 'react';\nfunction MapComponent({\n  robots,\n  mapUrl\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const mapResolution = 0.05; // 기본 해상도 값 (필요에 따라 수정 가능)\n\n  // 좌표 변환 함수: 월드 좌표를 맵 좌표로 변환\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    if (!mapImage) {\n      console.error('지도 이미지가 로드되지 않았습니다.');\n      return {\n        mapX: 0,\n        mapY: 0\n      };\n    }\n\n    // 지도 이미지 크기\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    // 지도 원점 (중앙 기준)\n    const originX = mapWidth / 2;\n    const originY = mapHeight / 2;\n\n    // 월드 좌표를 픽셀 단위로 변환\n    const mapX = originX + x / mapResolution;\n    const mapY = originY - y / mapResolution; // Y축 방향은 반전\n\n    console.log(`월드 좌표: (x: ${x}, y: ${y}) => 지도 좌표: (x: ${mapX}, y: ${mapY})`);\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 로봇과 지도를 그리는 함수\n  const drawMapAndRobots = () => {\n    const canvas = canvasRef.current;\n    const mapImage = mapImageRef.current;\n    if (!canvas || !mapImage) {\n      console.error('캔버스 또는 지도 이미지를 찾을 수 없습니다.');\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n    const canvasWidth = mapImage.width;\n    const canvasHeight = mapImage.height;\n\n    // 캔버스 크기 설정\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImage, 0, 0, canvasWidth, canvasHeight);\n\n    // 로봇 그리기\n    robots.forEach(robot => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n\n      // 로봇의 상태에 따른 색상 설정\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 그리기\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI); // 로봇을 원으로 표시\n      ctx.fill();\n    });\n  };\n\n  // 지도와 로봇을 그리는 useEffect\n  useEffect(() => {\n    if (mapUrl && robots.length > 0) {\n      const mapImage = new Image();\n      mapImage.src = mapUrl;\n      mapImageRef.current = mapImage;\n      mapImage.onload = () => {\n        drawMapAndRobots(); // 이미지 로드 후 지도와 로봇 그리기\n      };\n      mapImage.onerror = err => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    }\n  }, [mapUrl, robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","MapComponent","robots","mapUrl","canvasRef","mapImageRef","mapResolution","worldToMap","x","y","mapImage","current","console","error","mapX","mapY","mapWidth","width","mapHeight","height","originX","originY","log","drawMapAndRobots","canvas","ctx","getContext","canvasWidth","canvasHeight","drawImage","forEach","robot","_robot$status","_robot$status2","_robot$status3","location","robotColor","status","state","fillStyle","beginPath","arc","Math","PI","fill","length","Image","src","onload","onerror","err","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nfunction MapComponent({ robots, mapUrl }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const mapResolution = 0.05; // 기본 해상도 값 (필요에 따라 수정 가능)\n\n  // 좌표 변환 함수: 월드 좌표를 맵 좌표로 변환\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    if (!mapImage) {\n      console.error('지도 이미지가 로드되지 않았습니다.');\n      return { mapX: 0, mapY: 0 };\n    }\n\n    // 지도 이미지 크기\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    // 지도 원점 (중앙 기준)\n    const originX = mapWidth / 2;\n    const originY = mapHeight / 2;\n\n    // 월드 좌표를 픽셀 단위로 변환\n    const mapX = originX + (x / mapResolution);\n    const mapY = originY - (y / mapResolution); // Y축 방향은 반전\n\n    console.log(`월드 좌표: (x: ${x}, y: ${y}) => 지도 좌표: (x: ${mapX}, y: ${mapY})`);\n    return { mapX, mapY };\n  };\n\n  // 로봇과 지도를 그리는 함수\n  const drawMapAndRobots = () => {\n    const canvas = canvasRef.current;\n    const mapImage = mapImageRef.current;\n\n    if (!canvas || !mapImage) {\n      console.error('캔버스 또는 지도 이미지를 찾을 수 없습니다.');\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    const canvasWidth = mapImage.width;\n    const canvasHeight = mapImage.height;\n\n    // 캔버스 크기 설정\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    // 지도 이미지 그리기\n    ctx.drawImage(mapImage, 0, 0, canvasWidth, canvasHeight);\n\n    // 로봇 그리기\n    robots.forEach((robot) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      // 로봇의 상태에 따른 색상 설정\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 그리기\n      ctx.fillStyle = robotColor;\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI); // 로봇을 원으로 표시\n      ctx.fill();\n    });\n  };\n\n  // 지도와 로봇을 그리는 useEffect\n  useEffect(() => {\n    if (mapUrl && robots.length > 0) {\n      const mapImage = new Image();\n      mapImage.src = mapUrl;\n      mapImageRef.current = mapImage;\n\n      mapImage.onload = () => {\n        drawMapAndRobots(); // 이미지 로드 후 지도와 로봇 그리기\n      };\n\n      mapImage.onerror = (err) => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    }\n  }, [mapUrl, robots]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}