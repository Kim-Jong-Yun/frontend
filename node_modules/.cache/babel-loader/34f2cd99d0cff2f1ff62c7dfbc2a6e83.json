{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\nconst mapResolution = 0.05;\nconst mapOrigin = [-10.0, -10.0];\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n  const mapX = (worldX - mapOrigin[0]) / mapResolution;\n  const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution;\n  return {\n    x: mapX,\n    y: mapY\n  };\n};\nfunction CreateTaskFlow({\n  onClose,\n  onTaskFlowAdd\n}) {\n  const [selectedNode, setSelectedNode] = useState('');\n  const [selectedStep, setSelectedStep] = useState('');\n  const [nodes, setNodes] = useState([]);\n  const [steps, setSteps] = useState([]);\n  const [allSteps, setAllSteps] = useState([]);\n  const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 상태 추가\n  const [mapImage, setMapImage] = useState(null);\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n  const [monitoredMap, setMonitoredMap] = useState(null);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 모니터링 중인 맵과 금지 구역, 노드를 불러오는 함수\n  const fetchMonitoredMap = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.33:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMonitoredMap(response.data);\n      fetchNodes(response.data._id);\n      loadMapImage(response.data._id);\n      fetchNoGoZones(response.data._id); // 금지 구역 데이터도 함께 로드\n    } catch (error) {\n      console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n      alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 금지 구역 데이터를 서버에서 불러오는 함수\n  const fetchNoGoZones = async mapId => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지 구역 정보를 가져오는 중 오류 발생:', error);\n      alert('금지 구역 정보를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 전체 단계 리스트를 가져오는 함수\n  const fetchAllSteps = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.33:5557/map/steps', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setAllSteps(response.data);\n    } catch (error) {\n      console.error('단계 정보를 가져오는 중 오류 발생:', error);\n      alert('단계 정보를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 노드 리스트를 불러오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵 이미지를 로드하고 그리기\n  const loadMapImage = async mapId => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`http://172.30.1.33:5557/map/file/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl);\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 선택된 노드가 변경될 때 해당 노드의 작업 단계를 업데이트\n  useEffect(() => {\n    if (selectedNode) {\n      const node = nodes.find(n => n.name === selectedNode);\n      if (node) {\n        const nodeTasks = node.tasks || [];\n        const stepsWithNames = nodeTasks.map(taskId => {\n          const step = allSteps.find(s => s._id === taskId);\n          return step ? step.name : '';\n        });\n        setSteps(stepsWithNames);\n      }\n    } else {\n      setSteps([]);\n    }\n  }, [selectedNode, nodes, allSteps]);\n\n  // 맵 이미지를 캔버스에 로드하고 그리기\n  const loadCanvasWithImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawMapElements();\n    };\n  };\n\n  // 맵 요소(노드, 연결선, 금지 구역 등)를 그리는 함수\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n    drawConnections();\n    drawNodes();\n    drawNoGoZones(); // 금지 구역을 그리는 함수 호출\n  };\n\n  // 연결선을 그리는 함수\n  const drawConnections = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const {\n            x: startX,\n            y: startY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.moveTo(startX, startY);\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(waypoint => {\n              const {\n                x,\n                y\n              } = worldToMap(waypoint.x, waypoint.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(x, y);\n            });\n          }\n          const {\n            x: endX,\n            y: endY\n          } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n  };\n\n  // 노드를 그리는 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 금지 구역을 그리는 함수\n  const drawNoGoZones = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    noGoZones.forEach(zone => {\n      const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y, imageNaturalWidth, imageNaturalHeight);\n      const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y, imageNaturalWidth, imageNaturalHeight);\n      const width = bottomRight.x - topLeft.x;\n      const height = bottomRight.y - topLeft.y;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.x, topLeft.y, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n    });\n  };\n\n  // 마우스 이동 시 노드 호버 상태 업데이트\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    const mouseX = (event.clientX - rect.left) * scaleX;\n    const mouseY = (event.clientY - rect.top) * scaleY;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n    setTooltipPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n  };\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    fetchMonitoredMap();\n    fetchAllSteps();\n  }, []);\n\n  // 맵 이미지가 변경되거나 호버 상태가 변경될 때 캔버스 다시 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadCanvasWithImage();\n    }\n  }, [mapImage, noGoZones, nodes, hoveredNode]); // noGoZones와 nodes를 의존성에 추가\n\n  const handleSubmit = () => {\n    onTaskFlowAdd(selectedNode, selectedStep);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-preview\",\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uD50C\\uB85C\\uC6B0 \\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedNode,\n    onChange: e => setSelectedNode(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, \"\\uB178\\uB4DC \\uC120\\uD0DD\"), nodes.map(node => /*#__PURE__*/React.createElement(\"option\", {\n    key: node._id,\n    value: node.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, node.name))), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedStep,\n    onChange: e => setSelectedStep(e.target.value),\n    style: {\n      marginBottom: '10px',\n      padding: '8px',\n      borderRadius: '5px',\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, \"\\uB2E8\\uACC4 \\uC120\\uD0DD\"), steps.map((step, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: step,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }\n  }, step))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }, \"\\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 21\n    }\n  }, \"\\uCDE8\\uC18C\"))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  }, hoveredNode.name));\n}\nexport default CreateTaskFlow;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","mapResolution","mapOrigin","worldToMap","worldX","worldY","imageNaturalWidth","imageNaturalHeight","mapX","mapY","x","y","CreateTaskFlow","onClose","onTaskFlowAdd","selectedNode","setSelectedNode","selectedStep","setSelectedStep","nodes","setNodes","steps","setSteps","allSteps","setAllSteps","noGoZones","setNoGoZones","mapImage","setMapImage","canvasRef","mapImageRef","setImageNaturalWidth","setImageNaturalHeight","monitoredMap","setMonitoredMap","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","fetchMonitoredMap","token","localStorage","getItem","response","get","headers","Authorization","data","fetchNodes","_id","loadMapImage","fetchNoGoZones","error","console","alert","mapId","fetchAllSteps","canvas","current","responseType","imageUrl","URL","createObjectURL","node","find","n","name","nodeTasks","tasks","stepsWithNames","map","taskId","step","s","loadCanvasWithImage","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawMapElements","drawConnections","drawNodes","drawNoGoZones","forEach","connections","connection","connectedNode","strokeStyle","lineWidth","beginPath","startX","startY","moveTo","waypoints","length","waypoint","lineTo","endX","endY","stroke","size","fillStyle","fillRect","zone","topLeft","bottomRight","strokeRect","handleMouseMove","event","rect","getBoundingClientRect","scaleX","scaleY","mouseX","clientX","left","mouseY","clientY","top","foundNode","handleSubmit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","ref","style","border","value","onChange","e","target","marginBottom","padding","borderRadius","key","index","onClick","position","backgroundColor","color","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\n\nconst mapResolution = 0.05;\nconst mapOrigin = [-10.0, -10.0];\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution;\n    return { x: mapX, y: mapY };\n};\n\nfunction CreateTaskFlow({ onClose, onTaskFlowAdd }) {\n    const [selectedNode, setSelectedNode] = useState('');\n    const [selectedStep, setSelectedStep] = useState('');\n    const [nodes, setNodes] = useState([]);\n    const [steps, setSteps] = useState([]);\n    const [allSteps, setAllSteps] = useState([]);\n    const [noGoZones, setNoGoZones] = useState([]); // 금지 구역 상태 추가\n    const [mapImage, setMapImage] = useState(null);\n    const canvasRef = useRef(null);\n    const mapImageRef = useRef(null);\n    const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n    const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n    const [monitoredMap, setMonitoredMap] = useState(null);\n    const [hoveredNode, setHoveredNode] = useState(null);\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n    // 모니터링 중인 맵과 금지 구역, 노드를 불러오는 함수\n    const fetchMonitoredMap = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.33:5557/map/monitored', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setMonitoredMap(response.data);\n            fetchNodes(response.data._id);\n            loadMapImage(response.data._id);\n            fetchNoGoZones(response.data._id); // 금지 구역 데이터도 함께 로드\n        } catch (error) {\n            console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n            alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 금지 구역 데이터를 서버에서 불러오는 함수\n    const fetchNoGoZones = async (mapId) => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get(`http://172.30.1.33:5557/map/no-go-zones/map/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setNoGoZones(response.data);\n        } catch (error) {\n            console.error('금지 구역 정보를 가져오는 중 오류 발생:', error);\n            alert('금지 구역 정보를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 전체 단계 리스트를 가져오는 함수\n    const fetchAllSteps = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.33:5557/map/steps', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setAllSteps(response.data);\n        } catch (error) {\n            console.error('단계 정보를 가져오는 중 오류 발생:', error);\n            alert('단계 정보를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 노드 리스트를 불러오는 함수\n    const fetchNodes = async (mapId) => {\n        try {\n            const response = await axios.get(`http://172.30.1.33:5557/map/nodes/${mapId}`, {\n                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n            });\n            setNodes(response.data);\n        } catch (error) {\n            console.error('노드를 가져오는 중 오류 발생:', error);\n            alert('노드를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 맵 이미지를 로드하고 그리기\n    const loadMapImage = async (mapId) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get(`http://172.30.1.33:5557/map/file/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n                responseType: 'blob',\n            });\n            const imageUrl = URL.createObjectURL(response.data);\n            setMapImage(imageUrl);\n        } catch (error) {\n            console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n            alert('맵 이미지를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 선택된 노드가 변경될 때 해당 노드의 작업 단계를 업데이트\n    useEffect(() => {\n        if (selectedNode) {\n            const node = nodes.find((n) => n.name === selectedNode);\n            if (node) {\n                const nodeTasks = node.tasks || [];\n                const stepsWithNames = nodeTasks.map(taskId => {\n                    const step = allSteps.find(s => s._id === taskId);\n                    return step ? step.name : '';\n                });\n                setSteps(stepsWithNames);\n            }\n        } else {\n            setSteps([]);\n        }\n    }, [selectedNode, nodes, allSteps]);\n\n    // 맵 이미지를 캔버스에 로드하고 그리기\n    const loadCanvasWithImage = () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        mapImageRef.current = new Image();\n        mapImageRef.current.src = mapImage;\n\n        mapImageRef.current.onload = () => {\n            const imgWidth = mapImageRef.current.width;\n            const imgHeight = mapImageRef.current.height;\n            setImageNaturalWidth(imgWidth);\n            setImageNaturalHeight(imgHeight);\n\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n            drawMapElements();\n        };\n    };\n\n    // 맵 요소(노드, 연결선, 금지 구역 등)를 그리는 함수\n    const drawMapElements = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n        drawConnections();\n        drawNodes();\n        drawNoGoZones(); // 금지 구역을 그리는 함수 호출\n    };\n\n    // 연결선을 그리는 함수\n    const drawConnections = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        nodes.forEach((node) => {\n            node.connections.forEach((connection) => {\n                const connectedNode = nodes.find(n => n._id === connection.node);\n                if (connectedNode) {\n                    ctx.strokeStyle = 'blue';\n                    ctx.lineWidth = 2;\n                    ctx.beginPath();\n\n                    const { x: startX, y: startY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n                    ctx.moveTo(startX, startY);\n\n                    if (connection.waypoints && connection.waypoints.length > 0) {\n                        connection.waypoints.forEach((waypoint) => {\n                            const { x, y } = worldToMap(waypoint.x, waypoint.y, imageNaturalWidth, imageNaturalHeight);\n                            ctx.lineTo(x, y);\n                        });\n                    }\n\n                    const { x: endX, y: endY } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n                    ctx.lineTo(endX, endY);\n                    ctx.stroke();\n                }\n            });\n        });\n    };\n\n    // 노드를 그리는 함수\n    const drawNodes = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            ctx.fillStyle = 'red';\n            ctx.fillRect(x - size / 2, y - size / 2, size, size);\n        });\n    };\n\n    // 금지 구역을 그리는 함수\n    const drawNoGoZones = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        noGoZones.forEach((zone) => {\n            const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y, imageNaturalWidth, imageNaturalHeight);\n            const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y, imageNaturalWidth, imageNaturalHeight);\n            const width = bottomRight.x - topLeft.x;\n            const height = bottomRight.y - topLeft.y;\n\n            ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n            ctx.fillRect(topLeft.x, topLeft.y, width, height);\n            ctx.strokeStyle = 'red';\n            ctx.lineWidth = 2;\n            ctx.strokeRect(topLeft.x, topLeft.y, width, height);\n        });\n    };\n\n    // 마우스 이동 시 노드 호버 상태 업데이트\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n        const mouseX = (event.clientX - rect.left) * scaleX;\n        const mouseY = (event.clientY - rect.top) * scaleY;\n\n        let foundNode = null;\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            const size = 10;\n\n            if (mouseX >= x - size / 2 && mouseX <= x + size / 2 && mouseY >= y - size / 2 && mouseY <= y + size / 2) {\n                foundNode = node;\n            }\n        });\n\n        setHoveredNode(foundNode);\n        setTooltipPosition({ x: event.clientX, y: event.clientY });\n    };\n\n    // 초기 데이터 로드\n    useEffect(() => {\n        fetchMonitoredMap();\n        fetchAllSteps();\n    }, []);\n\n    // 맵 이미지가 변경되거나 호버 상태가 변경될 때 캔버스 다시 그리기\n    useEffect(() => {\n        if (mapImage) {\n            loadCanvasWithImage();\n        }\n    }, [mapImage, noGoZones, nodes, hoveredNode]); // noGoZones와 nodes를 의존성에 추가\n\n    const handleSubmit = () => {\n        onTaskFlowAdd(selectedNode, selectedStep);\n    };\n\n    return (\n        <div className=\"create-task-flow-container\">\n            <div className=\"map-preview\" onMouseMove={handleMouseMove}>\n                <canvas ref={canvasRef} style={{ border: '1px solid #ccc', width: '100%', height: '100%' }}></canvas>\n            </div>\n\n            <div className=\"task-flow-form\">\n                <h3>작업 플로우 추가</h3>\n                <select\n                    value={selectedNode}\n                    onChange={(e) => setSelectedNode(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">노드 선택</option>\n                    {nodes.map((node) => (\n                        <option key={node._id} value={node.name}>\n                            {node.name}\n                        </option>\n                    ))}\n                </select>\n                <select\n                    value={selectedStep}\n                    onChange={(e) => setSelectedStep(e.target.value)}\n                    style={{ marginBottom: '10px', padding: '8px', borderRadius: '5px', border: '1px solid #ccc' }}\n                >\n                    <option value=\"\">단계 선택</option>\n                    {steps.map((step, index) => (\n                        <option key={index} value={step}>\n                            {step}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"buttons\">\n                    <button onClick={handleSubmit}>추가</button>\n                    <button onClick={onClose}>취소</button>\n                </div>\n            </div>\n\n            {hoveredNode && (\n                <div\n                    className=\"tooltip\"\n                    style={{\n                        position: 'fixed',\n                        top: `${tooltipPosition.y + 10}px`,\n                        left: `${tooltipPosition.x + 10}px`,\n                        backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                        color: 'white',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        pointerEvents: 'none',\n                        zIndex: 1000,\n                        fontSize: '12px',\n                    }}\n                >\n                    {hoveredNode.name}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default CreateTaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}