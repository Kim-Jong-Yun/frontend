{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Monitor/MonitoringPage.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nconst MonitoringPage = () => {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [robots, setRobots] = useState([]);\n  const [newRobotId, setNewRobotId] = useState(''); // 새로 추가할 로봇 ID\n  const [newRobotX, setNewRobotX] = useState(0); // 새 로봇의 초기 x 좌표\n  const [newRobotY, setNewRobotY] = useState(0); // 새 로봇의 초기 y 좌표\n  const [ws, setWs] = useState(null); // WebSocket 연결 상태 저장\n  const canvasRef = useRef(null);\n  const [mapResolution, setMapResolution] = useState(0.05);\n  const [mapDimensions, setMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n\n  // 지도와 메타데이터 가져오기 및 WebSocket 연결\n  useEffect(() => {\n    fetchMonitoredMap();\n    fetchMapMetadata();\n    const socket = new WebSocket('ws://172.30.1.28:5050'); // WebSocket 서버 주소\n    setWs(socket);\n    socket.onmessage = event => {\n      const robotData = JSON.parse(event.data);\n      setRobots(prevRobots => {\n        const existingRobotIndex = prevRobots.findIndex(r => r.id === robotData.id);\n        if (existingRobotIndex !== -1) {\n          const updatedRobots = [...prevRobots];\n          updatedRobots[existingRobotIndex] = {\n            ...updatedRobots[existingRobotIndex],\n            x: robotData.x,\n            y: robotData.y\n          };\n          return updatedRobots;\n        } else {\n          return [...prevRobots, robotData];\n        }\n      });\n    };\n    socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket closed');\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  // 지도 파일 가져오기\n  const fetchMonitoredMap = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({\n          width: img.width,\n          height: img.height\n        });\n      };\n    } catch (error) {\n      console.error('Error fetching monitored map:', error);\n    }\n  };\n\n  // 지도 메타데이터 가져오기\n  const fetchMapMetadata = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('Error fetching map metadata:', error);\n    }\n  };\n\n  // 월드 좌표계를 지도 좌표계로 변환\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + mapWidth * resolution / 2) / resolution;\n    const mapY = mapHeight - (y + mapHeight * resolution / 2) / resolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 로봇 추가\n  const addRobot = () => {\n    if (newRobotId) {\n      const newRobot = {\n        id: newRobotId,\n        x: newRobotX,\n        // 사용자가 입력한 초기 x 좌표\n        y: newRobotY // 사용자가 입력한 초기 y 좌표\n      };\n      setRobots(prevRobots => [...prevRobots, newRobot]);\n      setNewRobotId(''); // 입력 필드 초기화\n      setNewRobotX(0);\n      setNewRobotY(0);\n    }\n  };\n\n  // 지도와 로봇 위치 그리기\n  const drawMapAndRobots = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n    mapImage.onload = () => {\n      canvas.width = mapImage.width;\n      canvas.height = mapImage.height;\n\n      // 기존 캔버스 내용 지우기\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImage, 0, 0);\n\n      // 로봇 위치 그리기\n      drawRobots(ctx, mapImage.width, mapImage.height);\n    };\n  };\n  const drawRobots = (ctx, mapWidth, mapHeight) => {\n    robots.forEach(robot => {\n      const {\n        x,\n        y,\n        id\n      } = robot;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y, mapWidth, mapHeight, mapResolution);\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.fillText(id, mapX + 8, mapY); // 로봇 ID를 지도에 표시\n    });\n  };\n\n  // 지도나 로봇 위치가 변경될 때마다 다시 그리기\n  useEffect(() => {\n    if (mapUrl) {\n      drawMapAndRobots();\n    }\n  }, [mapUrl, robots]);\n\n  // Teleop 명령 전송 함수\n  const sendTeleopCommand = (linear, angular) => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      const command = {\n        command: {\n          linear,\n          angular\n        }\n      };\n      ws.send(JSON.stringify(command));\n    }\n  };\n\n  // 키보드 입력 처리\n  const handleKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowUp':\n        sendTeleopCommand(0.5, 0); // 앞으로\n        break;\n      case 'ArrowDown':\n        sendTeleopCommand(-0.5, 0); // 뒤로\n        break;\n      case 'ArrowLeft':\n        sendTeleopCommand(0, 1); // 왼쪽 회전\n        break;\n      case 'ArrowRight':\n        sendTeleopCommand(0, -1); // 오른쪽 회전\n        break;\n      default:\n        sendTeleopCommand(0, 0); // 정지\n        break;\n    }\n  };\n\n  // 컴포넌트가 렌더링될 때 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [ws]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontFamily: 'Arial, sans-serif',\n      margin: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center',\n      margin: '20px 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, \"Monitoring & Control Page\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: newRobotId,\n    onChange: e => setNewRobotId(e.target.value),\n    placeholder: \"Enter robot ID\",\n    style: {\n      padding: '5px',\n      fontSize: '16px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: newRobotX,\n    onChange: e => setNewRobotX(Number(e.target.value)),\n    placeholder: \"Enter initial X coordinate\",\n    style: {\n      padding: '5px',\n      fontSize: '16px',\n      marginLeft: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    value: newRobotY,\n    onChange: e => setNewRobotY(Number(e.target.value)),\n    placeholder: \"Enter initial Y coordinate\",\n    style: {\n      padding: '5px',\n      fontSize: '16px',\n      marginLeft: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addRobot,\n    style: {\n      padding: '5px 10px',\n      marginLeft: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, \"Add Robot\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }, \"Loading map...\")));\n};\nexport default MonitoringPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Navbar","LogoutButton","UserInfo","MonitoringPage","mapUrl","setMapUrl","robots","setRobots","newRobotId","setNewRobotId","newRobotX","setNewRobotX","newRobotY","setNewRobotY","ws","setWs","canvasRef","mapResolution","setMapResolution","mapDimensions","setMapDimensions","width","height","fetchMonitoredMap","fetchMapMetadata","socket","WebSocket","onmessage","event","robotData","JSON","parse","data","prevRobots","existingRobotIndex","findIndex","r","id","updatedRobots","x","y","onerror","error","console","onclose","log","close","token","localStorage","getItem","response","get","headers","Authorization","responseType","url","URL","createObjectURL","img","Image","src","onload","metadata","resolution","parseFloat","match","worldToMap","mapWidth","mapHeight","mapX","mapY","addRobot","newRobot","drawMapAndRobots","canvas","current","ctx","getContext","mapImage","clearRect","drawImage","drawRobots","forEach","robot","fillStyle","beginPath","arc","Math","PI","fill","font","fillText","sendTeleopCommand","linear","angular","readyState","OPEN","command","send","stringify","handleKeyDown","e","key","window","addEventListener","removeEventListener","createElement","style","fontFamily","margin","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","marginBottom","textAlign","type","value","onChange","target","placeholder","padding","fontSize","Number","marginLeft","onClick","alignItems","flexDirection","ref","border"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Monitor/MonitoringPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\n\nconst MonitoringPage = () => {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [robots, setRobots] = useState([]);\n  const [newRobotId, setNewRobotId] = useState('');  // 새로 추가할 로봇 ID\n  const [newRobotX, setNewRobotX] = useState(0); // 새 로봇의 초기 x 좌표\n  const [newRobotY, setNewRobotY] = useState(0); // 새 로봇의 초기 y 좌표\n  const [ws, setWs] = useState(null);  // WebSocket 연결 상태 저장\n  const canvasRef = useRef(null);\n  const [mapResolution, setMapResolution] = useState(0.05);\n  const [mapDimensions, setMapDimensions] = useState({ width: 0, height: 0 });\n\n  // 지도와 메타데이터 가져오기 및 WebSocket 연결\n  useEffect(() => {\n    fetchMonitoredMap();\n    fetchMapMetadata();\n\n    const socket = new WebSocket('ws://172.30.1.28:5050');  // WebSocket 서버 주소\n    setWs(socket);\n\n    socket.onmessage = (event) => {\n      const robotData = JSON.parse(event.data);\n      setRobots((prevRobots) => {\n        const existingRobotIndex = prevRobots.findIndex(r => r.id === robotData.id);\n        if (existingRobotIndex !== -1) {\n          const updatedRobots = [...prevRobots];\n          updatedRobots[existingRobotIndex] = { ...updatedRobots[existingRobotIndex], x: robotData.x, y: robotData.y };\n          return updatedRobots;\n        } else {\n          return [...prevRobots, robotData];\n        }\n      });\n    };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket closed');\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  // 지도 파일 가져오기\n  const fetchMonitoredMap = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({ width: img.width, height: img.height });\n      };\n    } catch (error) {\n      console.error('Error fetching monitored map:', error);\n    }\n  };\n\n  // 지도 메타데이터 가져오기\n  const fetchMapMetadata = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('Error fetching map metadata:', error);\n    }\n  };\n\n  // 월드 좌표계를 지도 좌표계로 변환\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + mapWidth * resolution / 2) / resolution;\n    const mapY = mapHeight - (y + mapHeight * resolution / 2) / resolution;\n    return { mapX, mapY };\n  };\n\n  // 로봇 추가\n  const addRobot = () => {\n    if (newRobotId) {\n      const newRobot = {\n        id: newRobotId,\n        x: newRobotX,  // 사용자가 입력한 초기 x 좌표\n        y: newRobotY   // 사용자가 입력한 초기 y 좌표\n      };\n      setRobots((prevRobots) => [...prevRobots, newRobot]);\n      setNewRobotId('');  // 입력 필드 초기화\n      setNewRobotX(0);\n      setNewRobotY(0);\n    }\n  };\n\n  // 지도와 로봇 위치 그리기\n  const drawMapAndRobots = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n\n    mapImage.onload = () => {\n      canvas.width = mapImage.width;\n      canvas.height = mapImage.height;\n\n      // 기존 캔버스 내용 지우기\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImage, 0, 0);\n\n      // 로봇 위치 그리기\n      drawRobots(ctx, mapImage.width, mapImage.height);\n    };\n  };\n\n  const drawRobots = (ctx, mapWidth, mapHeight) => {\n    robots.forEach((robot) => {\n      const { x, y, id } = robot;\n      const { mapX, mapY } = worldToMap(x, y, mapWidth, mapHeight, mapResolution);\n      ctx.fillStyle = 'red';\n      ctx.beginPath();\n      ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.fillText(id, mapX + 8, mapY);  // 로봇 ID를 지도에 표시\n    });\n  };\n\n  // 지도나 로봇 위치가 변경될 때마다 다시 그리기\n  useEffect(() => {\n    if (mapUrl) {\n      drawMapAndRobots();\n    }\n  }, [mapUrl, robots]);\n\n  // Teleop 명령 전송 함수\n  const sendTeleopCommand = (linear, angular) => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      const command = { command: { linear, angular } };\n      ws.send(JSON.stringify(command));\n    }\n  };\n\n  // 키보드 입력 처리\n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        sendTeleopCommand(0.5, 0);  // 앞으로\n        break;\n      case 'ArrowDown':\n        sendTeleopCommand(-0.5, 0);  // 뒤로\n        break;\n      case 'ArrowLeft':\n        sendTeleopCommand(0, 1);  // 왼쪽 회전\n        break;\n      case 'ArrowRight':\n        sendTeleopCommand(0, -1);  // 오른쪽 회전\n        break;\n      default:\n        sendTeleopCommand(0, 0);  // 정지\n        break;\n    }\n  };\n\n  // 컴포넌트가 렌더링될 때 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [ws]);\n\n  return (\n    <div style={{ fontFamily: 'Arial, sans-serif', margin: '20px' }}>\n      <header style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '20px' }}>\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n      <h2 style={{ textAlign: 'center', margin: '20px 0' }}>Monitoring & Control Page</h2>\n\n      {/* 로봇 추가 폼 */}\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          value={newRobotId}\n          onChange={(e) => setNewRobotId(e.target.value)}\n          placeholder=\"Enter robot ID\"\n          style={{ padding: '5px', fontSize: '16px' }}\n        />\n        <input\n          type=\"number\"\n          value={newRobotX}\n          onChange={(e) => setNewRobotX(Number(e.target.value))}\n          placeholder=\"Enter initial X coordinate\"\n          style={{ padding: '5px', fontSize: '16px', marginLeft: '10px' }}\n        />\n        <input\n          type=\"number\"\n          value={newRobotY}\n          onChange={(e) => setNewRobotY(Number(e.target.value))}\n          placeholder=\"Enter initial Y coordinate\"\n          style={{ padding: '5px', fontSize: '16px', marginLeft: '10px' }}\n        />\n        <button onClick={addRobot} style={{ padding: '5px 10px', marginLeft: '10px' }}>\n          Add Robot\n        </button>\n      </div>\n\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\n        {mapUrl ? (\n          <canvas ref={canvasRef} style={{ border: '1px solid #ccc' }}></canvas>\n        ) : (\n          <p>Loading map...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MonitoringPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}