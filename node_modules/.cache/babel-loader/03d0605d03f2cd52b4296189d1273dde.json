{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\nfunction MapComponent({\n  robots,\n  mapUrl,\n  mapId\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [noGoZones, setNoGoZones] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n\n  // 서버에서 노드와 연결 정보 가져오기\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await axios.get(`http://13.209.100.213:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 서버에서 금지 구역 정보 가져오기\n  const fetchNoGoZones = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        return;\n      }\n      const response = await axios.get(`http://13.209.100.213:5557/map/no-go-zones/map/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n      drawMapElements(); // 모든 요소 그리기 (노드, 연결선, 금지 구역, 로봇 등)\n    };\n  };\n\n  // 노드 간 연결선, 금지 구역, 노드, 로봇 위치를 그리는 함수\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !mapImageRef.current) return;\n\n    // 지도 초기화\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 금지 구역 그리기\n    noGoZones.forEach(zone => {\n      const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.mapX - topLeft.mapX;\n      const height = bottomRight.mapY - topLeft.mapY;\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.mapX, topLeft.mapY, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.mapX, topLeft.mapY, width, height);\n    });\n\n    // 노드 간 연결선 그리기 (웨이포인트 포함)\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          const {\n            mapX: startX,\n            mapY: startY\n          } = worldToMap(node.x, node.y);\n          ctx.moveTo(startX, startY);\n\n          // 각 웨이포인트를 연결하며 그리기\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(waypoint => {\n              const {\n                mapX,\n                mapY\n              } = worldToMap(waypoint.x, waypoint.y);\n              ctx.lineTo(mapX, mapY);\n            });\n          }\n\n          // 마지막에 연결된 노드까지 연결\n          const {\n            mapX: endX,\n            mapY: endY\n          } = worldToMap(connectedNode.x, connectedNode.y);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드와 로봇 그리기\n    drawNodes();\n    drawRobots();\n  };\n\n  // 노드 그리기 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y,\n        name\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - size / 2, mapY - size / 2, size, size);\n      if (hoveredNode && hoveredNode._id === node._id) {\n        const textPadding = 4;\n        ctx.font = '12px Arial';\n        const textWidth = ctx.measureText(name).width;\n        const backgroundWidth = textWidth + textPadding * 2;\n        const backgroundHeight = 16;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(mapX + size / 2, mapY - size / 2 - backgroundHeight, backgroundWidth, backgroundHeight);\n        ctx.fillStyle = 'white';\n        ctx.fillText(name, mapX + size / 2 + textPadding, mapY - size / 2 - textPadding);\n      }\n    });\n  };\n\n  // 로봇 그리기 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = {\n          mapX,\n          mapY,\n          robotColor\n        };\n      }\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 마우스 이동 시 노드 호버 상태 업데이트\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        mapX,\n        mapY\n      } = worldToMap(node.x, node.y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n      if (distance < 5) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n  };\n\n  // 지도 및 노드, 금지 구역 초기화\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n      fetchNoGoZones();\n    }\n  }, [mapUrl, mapId]);\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawMapElements();\n    }\n  }, [robots, nodes, noGoZones, hoveredNode]);\n\n  // 마우스 이벤트 리스너 추가\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n      };\n    }\n  }, [nodes]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","gsap","axios","MapComponent","robots","mapUrl","mapId","canvasRef","mapImageRef","robotRefs","nodes","setNodes","noGoZones","setNoGoZones","hoveredNode","setHoveredNode","mapResolution","mapOrigin","fetchNodes","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","data","error","console","fetchNoGoZones","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawMapElements","forEach","zone","topLeft","worldToMap","x","y","bottomRight","mapX","mapY","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","node","connections","connection","connectedNode","find","n","_id","beginPath","startX","startY","moveTo","waypoints","length","waypoint","lineTo","endX","endY","stroke","drawNodes","drawRobots","name","size","textPadding","font","textWidth","measureText","backgroundWidth","backgroundHeight","fillText","robot","index","_robot$status","_robot$status2","_robot$status3","robotColor","status","state","to","duration","ease","onUpdate","arc","Math","PI","fill","mapImage","mapWidth","mapHeight","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","sqrt","addEventListener","removeEventListener","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\n\nfunction MapComponent({ robots, mapUrl, mapId }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [noGoZones, setNoGoZones] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n\n  // 서버에서 노드와 연결 정보 가져오기\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n\n      const response = await axios.get(`http://13.209.100.213:5557/map/nodes/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 서버에서 금지 구역 정보 가져오기\n  const fetchNoGoZones = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        return;\n      }\n\n      const response = await axios.get(`http://13.209.100.213:5557/map/no-go-zones/map/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNoGoZones(response.data);\n    } catch (error) {\n      console.error('금지구역을 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      drawMapElements(); // 모든 요소 그리기 (노드, 연결선, 금지 구역, 로봇 등)\n    };\n  };\n\n  // 노드 간 연결선, 금지 구역, 노드, 로봇 위치를 그리는 함수\n  const drawMapElements = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !mapImageRef.current) return;\n\n    // 지도 초기화\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 금지 구역 그리기\n    noGoZones.forEach((zone) => {\n      const topLeft = worldToMap(zone.topLeft.x, zone.topLeft.y);\n      const bottomRight = worldToMap(zone.bottomRight.x, zone.bottomRight.y);\n      const width = bottomRight.mapX - topLeft.mapX;\n      const height = bottomRight.mapY - topLeft.mapY;\n\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\n      ctx.fillRect(topLeft.mapX, topLeft.mapY, width, height);\n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(topLeft.mapX, topLeft.mapY, width, height);\n    });\n\n    // 노드 간 연결선 그리기 (웨이포인트 포함)\n    nodes.forEach((node) => {\n      node.connections.forEach((connection) => {\n        const connectedNode = nodes.find((n) => n._id === connection.node);\n        if (connectedNode) {\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n\n          const { mapX: startX, mapY: startY } = worldToMap(node.x, node.y);\n          ctx.moveTo(startX, startY);\n\n          // 각 웨이포인트를 연결하며 그리기\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach((waypoint) => {\n              const { mapX, mapY } = worldToMap(waypoint.x, waypoint.y);\n              ctx.lineTo(mapX, mapY);\n            });\n          }\n\n          // 마지막에 연결된 노드까지 연결\n          const { mapX: endX, mapY: endY } = worldToMap(connectedNode.x, connectedNode.y);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드와 로봇 그리기\n    drawNodes();\n    drawRobots();\n  };\n\n  // 노드 그리기 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    nodes.forEach((node) => {\n      const { x, y, name } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - size / 2, mapY - size / 2, size, size);\n\n      if (hoveredNode && hoveredNode._id === node._id) {\n        const textPadding = 4;\n        ctx.font = '12px Arial';\n        const textWidth = ctx.measureText(name).width;\n        const backgroundWidth = textWidth + textPadding * 2;\n        const backgroundHeight = 16;\n\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(\n          mapX + size / 2,\n          mapY - size / 2 - backgroundHeight,\n          backgroundWidth,\n          backgroundHeight\n        );\n\n        ctx.fillStyle = 'white';\n        ctx.fillText(name, mapX + size / 2 + textPadding, mapY - size / 2 - textPadding);\n      }\n    });\n  };\n\n  // 로봇 그리기 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    robots.forEach((robot, index) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = { mapX, mapY, robotColor };\n      }\n\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  // 마우스 이동 시 노드 호버 상태 업데이트\n  const handleMouseMove = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n\n    let foundNode = null;\n    nodes.forEach((node) => {\n      const { mapX, mapY } = worldToMap(node.x, node.y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n\n      if (distance < 5) {\n        foundNode = node;\n      }\n    });\n    setHoveredNode(foundNode);\n  };\n\n  // 지도 및 노드, 금지 구역 초기화\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n      fetchNoGoZones();\n    }\n  }, [mapUrl, mapId]);\n\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawMapElements();\n    }\n  }, [robots, nodes, noGoZones, hoveredNode]);\n\n  // 마우스 이벤트 리스너 추가\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener('mousemove', handleMouseMove);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n      };\n    }\n  }, [nodes]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}