{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { faEdit, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const mapRef = useRef(null); // 지도 영역 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n\n  // 이미지의 실제 크기와 렌더링된 크기 상태\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n  const [imageRenderedWidth, setImageRenderedWidth] = useState(null);\n  const [imageRenderedHeight, setImageRenderedHeight] = useState(null);\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('No token found, please log in again.');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.15:5557/map/maps', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n    } catch (error) {\n      console.error('Error fetching maps:', error);\n      alert('Failed to fetch maps.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async map => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    fetchNodes(map._id); // 선택된 맵의 노드 불러오기\n\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.15:5557/map/file/${map._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl);\n    } catch (error) {\n      console.error('Error fetching map image:', error);\n      alert('Failed to fetch map image.');\n    }\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('Please select a map first.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서 십자가 모양 변경\n  };\n\n  // 지도 클릭 시 좌표를 얻고 팝업을 여는 함수\n  const handleMapClick = e => {\n    if (!isCreatingNode) return;\n    const img = mapRef.current.querySelector('img'); // 이미지 요소 가져오기\n    if (!img) return;\n    const rect = img.getBoundingClientRect(); // 이미지의 위치와 크기 계산\n\n    const isInsideImage = e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom;\n    if (!isInsideImage) {\n      alert('노드는 지도 이미지 안에만 생성할 수 있습니다.');\n      return;\n    }\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    // 화면 좌표를 월드 좌표로 변환 (자연 크기 기준으로 변경)\n    if (!imageNaturalWidth || !imageNaturalHeight) {\n      console.error('Image natural size not available.');\n      alert('이미지 로드 중입니다. 잠시 후 다시 시도해주세요.');\n      return;\n    }\n    const {\n      x,\n      y\n    } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n    console.log(`Click Coordinates: (${clickX}, ${clickY})`);\n    console.log(`World Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})`);\n    setNodeX(x);\n    setNodeY(y);\n    setIsCreatingNode(false);\n    setIsNodePopupOpen(true); // 팝업 열기\n    document.body.style.cursor = 'default'; // 커서 복구\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapWidth = imageNaturalWidth; // 자연 크기를 기준으로 좌표 변환\n    const mapHeight = imageNaturalHeight;\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution; // Y 좌표는 캔버스 상하 반전 처리\n    return {\n      mapX,\n      mapY\n    };\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"map-management-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNodeMode,\n    className: \"create-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }), \" Create Node\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"map-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Map List\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsUploadPopupOpen(true),\n    className: \"add-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"+\")), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"map-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, maps.map(map => /*#__PURE__*/React.createElement(\"li\", {\n    key: map._id,\n    className: `map-list-item ${(selectedMap === null || selectedMap === void 0 ? void 0 : selectedMap._id) === map._id ? 'selected-map' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleSelectMap(map),\n    className: \"map-list-item-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, map.name)))), selectedMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, \"Map Description\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, selectedMap.description))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-and-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapRef,\n    className: \"map-image-container\",\n    style: {\n      cursor: isCreatingNode ? 'crosshair' : 'auto'\n    },\n    onClick: handleMapClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, mapImage ? /*#__PURE__*/React.createElement(\"img\", {\n    src: mapImage,\n    alt: \"Selected Map\",\n    className: \"map-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 91\n    }\n  }, \"Select a map to view its image\"), nodes.map(node => {\n    if (!imageNaturalWidth || !imageNaturalHeight) return null;\n    const {\n      x,\n      y\n    } = worldToMap(node.x, node.y);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: node._id,\n      className: \"node\",\n      style: {\n        position: 'absolute',\n        top: `${y}px`,\n        left: `${x}px`,\n        width: '10px',\n        height: '10px',\n        backgroundColor: 'red',\n        borderRadius: '50%',\n        transform: 'translate(-50%, -50%)'\n      },\n      title: node.name // 마우스 오버 시 노드 이름 표시\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, \"Nodes List\"), nodes.length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 15\n    }\n  }, nodes.map(node => /*#__PURE__*/React.createElement(\"li\", {\n    key: node._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  }, node.name), \": (\", node.x.toFixed(2), \", \", node.y.toFixed(2), \")\"))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, \"No nodes available for this map.\")))));\n}\nexport default Mapmanage;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","FontAwesomeIcon","Navbar","LogoutButton","UserInfo","faEdit","faPlus","worldToMap","mapToWorld","Mapmanage","maps","setMaps","selectedMap","setSelectedMap","editName","setEditName","editDescription","setEditDescription","uploadName","setUploadName","uploadDescription","setUploadDescription","mapFile","setMapFile","yamlFile","setYamlFile","mapImage","setMapImage","isUploadPopupOpen","setIsUploadPopupOpen","isEditPopupOpen","setIsEditPopupOpen","isCreatingNode","setIsCreatingNode","nodeX","setNodeX","nodeY","setNodeY","nodeName","setNodeName","isNodePopupOpen","setIsNodePopupOpen","mapRef","nodes","setNodes","imageNaturalWidth","setImageNaturalWidth","imageNaturalHeight","setImageNaturalHeight","imageRenderedWidth","setImageRenderedWidth","imageRenderedHeight","setImageRenderedHeight","fetchMaps","token","localStorage","getItem","alert","response","get","headers","Authorization","data","error","console","handleSelectMap","map","name","description","fetchNodes","_id","responseType","imageUrl","URL","createObjectURL","handleCreateNodeMode","document","body","style","cursor","handleMapClick","e","img","current","querySelector","rect","getBoundingClientRect","isInsideImage","clientX","left","right","clientY","top","bottom","clickX","clickY","x","y","log","toFixed","mapWidth","mapHeight","mapX","mapOrigin","mapResolution","mapY","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","key","ref","src","alt","node","position","width","height","backgroundColor","borderRadius","transform","title","length"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { faEdit, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const mapRef = useRef(null); // 지도 영역 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n\n  // 이미지의 실제 크기와 렌더링된 크기 상태\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n  const [imageRenderedWidth, setImageRenderedWidth] = useState(null);\n  const [imageRenderedHeight, setImageRenderedHeight] = useState(null);\n\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('No token found, please log in again.');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.15:5557/map/maps', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setMaps(response.data);\n    } catch (error) {\n      console.error('Error fetching maps:', error);\n      alert('Failed to fetch maps.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async (map) => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    fetchNodes(map._id); // 선택된 맵의 노드 불러오기\n\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.15:5557/map/file/${map._id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl);\n    } catch (error) {\n      console.error('Error fetching map image:', error);\n      alert('Failed to fetch map image.');\n    }\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('Please select a map first.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서 십자가 모양 변경\n  };\n\n  // 지도 클릭 시 좌표를 얻고 팝업을 여는 함수\n  const handleMapClick = (e) => {\n    if (!isCreatingNode) return;\n\n    const img = mapRef.current.querySelector('img'); // 이미지 요소 가져오기\n    if (!img) return;\n\n    const rect = img.getBoundingClientRect(); // 이미지의 위치와 크기 계산\n\n    const isInsideImage =\n      e.clientX >= rect.left &&\n      e.clientX <= rect.right &&\n      e.clientY >= rect.top &&\n      e.clientY <= rect.bottom;\n\n    if (!isInsideImage) {\n      alert('노드는 지도 이미지 안에만 생성할 수 있습니다.');\n      return;\n    }\n\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    // 화면 좌표를 월드 좌표로 변환 (자연 크기 기준으로 변경)\n    if (!imageNaturalWidth || !imageNaturalHeight) {\n      console.error('Image natural size not available.');\n      alert('이미지 로드 중입니다. 잠시 후 다시 시도해주세요.');\n      return;\n    }\n\n    const { x, y } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n\n    console.log(`Click Coordinates: (${clickX}, ${clickY})`);\n    console.log(`World Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})`);\n\n    setNodeX(x);\n    setNodeY(y);\n    setIsCreatingNode(false);\n    setIsNodePopupOpen(true); // 팝업 열기\n    document.body.style.cursor = 'default'; // 커서 복구\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapWidth = imageNaturalWidth; // 자연 크기를 기준으로 좌표 변환\n    const mapHeight = imageNaturalHeight;\n\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution; // Y 좌표는 캔버스 상하 반전 처리\n    return { mapX, mapY };\n  };\n\n  return (\n    <div className=\"map-management-page\">\n      <header className=\"map-management-header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n\n      <div className=\"toolbar\">\n        <button onClick={handleCreateNodeMode} className=\"create-node-button\">\n          <FontAwesomeIcon icon={faPlus} /> Create Node\n        </button>\n      </div>\n\n      <div className=\"map-management-content\">\n        <div className=\"map-list-container\">\n          <h2 className=\"map-list-header\">\n            Map List\n            <button onClick={() => setIsUploadPopupOpen(true)} className=\"add-map-button\">\n              +\n            </button>\n          </h2>\n          <ul className=\"map-list\">\n            {maps.map((map) => (\n              <li key={map._id} className={`map-list-item ${selectedMap?._id === map._id ? 'selected-map' : ''}`}>\n                <span onClick={() => handleSelectMap(map)} className=\"map-list-item-name\">\n                  {map.name}\n                </span>\n              </li>\n            ))}\n          </ul>\n\n          {selectedMap && (\n            <div className=\"map-description\">\n              <h3>Map Description</h3>\n              <p>{selectedMap.description}</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"map-image-and-node-list\">\n          <div ref={mapRef} className=\"map-image-container\" style={{ cursor: isCreatingNode ? 'crosshair' : 'auto' }} onClick={handleMapClick}>\n            {mapImage ? <img src={mapImage} alt=\"Selected Map\" className=\"map-image\" /> : <p>Select a map to view its image</p>}\n\n            {nodes.map((node) => {\n              if (!imageNaturalWidth || !imageNaturalHeight) return null;\n\n              const { x, y } = worldToMap(node.x, node.y);\n              return (\n                <div\n                  key={node._id}\n                  className=\"node\"\n                  style={{\n                    position: 'absolute',\n                    top: `${y}px`,\n                    left: `${x}px`,\n                    width: '10px',\n                    height: '10px',\n                    backgroundColor: 'red',\n                    borderRadius: '50%',\n                    transform: 'translate(-50%, -50%)',\n                  }}\n                  title={node.name} // 마우스 오버 시 노드 이름 표시\n                />\n              );\n            })}\n          </div>\n\n          <div className=\"node-list-container\">\n            <h3>Nodes List</h3>\n            {nodes.length > 0 ? (\n              <ul>\n                {nodes.map((node) => (\n                  <li key={node._id}>\n                    <strong>{node.name}</strong>: ({node.x.toFixed(2)}, {node.y.toFixed(2)})\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>No nodes available for this map.</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Mapmanage;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,gCAAgC;AAEhE,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAO,iBAAiB;AACxB,SAASC,MAAM,EAAEC,MAAM,QAAQ,mCAAmC;AAClE,SAASC,UAAU,EAAEC,UAAU,QAAQ,6BAA6B;AAEpE,SAASC,SAASA,CAAA,EAAG;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACuB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC+B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAACiC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACmC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACyC,QAAQ,EAAEC,WAAW,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAAC2C,eAAe,EAAEC,kBAAkB,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/D,MAAM6C,MAAM,GAAG3C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7B,MAAM,CAAC4C,KAAK,EAAEC,QAAQ,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACA,MAAM,CAACgD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACkD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACoD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACsD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACduD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACVG,KAAK,CAAC,sCAAsC,CAAC;MAC7C;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM1D,KAAK,CAAC2D,GAAG,CAAC,kCAAkC,EAAE;QACnEC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUP,KAAK;QAChC;MACF,CAAC,CAAC;MACF3C,OAAO,CAAC+C,QAAQ,CAACI,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CN,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMQ,eAAe,GAAG,MAAOC,GAAG,IAAK;IACrCrD,cAAc,CAACqD,GAAG,CAAC,CAAC,CAAC;IACrBnD,WAAW,CAACmD,GAAG,CAACC,IAAI,CAAC;IACrBlD,kBAAkB,CAACiD,GAAG,CAACE,WAAW,CAAC;IACnCC,UAAU,CAACH,GAAG,CAACI,GAAG,CAAC,CAAC,CAAC;;IAErB,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI;MACF,MAAME,QAAQ,GAAG,MAAM1D,KAAK,CAAC2D,GAAG,CAAC,oCAAoCO,GAAG,CAACI,GAAG,EAAE,EAAE;QAC9EV,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUP,KAAK;QAAG,CAAC;QAC7CiB,YAAY,EAAE;MAChB,CAAC,CAAC;MACF,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAAChB,QAAQ,CAACI,IAAI,CAAC;MACnDnC,WAAW,CAAC6C,QAAQ,CAAC;IACvB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDN,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMkB,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAC/D,WAAW,EAAE;MAChB6C,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IACAxB,iBAAiB,CAAC,IAAI,CAAC;IACvB2C,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,MAAM,GAAG,WAAW,CAAC,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAI,CAACjD,cAAc,EAAE;IAErB,MAAMkD,GAAG,GAAGxC,MAAM,CAACyC,OAAO,CAACC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,IAAI,CAACF,GAAG,EAAE;IAEV,MAAMG,IAAI,GAAGH,GAAG,CAACI,qBAAqB,CAAC,CAAC,CAAC,CAAC;;IAE1C,MAAMC,aAAa,GACjBN,CAAC,CAACO,OAAO,IAAIH,IAAI,CAACI,IAAI,IACtBR,CAAC,CAACO,OAAO,IAAIH,IAAI,CAACK,KAAK,IACvBT,CAAC,CAACU,OAAO,IAAIN,IAAI,CAACO,GAAG,IACrBX,CAAC,CAACU,OAAO,IAAIN,IAAI,CAACQ,MAAM;IAE1B,IAAI,CAACN,aAAa,EAAE;MAClB9B,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IAEA,MAAMqC,MAAM,GAAGb,CAAC,CAACO,OAAO,GAAGH,IAAI,CAACI,IAAI;IACpC,MAAMM,MAAM,GAAGd,CAAC,CAACU,OAAO,GAAGN,IAAI,CAACO,GAAG;;IAEnC;IACA,IAAI,CAAC/C,iBAAiB,IAAI,CAACE,kBAAkB,EAAE;MAC7CiB,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAC;MAClDN,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEA,MAAM;MAAEuC,CAAC;MAAEC;IAAE,CAAC,GAAGzF,UAAU,CAACsF,MAAM,EAAEC,MAAM,EAAElD,iBAAiB,EAAEE,kBAAkB,CAAC;IAElFiB,OAAO,CAACkC,GAAG,CAAC,uBAAuBJ,MAAM,KAAKC,MAAM,GAAG,CAAC;IACxD/B,OAAO,CAACkC,GAAG,CAAC,uBAAuBF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,KAAKF,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAEpEhE,QAAQ,CAAC6D,CAAC,CAAC;IACX3D,QAAQ,CAAC4D,CAAC,CAAC;IACXhE,iBAAiB,CAAC,KAAK,CAAC;IACxBQ,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1BmC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,MAAM,GAAG,SAAS,CAAC,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMxE,UAAU,GAAGA,CAACyF,CAAC,EAAEC,CAAC,KAAK;IAC3B,MAAMG,QAAQ,GAAGvD,iBAAiB,CAAC,CAAC;IACpC,MAAMwD,SAAS,GAAGtD,kBAAkB;IAEpC,MAAMuD,IAAI,GAAG,CAACN,CAAC,GAAGO,SAAS,CAAC,CAAC,CAAC,IAAIC,aAAa;IAC/C,MAAMC,IAAI,GAAGJ,SAAS,GAAG,CAACJ,CAAC,GAAGM,SAAS,CAAC,CAAC,CAAC,IAAIC,aAAa,CAAC,CAAC;IAC7D,OAAO;MAAEF,IAAI;MAAEG;IAAK,CAAC;EACvB,CAAC;EAED,oBACE7G,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,qBAAqB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClCrH,KAAA,CAAA8G,aAAA;IAAQC,SAAS,EAAC,uBAAuB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACvCrH,KAAA,CAAA8G,aAAA,CAACtG,QAAQ;IAAAwG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACZrH,KAAA,CAAA8G,aAAA,CAACvG,YAAY;IAAAyG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACT,CAAC,eACTrH,KAAA,CAAA8G,aAAA,CAACxG,MAAM;IAAA0G,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAEVrH,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,SAAS;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtBrH,KAAA,CAAA8G,aAAA;IAAQQ,OAAO,EAAEvC,oBAAqB;IAACgC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnErH,KAAA,CAAA8G,aAAA,CAACzG,eAAe;IAACkH,IAAI,EAAE7G,MAAO;IAAAsG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gBAC3B,CACL,CAAC,eAENrH,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,wBAAwB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrCrH,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjCrH,KAAA,CAAA8G,aAAA;IAAIC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAE9B,eAAArH,KAAA,CAAA8G,aAAA;IAAQQ,OAAO,EAAEA,CAAA,KAAMrF,oBAAoB,CAAC,IAAI,CAAE;IAAC8E,SAAS,EAAC,gBAAgB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,GAEtE,CACN,CAAC,eACLrH,KAAA,CAAA8G,aAAA;IAAIC,SAAS,EAAC,UAAU;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrBvG,IAAI,CAACwD,GAAG,CAAEA,GAAG,iBACZtE,KAAA,CAAA8G,aAAA;IAAIU,GAAG,EAAElD,GAAG,CAACI,GAAI;IAACqC,SAAS,EAAE,iBAAiB,CAAA/F,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE0D,GAAG,MAAKJ,GAAG,CAACI,GAAG,GAAG,cAAc,GAAG,EAAE,EAAG;IAAAsC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjGrH,KAAA,CAAA8G,aAAA;IAAMQ,OAAO,EAAEA,CAAA,KAAMjD,eAAe,CAACC,GAAG,CAAE;IAACyC,SAAS,EAAC,oBAAoB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACtE/C,GAAG,CAACC,IACD,CACJ,CACL,CACC,CAAC,EAEJvD,WAAW,iBACVhB,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,iBAAiB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC9BrH,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,iBAAmB,CAAC,eACxBrH,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIrG,WAAW,CAACwD,WAAe,CAC5B,CAEJ,CAAC,eAENxE,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,yBAAyB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACtCrH,KAAA,CAAA8G,aAAA;IAAKW,GAAG,EAAE3E,MAAO;IAACiE,SAAS,EAAC,qBAAqB;IAAC7B,KAAK,EAAE;MAAEC,MAAM,EAAE/C,cAAc,GAAG,WAAW,GAAG;IAAO,CAAE;IAACkF,OAAO,EAAElC,cAAe;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjIvF,QAAQ,gBAAG9B,KAAA,CAAA8G,aAAA;IAAKY,GAAG,EAAE5F,QAAS;IAAC6F,GAAG,EAAC,cAAc;IAACZ,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gBAAGrH,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,gCAAiC,CAAC,EAElHtE,KAAK,CAACuB,GAAG,CAAEsD,IAAI,IAAK;IACnB,IAAI,CAAC3E,iBAAiB,IAAI,CAACE,kBAAkB,EAAE,OAAO,IAAI;IAE1D,MAAM;MAAEiD,CAAC;MAAEC;IAAE,CAAC,GAAG1F,UAAU,CAACiH,IAAI,CAACxB,CAAC,EAAEwB,IAAI,CAACvB,CAAC,CAAC;IAC3C,oBACErG,KAAA,CAAA8G,aAAA;MACEU,GAAG,EAAEI,IAAI,CAAClD,GAAI;MACdqC,SAAS,EAAC,MAAM;MAChB7B,KAAK,EAAE;QACL2C,QAAQ,EAAE,UAAU;QACpB7B,GAAG,EAAE,GAAGK,CAAC,IAAI;QACbR,IAAI,EAAE,GAAGO,CAAC,IAAI;QACd0B,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,eAAe,EAAE,KAAK;QACtBC,YAAY,EAAE,KAAK;QACnBC,SAAS,EAAE;MACb,CAAE;MACFC,KAAK,EAAEP,IAAI,CAACrD,IAAK,CAAC;MAAA;MAAAyC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACnB,CAAC;EAEN,CAAC,CACE,CAAC,eAENrH,KAAA,CAAA8G,aAAA;IAAKC,SAAS,EAAC,qBAAqB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClCrH,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,YAAc,CAAC,EAClBtE,KAAK,CAACqF,MAAM,GAAG,CAAC,gBACfpI,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACGtE,KAAK,CAACuB,GAAG,CAAEsD,IAAI,iBACd5H,KAAA,CAAA8G,aAAA;IAAIU,GAAG,EAAEI,IAAI,CAAClD,GAAI;IAAAsC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAChBrH,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAASO,IAAI,CAACrD,IAAa,CAAC,OAAG,EAACqD,IAAI,CAACxB,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAACqB,IAAI,CAACvB,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,EAAC,GACrE,CACL,CACC,CAAC,gBAELvG,KAAA,CAAA8G,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,kCAAmC,CAErC,CACF,CACF,CACF,CAAC;AAEV;AAEA,eAAexG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}