{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\nconst TaskFlow = forwardRef(({\n  workflow,\n  onTemporaryFlowAdd,\n  onTemporaryFlowDelete\n}, ref) => {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [temporaryWorkflow, setTemporaryWorkflow] = useState([]);\n  const [hiddenFlows, setHiddenFlows] = useState(new Set()); // 숨길 항목의 인덱스 저장용 Set\n\n  // 팝업 열기/닫기 토글\n  const togglePopup = () => setIsPopupOpen(prev => !prev);\n\n  // CreateTaskFlow에서 새로운 작업 플로우 추가\n  const handleTaskFlowAdd = (nodeName, stepName) => {\n    if (!nodeName.trim() || !stepName.trim()) return;\n    const newFlow = {\n      node: nodeName,\n      step: stepName\n    };\n    setTemporaryWorkflow(prev => [...prev, newFlow]);\n    onTemporaryFlowAdd(newFlow);\n    togglePopup();\n  };\n\n  // 개별 워크플로우 항목을 숨기고 _id를 부모로 전달\n  const handleRemoveFlow = (index, id) => {\n    setHiddenFlows(prev => new Set(prev).add(index));\n    onTemporaryFlowDelete(id);\n  };\n\n  // 임시 플로우 초기화 함수\n  useImperativeHandle(ref, () => ({\n    clearTemporaryWorkflow() {\n      setTemporaryWorkflow([]);\n      setHiddenFlows(new Set()); // 숨김 상태 초기화\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, workflow.concat(temporaryWorkflow).map((flow, index) => hiddenFlows.has(index - workflow.length) ? null : /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-flow-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 37\n    }\n  }, \"\\uB178\\uB4DC:\"), \" \", flow.node), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 37\n    }\n  }, \"\\uC2A4\\uD15D:\"), \" \", flow.step), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"task-flow-remove-btn\",\n    onClick: () => handleRemoveFlow(index - workflow.length, flow._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }\n  }, \"\\xD7\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePopup,\n    className: \"task-flow-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"+\")))), isPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CreateTaskFlow, {\n    onClose: togglePopup,\n    onTaskFlowAdd: handleTaskFlowAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }))));\n});\nexport default TaskFlow;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","CreateTaskFlow","TaskFlow","workflow","onTemporaryFlowAdd","onTemporaryFlowDelete","ref","isPopupOpen","setIsPopupOpen","temporaryWorkflow","setTemporaryWorkflow","hiddenFlows","setHiddenFlows","Set","togglePopup","prev","handleTaskFlowAdd","nodeName","stepName","trim","newFlow","node","step","handleRemoveFlow","index","id","add","clearTemporaryWorkflow","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","concat","map","flow","has","length","key","onClick","_id","onClose","onTaskFlowAdd"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js"],"sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\n\nconst TaskFlow = forwardRef(({ workflow, onTemporaryFlowAdd, onTemporaryFlowDelete }, ref) => {\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [temporaryWorkflow, setTemporaryWorkflow] = useState([]);\n    const [hiddenFlows, setHiddenFlows] = useState(new Set()); // 숨길 항목의 인덱스 저장용 Set\n\n    // 팝업 열기/닫기 토글\n    const togglePopup = () => setIsPopupOpen((prev) => !prev);\n\n    // CreateTaskFlow에서 새로운 작업 플로우 추가\n    const handleTaskFlowAdd = (nodeName, stepName) => {\n        if (!nodeName.trim() || !stepName.trim()) return;\n\n        const newFlow = { node: nodeName, step: stepName };\n        setTemporaryWorkflow((prev) => [...prev, newFlow]);\n        onTemporaryFlowAdd(newFlow);\n        togglePopup();\n    };\n\n    // 개별 워크플로우 항목을 숨기고 _id를 부모로 전달\n    const handleRemoveFlow = (index, id) => {\n        setHiddenFlows((prev) => new Set(prev).add(index));\n        onTemporaryFlowDelete(id);\n    };\n\n    // 임시 플로우 초기화 함수\n    useImperativeHandle(ref, () => ({\n        clearTemporaryWorkflow() {\n            setTemporaryWorkflow([]);\n            setHiddenFlows(new Set()); // 숨김 상태 초기화\n        }\n    }));\n\n    return (\n        <div className=\"task-flow-container\">\n            <div className=\"task-flow-background\">\n                <div className=\"task-flow-list\">\n                    {/* 저장된 workflow와 임시 temporaryWorkflow 병합하여 표시 */}\n                    {workflow.concat(temporaryWorkflow).map((flow, index) => (\n                        hiddenFlows.has(index - workflow.length) ? null : (\n                            <div key={index} className=\"task-flow-item\">\n                                <div>\n                                    <strong>노드:</strong> {flow.node}\n                                </div>\n                                <div>\n                                    <strong>스텝:</strong> {flow.step}\n                                </div>\n                                <button\n                                    className=\"task-flow-remove-btn\"\n                                    onClick={() => handleRemoveFlow(index - workflow.length, flow._id)}\n                                >\n                                    ×\n                                </button>\n                            </div>\n                        )\n                    ))}\n                    <div className=\"task-flow-add\">\n                        <button onClick={togglePopup} className=\"task-flow-button\">+</button>\n                    </div>\n                </div>\n            </div>\n            {isPopupOpen && (\n                <div className=\"popup-overlay\">\n                    <div className=\"popup-content\">\n                        <CreateTaskFlow onClose={togglePopup} onTaskFlowAdd={handleTaskFlowAdd} />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default TaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}