{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n  const mapX = (worldX - mapOrigin[0]) / mapResolution;\n  const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n  return {\n    x: mapX,\n    y: mapY\n  };\n};\nfunction CreateTaskFlow({\n  onClose,\n  onTaskFlowAdd\n}) {\n  const [nodeName, setNodeName] = useState('');\n  const [stepName, setStepName] = useState('');\n  const [nodes, setNodes] = useState([]); // 노드 목록 상태\n  const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n  const [hoveredNode, setHoveredNode] = useState(null); // Hover된 노드 상태\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  }); // 툴팁 위치\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 이미지 참조\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n  const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n\n  // 마우스 이벤트에 따라 툴팁 위치 계산\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    setTooltipPosition({\n      x: event.clientX,\n      y: event.clientY\n    });\n\n    // 노드에 대한 Hover 처리\n    const hovered = nodes.find(node => {\n      const {\n        x: mapX,\n        y: mapY\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      return Math.abs(mapX - x) < 10 && Math.abs(mapY - y) < 10; // Hover 영역 설정\n    });\n    setHoveredNode(hovered || null);\n  };\n\n  // 모니터링 중인 맵 정보를 가져오는 함수\n  const fetchMonitoredMap = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n      fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n      loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n    } catch (error) {\n      console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n      alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 노드를 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵 이미지 로드 함수\n  const loadMapImage = async mapId => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 지도 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 이미지가 로드될 때 캔버스에 그리는 함수\n  const loadCanvasWithImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawNodes(); // 노드 그리기\n    };\n  };\n\n  // 노드 그리기 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 기존 노드 그리기 전에 캔버스를 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 다시 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n\n      // 노드를 빨간 정사각형으로 그리기\n      const size = 10; // 정사각형의 크기\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n    });\n  };\n\n  // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보 가져오기\n  useEffect(() => {\n    fetchMonitoredMap();\n  }, []);\n\n  // 지도 이미지가 변경될 때마다 캔버스에 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadCanvasWithImage();\n    }\n  }, [mapImage]);\n\n  // 작업 플로우 추가 처리\n  const handleSubmit = () => {\n    onTaskFlowAdd(nodeName, stepName); // 부모 컴포넌트에 작업 플로우 추가 요청\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"create-task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #ccc',\n      width: '100%',\n      height: '100%'\n    },\n    onMouseMove: handleMouseMove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, hoveredNode.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, \"\\uC791\\uC5C5 \\uD50C\\uB85C\\uC6B0 \\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nodeName,\n    onChange: e => setNodeName(e.target.value),\n    placeholder: \"\\uB178\\uB4DC \\uC774\\uB984 \\uC785\\uB825\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: stepName,\n    onChange: e => setStepName(e.target.value),\n    placeholder: \"\\uB2E8\\uACC4 \\uC774\\uB984 \\uC785\\uB825\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, \"\\uCD94\\uAC00\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, \"\\uCDE8\\uC18C\"))));\n}\nexport default CreateTaskFlow;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","mapResolution","mapOrigin","worldToMap","worldX","worldY","imageNaturalWidth","imageNaturalHeight","mapX","mapY","x","y","CreateTaskFlow","onClose","onTaskFlowAdd","nodeName","setNodeName","stepName","setStepName","nodes","setNodes","mapImage","setMapImage","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","canvasRef","mapImageRef","setImageNaturalWidth","setImageNaturalHeight","monitoredMap","setMonitoredMap","handleMouseMove","event","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","hovered","find","node","Math","abs","fetchMonitoredMap","token","localStorage","getItem","response","get","headers","Authorization","data","fetchNodes","_id","loadMapImage","error","console","alert","mapId","status","responseType","imageUrl","URL","createObjectURL","loadCanvasWithImage","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawNodes","forEach","size","fillStyle","fillRect","handleSubmit","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","border","onMouseMove","position","backgroundColor","color","padding","borderRadius","pointerEvents","zIndex","fontSize","name","type","value","onChange","e","target","placeholder","onClick"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/CreateTaskFlow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './CreateTaskFlow.css';\n\n// 월드 좌표를 맵 좌표로 변환하는 함수 (배율 및 원점을 고려)\nconst mapResolution = 0.05; // 미터 당 픽셀 (meters per pixel)\nconst mapOrigin = [-10.0, -10.0]; // 맵의 원점 좌표 (x, y)\n\nconst worldToMap = (worldX, worldY, imageNaturalWidth, imageNaturalHeight) => {\n    const mapX = (worldX - mapOrigin[0]) / mapResolution;\n    const mapY = imageNaturalHeight - (worldY - mapOrigin[1]) / mapResolution; // Y 좌표 반전\n    return { x: mapX, y: mapY };\n};\n\nfunction CreateTaskFlow({ onClose, onTaskFlowAdd }) {\n    const [nodeName, setNodeName] = useState('');\n    const [stepName, setStepName] = useState('');\n    const [nodes, setNodes] = useState([]); // 노드 목록 상태\n    const [mapImage, setMapImage] = useState(null); // 지도 이미지 상태\n    const [hoveredNode, setHoveredNode] = useState(null); // Hover된 노드 상태\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 }); // 툴팁 위치\n    const canvasRef = useRef(null); // 캔버스 참조\n    const mapImageRef = useRef(null); // 이미지 참조\n    const [imageNaturalWidth, setImageNaturalWidth] = useState(0);\n    const [imageNaturalHeight, setImageNaturalHeight] = useState(0);\n    const [monitoredMap, setMonitoredMap] = useState(null); // 모니터링 중인 맵 정보\n\n    // 마우스 이벤트에 따라 툴팁 위치 계산\n    const handleMouseMove = (event) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        setTooltipPosition({ x: event.clientX, y: event.clientY });\n\n        // 노드에 대한 Hover 처리\n        const hovered = nodes.find((node) => {\n            const { x: mapX, y: mapY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n            return Math.abs(mapX - x) < 10 && Math.abs(mapY - y) < 10; // Hover 영역 설정\n        });\n        setHoveredNode(hovered || null);\n    };\n\n    // 모니터링 중인 맵 정보를 가져오는 함수\n    const fetchMonitoredMap = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://172.30.1.30:5557/map/monitored', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            setMonitoredMap(response.data); // 모니터링 중인 맵 정보 설정\n            fetchNodes(response.data._id); // 해당 맵의 노드 가져오기\n            loadMapImage(response.data._id); // 해당 맵의 이미지 가져오기\n        } catch (error) {\n            console.error('모니터링 중인 맵을 가져오는 중 오류 발생:', error);\n            alert('모니터링 중인 맵을 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 노드를 가져오는 함수\n    const fetchNodes = async (mapId) => {\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n            if (response.status === 200) {\n                setNodes(response.data); // 노드 리스트 상태 업데이트\n            } else {\n                setNodes([]); // 실패 시 빈 배열로 초기화\n            }\n        } catch (error) {\n            console.error('노드를 가져오는 중 오류 발생:', error);\n            setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n            alert('노드를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 맵 이미지 로드 함수\n    const loadMapImage = async (mapId) => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const token = localStorage.getItem('token');\n        try {\n            const response = await axios.get(`http://172.30.1.30:5557/map/file/${mapId}`, {\n                headers: { Authorization: `Bearer ${token}` },\n                responseType: 'blob',\n            });\n            const imageUrl = URL.createObjectURL(response.data);\n            setMapImage(imageUrl); // 지도 이미지 설정\n        } catch (error) {\n            console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n            alert('맵 이미지를 가져오는 데 실패했습니다.');\n        }\n    };\n\n    // 이미지가 로드될 때 캔버스에 그리는 함수\n    const loadCanvasWithImage = () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n\n        const ctx = canvas.getContext('2d');\n        mapImageRef.current = new Image();\n        mapImageRef.current.src = mapImage;\n\n        mapImageRef.current.onload = () => {\n            const imgWidth = mapImageRef.current.width;\n            const imgHeight = mapImageRef.current.height;\n            setImageNaturalWidth(imgWidth);\n            setImageNaturalHeight(imgHeight);\n\n            // 캔버스 크기 조정 및 기존 내용 클리어\n            canvas.width = imgWidth;\n            canvas.height = imgHeight;\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // 지도 이미지를 캔버스에 그리기\n            ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n            drawNodes(); // 노드 그리기\n        };\n    };\n\n    // 노드 그리기 함수\n    const drawNodes = () => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n        // 기존 노드 그리기 전에 캔버스를 클리어\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // 지도 이미지 다시 그리기\n        ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n        // 노드 그리기\n        nodes.forEach((node) => {\n            const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n\n            // 노드를 빨간 정사각형으로 그리기\n            const size = 10; // 정사각형의 크기\n            ctx.fillStyle = 'red';\n            ctx.fillRect(x - size / 2, y - size / 2, size, size); // 중심을 기준으로 그리기\n        });\n    };\n\n    // 컴포넌트가 마운트될 때 모니터링 중인 맵 정보 가져오기\n    useEffect(() => {\n        fetchMonitoredMap();\n    }, []);\n\n    // 지도 이미지가 변경될 때마다 캔버스에 그리기\n    useEffect(() => {\n        if (mapImage) {\n            loadCanvasWithImage();\n        }\n    }, [mapImage]);\n\n    // 작업 플로우 추가 처리\n    const handleSubmit = () => {\n        onTaskFlowAdd(nodeName, stepName); // 부모 컴포넌트에 작업 플로우 추가 요청\n    };\n\n    return (\n        <div className=\"create-task-flow-container\">\n            <div className=\"map-preview\">\n                <canvas\n                    ref={canvasRef}\n                    style={{ border: '1px solid #ccc', width: '100%', height: '100%' }}\n                    onMouseMove={handleMouseMove}\n                ></canvas>\n\n                {/* Hover Tooltip */}\n                {hoveredNode && (\n                    <div\n                        className=\"tooltip\"\n                        style={{\n                            position: 'fixed',\n                            top: `${tooltipPosition.y + 10}px`,\n                            left: `${tooltipPosition.x + 10}px`,\n                            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                            color: 'white',\n                            padding: '5px 10px',\n                            borderRadius: '4px',\n                            pointerEvents: 'none',\n                            zIndex: 1000,\n                            fontSize: '12px',\n                        }}\n                    >\n                        {hoveredNode.name}\n                    </div>\n                )}\n            </div>\n\n            <div className=\"task-flow-form\">\n                <h3>작업 플로우 추가</h3>\n                <input \n                    type=\"text\" \n                    value={nodeName} \n                    onChange={(e) => setNodeName(e.target.value)} \n                    placeholder=\"노드 이름 입력\"\n                />\n                <input \n                    type=\"text\" \n                    value={stepName} \n                    onChange={(e) => setStepName(e.target.value)} \n                    placeholder=\"단계 이름 입력\"\n                />\n                <div className=\"buttons\">\n                    <button onClick={handleSubmit}>추가</button>\n                    <button onClick={onClose}>취소</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CreateTaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}