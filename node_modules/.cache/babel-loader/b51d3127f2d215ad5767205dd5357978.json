{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nfunction MapComponent() {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [mapResolution, setMapResolution] = useState(0.05); // 기본 값, 실제 파일에서 가져올 예정\n  const [mapDimensions, setMapDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const canvasRef = useRef(null);\n  const [robots, setRobots] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMapMetadata();\n      await fetchMonitoredMap();\n    };\n    fetchData();\n\n    // WebSocket 연결 설정\n    const socket = new WebSocket('ws://your-websocket-url'); // WebSocket 주소를 설정하세요\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n    socket.onmessage = event => {\n      const updatedRobots = JSON.parse(event.data);\n      setRobots(updatedRobots); // WebSocket으로 받은 데이터를 로봇 상태로 설정\n    };\n    socket.onerror = error => {\n      console.error('WebSocket 오류:', error);\n    };\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n    return () => {\n      socket.close(); // 컴포넌트가 언마운트되면 WebSocket 연결 종료\n    };\n  }, []);\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({\n          width: img.width,\n          height: img.height\n        });\n        drawMapAndRobots(img.width, img.height); // 이미지 크기대로 캔버스 조정 및 그리기\n      };\n      img.onerror = err => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n    mapImage.onload = () => {\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.drawImage(mapImage, 0, 0, imgWidth, imgHeight);\n      robots.forEach(robot => {\n        var _robot$status, _robot$status2, _robot$status3;\n        const {\n          x,\n          y\n        } = robot.location;\n        const {\n          mapX,\n          mapY\n        } = worldToMap(x, y, imgWidth, imgHeight, mapResolution);\n        let robotColor = 'gray';\n        if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n          robotColor = 'blue';\n        } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n          robotColor = 'yellow';\n        } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n          robotColor = 'red';\n        }\n        ctx.fillStyle = robotColor;\n        ctx.beginPath();\n        ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    };\n    mapImage.onerror = err => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + mapWidth * resolution / 2) / resolution;\n    const mapY = mapHeight - (y + mapHeight * resolution / 2) / resolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n  useEffect(() => {\n    if (mapUrl && mapDimensions.width && mapDimensions.height) {\n      drawMapAndRobots(mapDimensions.width, mapDimensions.height);\n    }\n  }, [mapUrl, robots, mapDimensions]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","MapComponent","mapUrl","setMapUrl","mapResolution","setMapResolution","mapDimensions","setMapDimensions","width","height","canvasRef","robots","setRobots","fetchData","fetchMapMetadata","fetchMonitoredMap","socket","WebSocket","onopen","console","log","onmessage","event","updatedRobots","JSON","parse","data","onerror","error","onclose","close","getToken","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","responseType","url","URL","createObjectURL","img","Image","src","onload","drawMapAndRobots","err","metadata","resolution","parseFloat","match","imgWidth","imgHeight","canvas","current","ctx","getContext","mapImage","drawImage","forEach","robot","_robot$status","_robot$status2","_robot$status3","x","y","mapX","mapY","worldToMap","robotColor","status","state","fillStyle","beginPath","arc","Math","PI","fill","mapWidth","mapHeight","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nfunction MapComponent() {\n  const [mapUrl, setMapUrl] = useState(null);\n  const [mapResolution, setMapResolution] = useState(0.05); // 기본 값, 실제 파일에서 가져올 예정\n  const [mapDimensions, setMapDimensions] = useState({ width: 0, height: 0 });\n  const canvasRef = useRef(null);\n  const [robots, setRobots] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetchMapMetadata();\n      await fetchMonitoredMap();\n    };\n    fetchData();\n\n    // WebSocket 연결 설정\n    const socket = new WebSocket('ws://your-websocket-url'); // WebSocket 주소를 설정하세요\n\n    socket.onopen = () => {\n      console.log('WebSocket 연결 성공');\n    };\n\n    socket.onmessage = (event) => {\n      const updatedRobots = JSON.parse(event.data);\n      setRobots(updatedRobots); // WebSocket으로 받은 데이터를 로봇 상태로 설정\n    };\n\n    socket.onerror = (error) => {\n      console.error('WebSocket 오류:', error);\n    };\n\n    socket.onclose = () => {\n      console.log('WebSocket 연결 종료');\n    };\n\n    return () => {\n      socket.close(); // 컴포넌트가 언마운트되면 WebSocket 연결 종료\n    };\n  }, []);\n\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      window.location.href = '/login'; // 토큰이 없으면 로그인 페이지로 리디렉션\n      return null;\n    }\n    return token;\n  };\n\n  const fetchMonitoredMap = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/file', {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const url = URL.createObjectURL(response.data);\n      setMapUrl(url);\n\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        setMapDimensions({ width: img.width, height: img.height });\n        drawMapAndRobots(img.width, img.height); // 이미지 크기대로 캔버스 조정 및 그리기\n      };\n      img.onerror = (err) => {\n        console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n      };\n    } catch (error) {\n      console.error('모니터링 지도 가져오기 오류:', error);\n    }\n  };\n\n  const fetchMapMetadata = async () => {\n    const token = getToken();\n    if (!token) return;\n\n    try {\n      const response = await axios.get('http://172.30.1.28:5557/map/monitored/metadata', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const metadata = response.data;\n      const resolution = parseFloat(metadata.match(/resolution:\\s*(\\d+.\\d+)/)[1]);\n      setMapResolution(resolution);\n    } catch (error) {\n      console.error('지도 메타데이터 가져오기 오류:', error);\n    }\n  };\n\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n\n    mapImage.onload = () => {\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.drawImage(mapImage, 0, 0, imgWidth, imgHeight);\n\n      robots.forEach((robot) => {\n        const { x, y } = robot.location;\n        const { mapX, mapY } = worldToMap(x, y, imgWidth, imgHeight, mapResolution);\n\n        let robotColor = 'gray';\n        if (robot.status?.state === 'Tasking') {\n          robotColor = 'blue';\n        } else if (robot.status?.state === 'Waiting') {\n          robotColor = 'yellow';\n        } else if (robot.status?.state === 'Error') {\n          robotColor = 'red';\n        }\n\n        ctx.fillStyle = robotColor;\n        ctx.beginPath();\n        ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    };\n\n    mapImage.onerror = (err) => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + (mapWidth * resolution) / 2) / resolution;\n    const mapY = mapHeight - (y + (mapHeight * resolution) / 2) / resolution;\n    return { mapX, mapY };\n  };\n\n  useEffect(() => {\n    if (mapUrl && mapDimensions.width && mapDimensions.height) {\n      drawMapAndRobots(mapDimensions.width, mapDimensions.height);\n    }\n  }, [mapUrl, robots, mapDimensions]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}