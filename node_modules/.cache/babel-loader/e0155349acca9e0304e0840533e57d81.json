{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js\";\n// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink } from '@fortawesome/free-solid-svg-icons'; // faLink 추가\n\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      const response = await axios.get('http://172.30.1.30:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async mapId => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async map => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${map._id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        responseType: 'blob'\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawNodes(); // 노드 그리기\n    };\n  };\n\n  // 노드를 캔버스에 그리는 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 기존 노드 그리기 전에 캔버스를 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 다시 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 연결선을 먼저 그리기\n    nodes.forEach(node => {\n      node.connections.forEach(connection => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const {\n            x: startX,\n            y: startY\n          } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const {\n            x: endX,\n            y: endY\n          } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach(wp => {\n              const {\n                x: wpX,\n                y: wpY\n              } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드 그리기\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 변경 시마다 노드를 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawNodes(); // 노드를 다시 그리기\n    }\n  }, [nodes]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (!isDeletingNode && !connectionStep.startsWith('selecting')) {\n      document.body.style.cursor = 'default'; // 삭제 모드 및 연결 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    let foundNode = null;\n    for (let node of nodes) {\n      const {\n        x,\n        y\n      } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) {\n        // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      setHoveredNode(null);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가\n  const handleMapClick = async e => {\n    if (!selectedMap) return;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n    const {\n      x,\n      y\n    } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n    if (connectionStep === 'selectingFirstNode') {\n      // 첫 번째 노드 선택\n      let clickedNode = null;\n      for (let node of nodes) {\n        const {\n          x: nodeX,\n          y: nodeY\n        } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          clickedNode = node;\n          break;\n        }\n      }\n      if (clickedNode) {\n        setFirstNodeId(clickedNode._id);\n        if (waypointCount > 0) {\n          setConnectionStep('selectingWaypoints');\n          alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n          document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n        } else {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n        }\n      } else {\n        alert('유효한 노드를 클릭해주세요.');\n      }\n    } else if (connectionStep === 'selectingWaypoints') {\n      // 웨이포인트 추가\n      const newWaypoint = {\n        x,\n        y\n      };\n      setWaypoints([...waypoints, newWaypoint]);\n      setCurrentWaypoint(currentWaypoint + 1);\n      if (currentWaypoint + 1 === waypointCount) {\n        setConnectionStep('selectingSecondNode');\n        alert('두 번째 노드를 선택하세요.');\n        document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n      } else {\n        alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n      }\n    } else if (connectionStep === 'selectingSecondNode') {\n      // 두 번째 노드 선택\n      let clickedNode = null;\n      for (let node of nodes) {\n        const {\n          x: nodeX,\n          y: nodeY\n        } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          clickedNode = node;\n          break;\n        }\n      }\n      if (clickedNode) {\n        if (clickedNode._id === firstNodeId) {\n          alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n          return;\n        }\n        try {\n          const token = localStorage.getItem('token');\n          const response = await axios.post(`http://172.30.1.30:5557/map/node/connect`, {\n            node1: firstNodeId,\n            node2: clickedNode._id,\n            waypoints: waypoints\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n          // 가중치 계산 (거리의 합)\n          const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n          alert(`노드가 성공적으로 연결되었습니다. 전체 가중치: ${totalDistance.toFixed(2)}`);\n          setConnectionStep('idle');\n          setFirstNodeId(null);\n          setWaypoints([]);\n          setWaypointCount(0);\n          setCurrentWaypoint(0);\n          document.body.style.cursor = 'default'; // 커서 복구\n          fetchNodes(selectedMap._id);\n        } catch (error) {\n          console.error('노드 연결 중 오류 발생:', error);\n          alert('노드 연결에 실패했습니다.');\n        }\n      } else {\n        alert('유효한 노드를 클릭해주세요.');\n      }\n    } else if (isCreatingNode) {\n      // 노드 생성 로직\n      setNodeX(x);\n      setNodeY(y);\n      setIsCreatingNode(false);\n      setIsNodePopupOpen(true);\n      document.body.style.cursor = 'default';\n    } else if (isDeletingNode) {\n      // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n      let nodeToDelete = null;\n      for (let node of nodes) {\n        const {\n          x: nodeX,\n          y: nodeY\n        } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          nodeToDelete = node;\n          break;\n        }\n      }\n      if (nodeToDelete) {\n        const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n        if (confirmDelete) {\n          try {\n            const token = localStorage.getItem('token');\n            await axios.put(`http://172.30.1.30:5557/map/node/${nodeToDelete._id}`, {}, {\n              // 두 번째 인자를 빈 객체로 전달\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            alert('노드가 성공적으로 삭제되었습니다.');\n\n            // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n            await fetchNodes(selectedMap._id);\n            drawNodes(); // 삭제 후 노드를 다시 그리기\n\n            setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n          } catch (error) {\n            console.error('노드 삭제 중 오류 발생:', error);\n            alert('노드 삭제에 실패했습니다.');\n          }\n        }\n      } else {\n        alert('해당 위치에 노드를 찾을 수 없습니다.');\n      }\n    }\n  };\n\n  // 노드 간 총 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n    let totalDistance = 0;\n\n    // 거리 계산 함수\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n      // 웨이포인트 간 거리\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n      // 마지막 웨이포인트에서 노드2까지\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우 노드1과 노드2 간 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      fetchNodes(selectedMap._id); // 노드 목록 갱신\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async mapId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = e => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = e => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async e => {\n    e.preventDefault();\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      fetchMaps();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async e => {\n    e.preventDefault();\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = map => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n    try {\n      await axios.post('http://172.30.1.30:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"map-management-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LogoutButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toolbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCreateNodeMode,\n    className: \"create-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDeleteNodeMode,\n    className: \"delete-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC0AD\\uC81C\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleConnectNodeMode,\n    className: \"connect-node-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 11\n    }\n  }), \" \\uB178\\uB4DC \\uC5F0\\uACB0 \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-management-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"map-list-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uB9AC\\uC2A4\\uD2B8\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsUploadPopupOpen(true),\n    className: \"add-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPlus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"map-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 11\n    }\n  }, maps.map(map => /*#__PURE__*/React.createElement(\"li\", {\n    key: map._id,\n    className: `map-list-item ${(selectedMap === null || selectedMap === void 0 ? void 0 : selectedMap._id) === map._id ? 'selected-map' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: () => handleSelectMap(map),\n    className: \"map-list-item-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 17\n    }\n  }, map.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => openEditPopup(map),\n    className: \"edit-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteMap(map._id),\n    className: \"delete-map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")))), selectedMap && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5 \\uC124\\uBA85\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 15\n    }\n  }, selectedMap.description))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-and-node-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-image-container\",\n    style: {\n      position: 'relative'\n    },\n    onClick: handleMapClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 11\n    }\n  }, mapImage ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"map-canvas\",\n    style: {\n      cursor: isCreatingNode ? 'crosshair' : connectionStep !== 'idle' ? 'pointer' : 'default'\n    } // 커서 스타일 수정\n    ,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 751,\n      columnNumber: 15\n    }\n  }, \"\\uB9F5\\uC744 \\uC120\\uD0DD\\uD558\\uC5EC \\uC774\\uBBF8\\uC9C0\\uB97C \\uD655\\uC778\\uD558\\uC138\\uC694.\"), selectedMap && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"send-to-robots-button\",\n    onClick: handleSendMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 15\n    }\n  }, \"\\uB85C\\uBD07\\uC5D0\\uAC8C \\uC804\\uC1A1\")), /*#__PURE__*/React.createElement(NodeList, {\n    nodes: nodes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 11\n    }\n  }), \" \")), isNodePopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 11\n    }\n  }, \"\\uB178\\uB4DC \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 11\n    }\n  }, \"X: \", nodeX.toFixed(2), \", Y: \", nodeY.toFixed(2)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: nodeName,\n    onChange: e => setNodeName(e.target.value),\n    placeholder: \"\\uB178\\uB4DC \\uC774\\uB984 \\uC785\\uB825\",\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSubmitNode,\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 13\n    }\n  }, \"\\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsNodePopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 13\n    }\n  }, \"\\uCDE8\\uC18C\"))), isUploadPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUploadMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: uploadName,\n    onChange: e => setUploadName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: uploadDescription,\n    onChange: e => setUploadDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 13\n    }\n  }, \"\\uB9F5 \\uD30C\\uC77C (.pgm, .png, .jpg)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".pgm,.png,.jpg\",\n    onChange: handleFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 13\n    }\n  }, \"YAML \\uD30C\\uC77C (.yaml)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".yaml\",\n    onChange: handleYamlFileChange,\n    required: true,\n    className: \"popup-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsUploadPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), isEditPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 11\n    }\n  }, \"\\uB9F5 \\uC218\\uC815\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleUpdateMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: editName,\n    onChange: e => setEditName(e.target.value),\n    placeholder: \"\\uB9F5 \\uC774\\uB984\",\n    required: true,\n    className: \"popup-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: editDescription,\n    onChange: e => setEditDescription(e.target.value),\n    placeholder: \"\\uB9F5 \\uC124\\uBA85\",\n    required: true,\n    className: \"popup-textarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      marginTop: '10px',\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: isMonitored,\n    onChange: e => setIsMonitored(e.target.checked),\n    style: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 870,\n      columnNumber: 15\n    }\n  }), \"\\uBAA8\\uB2C8\\uD130\\uB9C1 \\uB9F5\\uC73C\\uB85C \\uC124\\uC815\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"popup-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 15\n    }\n  }, \"\\uC5C5\\uB370\\uC774\\uD2B8\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsEditPopupOpen(false),\n    className: \"popup-cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 15\n    }\n  }, \"\\uCDE8\\uC18C\")))), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'fixed',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 9\n    }\n  }, hoveredNode.name));\n}\nexport default Mapmanage;","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","FontAwesomeIcon","faEdit","faPlus","faLink","Navbar","LogoutButton","UserInfo","worldToMap","mapToWorld","NodeList","Mapmanage","maps","setMaps","selectedMap","setSelectedMap","editName","setEditName","editDescription","setEditDescription","isMonitored","setIsMonitored","uploadName","setUploadName","uploadDescription","setUploadDescription","mapFile","setMapFile","yamlFile","setYamlFile","mapImage","setMapImage","isUploadPopupOpen","setIsUploadPopupOpen","isEditPopupOpen","setIsEditPopupOpen","isCreatingNode","setIsCreatingNode","nodeX","setNodeX","nodeY","setNodeY","nodeName","setNodeName","isNodePopupOpen","setIsNodePopupOpen","canvasRef","mapImageRef","nodes","setNodes","isDeletingNode","setIsDeletingNode","imageNaturalWidth","setImageNaturalWidth","imageNaturalHeight","setImageNaturalHeight","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","x","y","connectionStep","setConnectionStep","waypointCount","setWaypointCount","currentWaypoint","setCurrentWaypoint","waypoints","setWaypoints","firstNodeId","setFirstNodeId","fetchMaps","token","localStorage","getItem","alert","response","get","headers","data","length","handleSelectMap","error","console","fetchNodes","mapId","status","map","name","description","_id","Authorization","responseType","imageUrl","URL","createObjectURL","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","imgWidth","width","imgHeight","height","clearRect","drawImage","drawNodes","forEach","node","connections","connection","connectedNode","find","n","startX","startY","endX","endY","strokeStyle","lineWidth","beginPath","moveTo","wp","wpX","wpY","lineTo","stroke","size","fillStyle","fillRect","startsWith","document","body","style","cursor","handleMouseMove","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","Math","sqrt","handleMouseLeave","handleConnectNodeMode","count","parseInt","prompt","isNaN","handleMapClick","clickX","clickY","clickedNode","newWaypoint","post","node1","node2","totalDistance","calculateTotalDistance","toFixed","nodeToDelete","confirmDelete","window","confirm","put","node1Id","node2Id","x1","y1","x2","y2","i","handleSubmitNode","trim","handleDeleteMap","handleFileChange","target","files","handleYamlFileChange","handleUpdateMap","preventDefault","_error$response","_error$response$data","message","handleUploadMap","formData","FormData","append","openEditPopup","handleCreateNodeMode","revokeObjectURL","handleDeleteNodeMode","handleSendMap","_error$response2","_error$response2$data","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","key","position","ref","onMouseMove","onMouseLeave","type","value","onChange","placeholder","onSubmit","required","accept","marginTop","color","checked","marginRight","backgroundColor","padding","borderRadius","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/Mapmanage.js"],"sourcesContent":["// src/components/MapManage/Mapmanage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faPlus, faLink } from '@fortawesome/free-solid-svg-icons'; // faLink 추가\n\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport './Mapmanage.css';\nimport { worldToMap, mapToWorld } from '../../utils/coordinateUtils';\nimport NodeList from './NodeList'; // NodeList 컴포넌트 임포트\n\nfunction Mapmanage() {\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null); // 선택된 맵 상태\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [isMonitored, setIsMonitored] = useState(false); // 모니터링 설정 체크박스 상태\n  const [uploadName, setUploadName] = useState('');\n  const [uploadDescription, setUploadDescription] = useState('');\n  const [mapFile, setMapFile] = useState(null);\n  const [yamlFile, setYamlFile] = useState(null);\n  const [mapImage, setMapImage] = useState(null);\n  const [isUploadPopupOpen, setIsUploadPopupOpen] = useState(false); // 업로드 팝업 상태\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // 수정 팝업 상태\n  const [isCreatingNode, setIsCreatingNode] = useState(false); // 노드 생성 모드\n  const [nodeX, setNodeX] = useState(null); // X 좌표\n  const [nodeY, setNodeY] = useState(null); // Y 좌표\n  const [nodeName, setNodeName] = useState(''); // 노드 이름\n  const [isNodePopupOpen, setIsNodePopupOpen] = useState(false); // 노드 팝업 상태\n  const canvasRef = useRef(null); // 캔버스 참조\n  const mapImageRef = useRef(null); // 지도 이미지 참조\n  const [nodes, setNodes] = useState([]); // 노드 목록 저장\n  const [isDeletingNode, setIsDeletingNode] = useState(false);\n\n  const [imageNaturalWidth, setImageNaturalWidth] = useState(null);\n  const [imageNaturalHeight, setImageNaturalHeight] = useState(null);\n\n  // Hover 상태 관리\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  // 연결 단계 관리\n  const [connectionStep, setConnectionStep] = useState('idle'); // 'idle', 'selectingFirstNode', 'selectingWaypoints', 'selectingSecondNode'\n  const [waypointCount, setWaypointCount] = useState(0); // 웨이포인트 개수\n  const [currentWaypoint, setCurrentWaypoint] = useState(0); // 현재 웨이포인트 수\n  const [waypoints, setWaypoints] = useState([]); // 웨이포인트 배열\n  const [firstNodeId, setFirstNodeId] = useState(null); // 첫 번째 노드 ID\n\n  // 맵 목록을 서버에서 가져오는 함수\n  const fetchMaps = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      const response = await axios.get('http://172.30.1.30:5557/map/maps', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setMaps(response.data);\n\n      // 맵이 하나 이상 있을 경우 첫 번째 맵을 자동으로 선택\n      if (response.data.length > 0) {\n        await handleSelectMap(response.data[0]);\n      }\n    } catch (error) {\n      console.error('맵을 가져오는 중 오류 발생:', error);\n      alert('맵을 가져오는 데 실패했습니다.');\n    }\n  };\n\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n\n  // 노드 목록을 서버에서 가져오는 함수\n  const fetchNodes = async (mapId) => {\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`);\n      if (response.status === 200) {\n        setNodes(response.data); // 노드 리스트 상태 업데이트\n      } else {\n        setNodes([]); // 실패 시 빈 배열로 초기화\n      }\n    } catch (error) {\n      console.error('노드를 가져오는 중 오류 발생:', error);\n      setNodes([]); // 오류 발생 시에도 빈 배열로 초기화\n      alert('노드를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 맵을 선택했을 때 호출되는 함수\n  const handleSelectMap = async (map) => {\n    setSelectedMap(map); // 맵 선택 상태 업데이트\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 지도 상태 설정\n\n    // 맵 이미지 가져오기\n    const token = localStorage.getItem('token');\n    try {\n      const response = await axios.get(`http://172.30.1.30:5557/map/file/${map._id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n        responseType: 'blob',\n      });\n      const imageUrl = URL.createObjectURL(response.data);\n      setMapImage(imageUrl); // 이미지 설정\n    } catch (error) {\n      console.error('맵 이미지를 가져오는 중 오류 발생:', error);\n      alert('맵 이미지를 가져오는 데 실패했습니다.');\n    }\n  };\n\n  // 이미지 로드 시 호출되는 함수 (지도 이미지를 캔버스에 그리기)\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapImage;\n\n    mapImageRef.current.onload = () => {\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      setImageNaturalWidth(imgWidth);\n      setImageNaturalHeight(imgHeight);\n\n      // 캔버스 크기 조정 및 기존 내용 클리어\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // 지도 이미지를 캔버스에 그리기\n      ctx.drawImage(mapImageRef.current, 0, 0, imgWidth, imgHeight);\n      drawNodes(); // 노드 그리기\n    };\n  };\n\n  // 노드를 캔버스에 그리는 함수\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (!canvas || !imageNaturalWidth || !imageNaturalHeight) return;\n\n    // 기존 노드 그리기 전에 캔버스를 클리어\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 지도 이미지 다시 그리기\n    ctx.drawImage(mapImageRef.current, 0, 0, imageNaturalWidth, imageNaturalHeight);\n\n    // 연결선을 먼저 그리기\n    nodes.forEach((node) => {\n      node.connections.forEach((connection) => {\n        const connectedNode = nodes.find(n => n._id === connection.node);\n        if (connectedNode) {\n          const { x: startX, y: startY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n          const { x: endX, y: endY } = worldToMap(connectedNode.x, connectedNode.y, imageNaturalWidth, imageNaturalHeight);\n\n          ctx.strokeStyle = 'blue';\n          ctx.lineWidth = 2;\n          ctx.beginPath();\n          ctx.moveTo(startX, startY);\n\n          // 웨이포인트가 있는 경우\n          if (connection.waypoints && connection.waypoints.length > 0) {\n            connection.waypoints.forEach((wp) => {\n              const { x: wpX, y: wpY } = worldToMap(wp.x, wp.y, imageNaturalWidth, imageNaturalHeight);\n              ctx.lineTo(wpX, wpY);\n            });\n          }\n\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n        }\n      });\n    });\n\n    // 노드 그리기\n    nodes.forEach((node) => {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(x - size / 2, y - size / 2, size, size);\n    });\n  };\n\n  // 이미지 로드 후 캔버스에 지도 그리기\n  useEffect(() => {\n    if (mapImage) {\n      loadMapImage();\n    }\n  }, [mapImage]);\n\n  // 맵 이미지와 selectedMap이 모두 설정된 후 노드 패치\n  useEffect(() => {\n    if (mapImage && selectedMap) {\n      fetchNodes(selectedMap._id);\n    }\n  }, [mapImage, selectedMap]);\n\n  // 노드 변경 시마다 노드를 다시 그리기\n  useEffect(() => {\n    if (canvasRef.current && mapImageRef.current) {\n      drawNodes(); // 노드를 다시 그리기\n    }\n  }, [nodes]);\n\n  // 노드 삭제 시 커서 복구\n  useEffect(() => {\n    if (!isDeletingNode && !connectionStep.startsWith('selecting')) {\n      document.body.style.cursor = 'default'; // 삭제 모드 및 연결 모드가 아닐 때 커서를 기본으로 복구\n    }\n  }, [isDeletingNode, connectionStep]);\n\n  // 마우스가 캔버스 위를 움직일 때 노드 호버 상태 업데이트\n  const handleMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    let foundNode = null;\n\n    for (let node of nodes) {\n      const { x, y } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n      const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n      if (distance < 5) { // 노드 반경 5px 내에 있을 때\n        foundNode = node;\n        break;\n      }\n    }\n\n    if (foundNode) {\n      setHoveredNode(foundNode);\n      setTooltipPosition({ x: e.clientX, y: e.clientY });\n    } else {\n      setHoveredNode(null);\n    }\n  };\n\n  // 마우스가 캔버스를 벗어났을 때 호버 상태 초기화\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n  };\n\n  // 연결 모드 활성화 함수 (웨이포인트 추가 프로세스 시작)\n  const handleConnectNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    const count = parseInt(prompt('추가할 웨이포인트의 개수를 입력하세요:', '0'), 10);\n    if (isNaN(count) || count < 0) {\n      alert('유효한 숫자를 입력해주세요.');\n      return;\n    }\n    setWaypointCount(count);\n    if (count > 0) {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    } else {\n      setConnectionStep('selectingFirstNode');\n      setWaypoints([]);\n      setCurrentWaypoint(0);\n      alert('첫 번째 노드를 선택하세요.');\n      document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n    }\n  };\n\n  // 맵 이미지 클릭 시 노드 생성, 삭제, 연결 또는 웨이포인트 추가\n  const handleMapClick = async (e) => {\n    if (!selectedMap) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n\n    const { x, y } = mapToWorld(clickX, clickY, imageNaturalWidth, imageNaturalHeight);\n\n    if (connectionStep === 'selectingFirstNode') {\n      // 첫 번째 노드 선택\n      let clickedNode = null;\n      for (let node of nodes) {\n        const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          clickedNode = node;\n          break;\n        }\n      }\n\n      if (clickedNode) {\n        setFirstNodeId(clickedNode._id);\n        if (waypointCount > 0) {\n          setConnectionStep('selectingWaypoints');\n          alert(`${waypointCount}개의 웨이포인트를 선택하세요.`);\n          document.body.style.cursor = 'crosshair'; // 웨이포인트 추가 모드 커서로 변경\n        } else {\n          setConnectionStep('selectingSecondNode');\n          alert('두 번째 노드를 선택하세요.');\n        }\n      } else {\n        alert('유효한 노드를 클릭해주세요.');\n      }\n    } else if (connectionStep === 'selectingWaypoints') {\n      // 웨이포인트 추가\n      const newWaypoint = { x, y };\n      setWaypoints([...waypoints, newWaypoint]);\n      setCurrentWaypoint(currentWaypoint + 1);\n\n      if (currentWaypoint + 1 === waypointCount) {\n        setConnectionStep('selectingSecondNode');\n        alert('두 번째 노드를 선택하세요.');\n        document.body.style.cursor = 'pointer'; // 연결 모드 커서로 변경\n      } else {\n        alert(`${currentWaypoint + 1}/${waypointCount} 웨이포인트가 추가되었습니다.`);\n      }\n    } else if (connectionStep === 'selectingSecondNode') {\n      // 두 번째 노드 선택\n      let clickedNode = null;\n      for (let node of nodes) {\n        const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          clickedNode = node;\n          break;\n        }\n      }\n\n      if (clickedNode) {\n        if (clickedNode._id === firstNodeId) {\n          alert('같은 노드를 선택했습니다. 다른 노드를 선택해주세요.');\n          return;\n        }\n        try {\n          const token = localStorage.getItem('token');\n          const response = await axios.post(`http://172.30.1.30:5557/map/node/connect`, {\n            node1: firstNodeId,\n            node2: clickedNode._id,\n            waypoints: waypoints\n          }, {\n            headers: { Authorization: `Bearer ${token}` }\n          });\n\n          // 가중치 계산 (거리의 합)\n          const totalDistance = calculateTotalDistance(firstNodeId, clickedNode._id, waypoints);\n          alert(`노드가 성공적으로 연결되었습니다. 전체 가중치: ${totalDistance.toFixed(2)}`);\n\n          setConnectionStep('idle');\n          setFirstNodeId(null);\n          setWaypoints([]);\n          setWaypointCount(0);\n          setCurrentWaypoint(0);\n          document.body.style.cursor = 'default'; // 커서 복구\n          fetchNodes(selectedMap._id);\n        } catch (error) {\n          console.error('노드 연결 중 오류 발생:', error);\n          alert('노드 연결에 실패했습니다.');\n        }\n      } else {\n        alert('유효한 노드를 클릭해주세요.');\n      }\n    } else if (isCreatingNode) {\n      // 노드 생성 로직\n      setNodeX(x);\n      setNodeY(y);\n      setIsCreatingNode(false);\n      setIsNodePopupOpen(true);\n      document.body.style.cursor = 'default';\n    } else if (isDeletingNode) {\n      // 클릭한 위치 근처에 있는 노드를 찾아 삭제\n      let nodeToDelete = null;\n      for (let node of nodes) {\n        const { x: nodeX, y: nodeY } = worldToMap(node.x, node.y, imageNaturalWidth, imageNaturalHeight);\n        const distance = Math.sqrt((clickX - nodeX) ** 2 + (clickY - nodeY) ** 2);\n        if (distance < 5) {\n          nodeToDelete = node;\n          break;\n        }\n      }\n\n      if (nodeToDelete) {\n        const confirmDelete = window.confirm(`노드 \"${nodeToDelete.name}\"를 삭제하시겠습니까?`);\n        if (confirmDelete) {\n          try {\n            const token = localStorage.getItem('token');\n            await axios.put(`http://172.30.1.30:5557/map/node/${nodeToDelete._id}`, {}, { // 두 번째 인자를 빈 객체로 전달\n              headers: { Authorization: `Bearer ${token}` },\n            });\n            alert('노드가 성공적으로 삭제되었습니다.');\n\n            // 노드 목록을 다시 패치하고, 노드를 다시 그리기\n            await fetchNodes(selectedMap._id);\n            drawNodes(); // 삭제 후 노드를 다시 그리기\n\n            setIsDeletingNode(false); // 삭제 후 삭제 모드 종료\n          } catch (error) {\n            console.error('노드 삭제 중 오류 발생:', error);\n            alert('노드 삭제에 실패했습니다.');\n          }\n        }\n      } else {\n        alert('해당 위치에 노드를 찾을 수 없습니다.');\n      }\n    }\n  };\n\n  // 노드 간 총 거리 계산 함수\n  const calculateTotalDistance = (node1Id, node2Id, waypoints) => {\n    const node1 = nodes.find(n => n._id === node1Id);\n    const node2 = nodes.find(n => n._id === node2Id);\n    if (!node1 || !node2) return 0;\n\n    let totalDistance = 0;\n\n    // 거리 계산 함수\n    const distance = (x1, y1, x2, y2) => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n    // 노드1에서 첫 번째 웨이포인트까지\n    if (waypoints.length > 0) {\n      totalDistance += distance(node1.x, node1.y, waypoints[0].x, waypoints[0].y);\n      // 웨이포인트 간 거리\n      for (let i = 0; i < waypoints.length - 1; i++) {\n        totalDistance += distance(waypoints[i].x, waypoints[i].y, waypoints[i + 1].x, waypoints[i + 1].y);\n      }\n      // 마지막 웨이포인트에서 노드2까지\n      totalDistance += distance(waypoints[waypoints.length - 1].x, waypoints[waypoints.length - 1].y, node2.x, node2.y);\n    } else {\n      // 웨이포인트가 없는 경우 노드1과 노드2 간 거리\n      totalDistance += distance(node1.x, node1.y, node2.x, node2.y);\n    }\n\n    return totalDistance;\n  };\n\n  // 노드 생성을 제출하는 함수\n  const handleSubmitNode = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    if (nodeName.trim().length === 0) {\n      alert('노드 이름을 입력해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5557/map/nodes', {\n        name: nodeName,\n        x: nodeX,\n        y: nodeY,\n        mapId: selectedMap._id,\n      }, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      alert('노드가 성공적으로 생성되었습니다.');\n      setIsNodePopupOpen(false);\n      setNodeName(''); // 입력 필드 초기화\n      setNodeX(null);\n      setNodeY(null);\n      fetchNodes(selectedMap._id); // 노드 목록 갱신\n    } catch (error) {\n      console.error('노드 생성 중 오류 발생:', error);\n      alert('노드 생성에 실패했습니다.');\n    }\n  };\n\n  // 맵 삭제하는 함수\n  const handleDeleteMap = async (mapId) => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    const confirmDelete = window.confirm('이 맵을 삭제하시겠습니까?');\n    if (!confirmDelete) return;\n\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/delete/${mapId}`, {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      alert('맵이 성공적으로 삭제되었습니다.');\n      fetchMaps();\n      if (selectedMap && selectedMap._id === mapId) {\n        setSelectedMap(null); // 선택된 맵을 삭제한 경우 초기화\n        setMapImage(null); // 맵 이미지 초기화\n        setNodes([]); // 노드 목록 초기화\n      }\n    } catch (error) {\n      console.error('맵 삭제 중 오류 발생:', error);\n      alert('맵 삭제에 실패했습니다.');\n    }\n  };\n\n  // 맵 파일 변경 시 호출되는 함수\n  const handleFileChange = (e) => {\n    setMapFile(e.target.files[0]);\n  };\n\n  // YAML 파일 변경 시 호출되는 함수\n  const handleYamlFileChange = (e) => {\n    setYamlFile(e.target.files[0]);\n  };\n\n  // 맵 업데이트를 처리하는 함수\n  const handleUpdateMap = async (e) => {\n    e.preventDefault();\n\n    if (editName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://172.30.1.30:5557/map/update/${selectedMap._id}`, {\n        name: editName,\n        description: editDescription,\n        isMonitored // 모니터링 지도 상태 포함\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 성공적으로 업데이트되었습니다.');\n      setIsEditPopupOpen(false); // 수정 후 팝업 닫기\n      fetchMaps();\n    } catch (error) {\n      console.error('맵 업데이트 중 오류 발생:', error);\n      alert(`맵 업데이트 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  // 맵 업로드를 처리하는 함수\n  const handleUploadMap = async (e) => {\n    e.preventDefault();\n\n    if (uploadName.length < 2) {\n      alert('맵 이름은 최소 2자 이상이어야 합니다.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', uploadName);\n    formData.append('description', uploadDescription);\n    formData.append('file', mapFile);\n    formData.append('yaml', yamlFile);\n\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5557/map/upload', formData, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('맵이 성공적으로 업로드되었습니다.');\n      setIsUploadPopupOpen(false); // 업로드 후 팝업 닫기\n      fetchMaps();\n    } catch (error) {\n      console.error('맵 업로드 중 오류 발생:', error);\n      alert('맵 업로드에 실패했습니다.');\n    }\n  };\n\n  // 맵 수정 팝업을 여는 함수\n  const openEditPopup = (map) => {\n    setSelectedMap(map);\n    setEditName(map.name);\n    setEditDescription(map.description);\n    setIsMonitored(map.isMonitored || false); // 모니터링 상태 설정\n    setIsEditPopupOpen(true); // 수정 팝업 열기\n  };\n\n  // 노드 생성 모드를 활성화하는 함수\n  const handleCreateNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsCreatingNode(true);\n    document.body.style.cursor = 'crosshair'; // 마우스 커서를 십자가 모양으로 변경\n  };\n\n  // URL 객체 해제를 위한 useEffect\n  useEffect(() => {\n    return () => {\n      if (mapImage) {\n        URL.revokeObjectURL(mapImage);\n      }\n    };\n  }, [mapImage]);\n\n  // 노드 삭제 모드를 활성화하는 함수\n  const handleDeleteNodeMode = () => {\n    if (!selectedMap) {\n      alert('먼저 맵을 선택해주세요.');\n      return;\n    }\n    setIsDeletingNode(true);\n    document.body.style.cursor = 'not-allowed'; // 커서를 삭제 모드로 변경\n  };\n\n  // Send to Robots 버튼과 관련된 함수 추가\n  const handleSendMap = async () => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      alert('토큰이 없습니다. 다시 로그인해주세요.');\n      return;\n    }\n\n    try {\n      await axios.post('http://172.30.1.30:5559/robot/send_map', {}, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('맵이 로봇에게 성공적으로 전송되었습니다.');\n    } catch (error) {\n      console.error('맵을 로봇에게 전송하는 중 오류 발생:', error);\n      alert(`맵을 로봇에게 전송하는 중 오류 발생: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"map-management-page\">\n      {/* 상단 네비게이션 바 */}\n      <header className=\"map-management-header\">\n        <UserInfo />\n        <LogoutButton />\n      </header>\n      <Navbar />\n\n      {/* 툴바: 네비게이션 아래에 위치 */}\n      <div className=\"toolbar\">\n        <button onClick={handleCreateNodeMode} className=\"create-node-button\">\n          <FontAwesomeIcon icon={faPlus} /> 노드 생성\n        </button>\n        <button onClick={handleDeleteNodeMode} className=\"delete-node-button\">\n          <FontAwesomeIcon icon={faEdit} /> 노드 삭제\n        </button>\n        <button onClick={handleConnectNodeMode} className=\"connect-node-button\">\n          <FontAwesomeIcon icon={faLink} /> 노드 연결 {/* \"노드 연결\" 버튼 추가 */}\n        </button>\n      </div>\n\n      {/* 맵 리스트와 이미지 컨텐츠 */}\n      <div className=\"map-management-content\">\n        {/* 맵 리스트 컨테이너 */}\n        <div className=\"map-list-container\">\n          <h2 className=\"map-list-header\">\n            맵 리스트\n            <button\n              onClick={() => setIsUploadPopupOpen(true)}\n              className=\"add-map-button\"\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </button>\n          </h2>\n          <ul className=\"map-list\">\n            {maps.map((map) => (\n              <li\n                key={map._id}\n                className={`map-list-item ${selectedMap?._id === map._id ? 'selected-map' : ''}`}\n              >\n                <span\n                  onClick={() => handleSelectMap(map)}\n                  className=\"map-list-item-name\"\n                >\n                  {map.name}\n                </span>\n                <button\n                  onClick={() => openEditPopup(map)}\n                  className=\"edit-map-button\"\n                >\n                  <FontAwesomeIcon icon={faEdit} />\n                </button>\n                <button\n                  onClick={() => handleDeleteMap(map._id)}\n                  className=\"delete-map-button\"\n                >\n                  &times;\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {selectedMap && (\n            <div className=\"map-description\">\n              <h3>맵 설명</h3>\n              <p>{selectedMap.description}</p>\n            </div>\n          )}\n        </div>\n\n        {/* 지도 이미지와 노드 렌더링 및 노드 리스트 영역 */}\n        <div className=\"map-image-and-node-list\">\n          {/* 지도 이미지와 노드 렌더링 영역 */}\n          <div\n            className=\"map-image-container\"\n            style={{ position: 'relative' }}\n            onClick={handleMapClick}\n          >\n            {mapImage ? (\n              <canvas\n                ref={canvasRef}\n                className=\"map-canvas\"\n                style={{ cursor: isCreatingNode ? 'crosshair' : connectionStep !== 'idle' ? 'pointer' : 'default' }} // 커서 스타일 수정\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n              />\n            ) : (\n              <p>맵을 선택하여 이미지를 확인하세요.</p>\n            )}\n\n            {/* 플로팅 Send to Robots 버튼 추가 */}\n            {selectedMap && (\n              <button\n                className=\"send-to-robots-button\"\n                onClick={handleSendMap}\n              >\n                로봇에게 전송\n              </button>\n            )}\n          </div>\n\n          {/* 오른쪽에 노드 목록 표시 */}\n          <NodeList nodes={nodes} /> {/* NodeList 컴포넌트 사용 */}\n        </div>\n      </div>\n\n      {/* Node 생성 팝업 */}\n      {isNodePopupOpen && (\n        <div className=\"popup-container\">\n          <h3>노드 생성</h3>\n          <p>X: {nodeX.toFixed(2)}, Y: {nodeY.toFixed(2)}</p>\n          <input\n            type=\"text\"\n            value={nodeName}\n            onChange={(e) => setNodeName(e.target.value)}\n            placeholder=\"노드 이름 입력\"\n            className=\"popup-input\"\n          />\n          <div className=\"popup-button-container\">\n            <button onClick={handleSubmitNode} className=\"popup-submit-button\">\n              생성\n            </button>\n            <button\n              onClick={() => setIsNodePopupOpen(false)}\n              className=\"popup-cancel-button\"\n            >\n              취소\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Map Upload Popup */}\n      {isUploadPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 업로드</h3>\n          <form onSubmit={handleUploadMap}>\n            <input\n              type=\"text\"\n              value={uploadName}\n              onChange={(e) => setUploadName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={uploadDescription}\n              onChange={(e) => setUploadDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            <label>맵 파일 (.pgm, .png, .jpg)</label>\n            <input\n              type=\"file\"\n              accept=\".pgm,.png,.jpg\"\n              onChange={handleFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <label>YAML 파일 (.yaml)</label>\n            <input\n              type=\"file\"\n              accept=\".yaml\"\n              onChange={handleYamlFileChange}\n              required\n              className=\"popup-file-input\"\n            />\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업로드\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsUploadPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Edit Map Popup */}\n      {isEditPopupOpen && (\n        <div className=\"popup-container\">\n          <h3>맵 수정</h3>\n          <form onSubmit={handleUpdateMap}>\n            <input\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              placeholder=\"맵 이름\"\n              required\n              className=\"popup-input\"\n            />\n            <textarea\n              value={editDescription}\n              onChange={(e) => setEditDescription(e.target.value)}\n              placeholder=\"맵 설명\"\n              required\n              className=\"popup-textarea\"\n            />\n            {/* 모니터링 지도 설정 체크박스 추가 */}\n            <label style={{ marginTop: '10px', color: '#333' }}>\n              <input\n                type=\"checkbox\"\n                checked={isMonitored}\n                onChange={(e) => setIsMonitored(e.target.checked)}\n                style={{ marginRight: '10px' }}\n              />\n              모니터링 맵으로 설정\n            </label>\n            <div className=\"popup-button-container\">\n              <button type=\"submit\" className=\"popup-submit-button\">\n                업데이트\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setIsEditPopupOpen(false)}\n                className=\"popup-cancel-button\"\n              >\n                취소\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {/* Hover Tooltip */}\n      {hoveredNode && (\n        <div\n          className=\"tooltip\"\n          style={{\n            position: 'fixed',\n            top: `${tooltipPosition.y + 10}px`,\n            left: `${tooltipPosition.x + 10}px`,\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            padding: '5px 10px',\n            borderRadius: '4px',\n            pointerEvents: 'none',\n            zIndex: 1000,\n            fontSize: '12px',\n          }}\n        >\n          {hoveredNode.name}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Mapmanage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}