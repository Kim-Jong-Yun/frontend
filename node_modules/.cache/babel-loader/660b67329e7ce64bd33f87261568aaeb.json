{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\nfunction MapComponent({\n  robots,\n  mapUrl,\n  mapId\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n      drawRobots();\n      drawNodes();\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    nodes.forEach(node => {\n      const {\n        x,\n        y,\n        name\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - size / 2, mapY - size / 2, size, size);\n    });\n  };\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = {\n          mapX,\n          mapY,\n          robotColor\n        };\n      }\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n  const handleMouseMove = event => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect(); // canvas의 위치와 크기 정보\n\n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n    let foundNode = null;\n    nodes.forEach(node => {\n      const {\n        x,\n        y\n      } = node;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n      if (distance < 5) {\n        foundNode = node;\n        setTooltipPosition({\n          x: mapX + rect.left,\n          y: mapY + rect.top\n        }); // canvas 위치를 기준으로 툴팁 위치 설정\n      }\n    });\n    setHoveredNode(foundNode);\n  };\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n  };\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n    }\n  }, [mapUrl, mapId]);\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n      drawNodes();\n    }\n  }, [robots, nodes, hoveredNode]);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener('mousemove', handleMouseMove);\n      canvas.addEventListener('mouseleave', handleMouseLeave);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n        canvas.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, [nodes]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"), hoveredNode && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip\",\n    style: {\n      position: 'absolute',\n      top: `${tooltipPosition.y + 10}px`,\n      left: `${tooltipPosition.x + 10}px`,\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      color: 'white',\n      padding: '5px 10px',\n      borderRadius: '4px',\n      pointerEvents: 'none',\n      zIndex: 1000,\n      fontSize: '12px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, hoveredNode.name));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","gsap","axios","MapComponent","robots","mapUrl","mapId","canvasRef","mapImageRef","robotRefs","nodes","setNodes","hoveredNode","setHoveredNode","tooltipPosition","setTooltipPosition","x","y","mapResolution","mapOrigin","fetchNodes","token","localStorage","getItem","alert","window","location","href","response","get","headers","Authorization","data","error","console","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawRobots","drawNodes","onerror","err","forEach","node","name","mapX","mapY","worldToMap","size","fillStyle","fillRect","robot","index","_robot$status","_robot$status2","_robot$status3","robotColor","status","state","to","duration","ease","onUpdate","beginPath","arc","Math","PI","fill","mapImage","mapWidth","mapHeight","handleMouseMove","event","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","foundNode","distance","sqrt","handleMouseLeave","addEventListener","removeEventListener","createElement","className","style","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","backgroundColor","color","padding","borderRadius","pointerEvents","zIndex","fontSize"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport gsap from 'gsap';\nimport axios from 'axios';\n\nfunction MapComponent({ robots, mapUrl, mapId }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]);\n  const [nodes, setNodes] = useState([]);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const mapResolution = 0.05;\n  const mapOrigin = [-10.0, -10.0];\n\n  const fetchNodes = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('토큰이 없습니다. 다시 로그인해주세요.');\n        window.location.href = '/login';\n        return;\n      }\n\n      const response = await axios.get(`http://172.30.1.30:5557/map/nodes/${mapId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setNodes(response.data);\n    } catch (error) {\n      console.error('노드 정보를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      drawRobots();\n      drawNodes();\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  const drawNodes = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    nodes.forEach((node) => {\n      const { x, y, name } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      const size = 10;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(mapX - size / 2, mapY - size / 2, size, size);\n    });\n  };\n\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    robots.forEach((robot, index) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = { mapX, mapY, robotColor };\n      }\n\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution;\n    return { mapX, mapY };\n  };\n\n  const handleMouseMove = (event) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect(); // canvas의 위치와 크기 정보\n  \n    const mouseX = event.clientX - rect.left;\n    const mouseY = event.clientY - rect.top;\n  \n    let foundNode = null;\n  \n    nodes.forEach((node) => {\n      const { x, y } = node;\n      const { mapX, mapY } = worldToMap(x, y);\n      const distance = Math.sqrt((mouseX - mapX) ** 2 + (mouseY - mapY) ** 2);\n  \n      if (distance < 5) {\n        foundNode = node;\n        setTooltipPosition({ x: mapX + rect.left, y: mapY + rect.top }); // canvas 위치를 기준으로 툴팁 위치 설정\n      }\n    });\n  \n    setHoveredNode(foundNode);\n  };\n  \n\n  const handleMouseLeave = () => {\n    setHoveredNode(null);\n  };\n\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n      fetchNodes();\n    }\n  }, [mapUrl, mapId]);\n\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n      drawNodes();\n    }\n  }, [robots, nodes, hoveredNode]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener('mousemove', handleMouseMove);\n      canvas.addEventListener('mouseleave', handleMouseLeave);\n      return () => {\n        canvas.removeEventListener('mousemove', handleMouseMove);\n        canvas.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, [nodes]);\n\n  return (\n    <div className=\"map-canvas-container\" style={{ position: 'relative' }}>\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n      {hoveredNode && (\n        <div\n          className=\"tooltip\"\n          style={{\n            position: 'absolute',\n            top: `${tooltipPosition.y + 10}px`,\n            left: `${tooltipPosition.x + 10}px`,\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            padding: '5px 10px',\n            borderRadius: '4px',\n            pointerEvents: 'none',\n            zIndex: 1000,\n            fontSize: '12px',\n          }}\n        >\n          {hoveredNode.name}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}