{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef } from 'react';\nimport gsap from 'gsap';\nfunction MapComponent({\n  robots,\n  mapUrl\n}) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n    mapImageRef.current.onload = () => {\n      // 컨테이너 크기와 이미지 비율에 맞춰 캔버스 크기 설정\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n      let drawWidth, drawHeight;\n\n      // 이미지 비율에 따라 캔버스에 맞게 크기를 조정\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      // 지도 이미지를 그립니다.\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      // 초기 로봇 위치를 그립니다.\n      drawRobots();\n    };\n    mapImageRef.current.onerror = err => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    // 캔버스를 지우고 지도 이미지를 다시 그립니다.\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 로봇들을 지도 위에 그립니다.\n    robots.forEach((robot, index) => {\n      var _robot$status, _robot$status2, _robot$status3;\n      const {\n        x,\n        y\n      } = robot.location;\n      const {\n        mapX,\n        mapY\n      } = worldToMap(x, y);\n      let robotColor = 'gray';\n      if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n        robotColor = 'blue';\n      } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 참조 저장\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = {\n          mapX,\n          mapY,\n          robotColor\n        };\n      }\n\n      // GSAP를 사용하여 로봇의 이동 애니메이션 처리\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    // 월드 좌표를 맵 좌표로 변환 (원점과 해상도 적용)\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution; // Y 좌표는 캔버스 상하 반전 처리\n    return {\n      mapX,\n      mapY\n    };\n  };\n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","gsap","MapComponent","robots","mapUrl","canvasRef","mapImageRef","robotRefs","mapResolution","mapOrigin","loadMapImage","canvas","current","ctx","getContext","Image","src","onload","containerWidth","parentElement","clientWidth","containerHeight","clientHeight","imgWidth","width","imgHeight","height","imgAspectRatio","containerAspectRatio","drawWidth","drawHeight","clearRect","drawImage","drawRobots","onerror","err","console","error","forEach","robot","index","_robot$status","_robot$status2","_robot$status3","x","y","location","mapX","mapY","worldToMap","robotColor","status","state","to","duration","ease","onUpdate","fillStyle","beginPath","arc","Math","PI","fill","mapImage","mapWidth","mapHeight","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport gsap from 'gsap';\n\nfunction MapComponent({ robots, mapUrl }) {\n  const canvasRef = useRef(null);\n  const mapImageRef = useRef(null);\n  const robotRefs = useRef([]); // 각 로봇의 참조 저장\n\n  const mapResolution = 0.05; // 해상도 값 (픽셀당 미터)\n  const mapOrigin = [-10.0, -10.0]; // 원점 좌표 (x, y)\n\n  // 지도 이미지를 로드하고 그리는 함수\n  const loadMapImage = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    mapImageRef.current = new Image();\n    mapImageRef.current.src = mapUrl;\n\n    mapImageRef.current.onload = () => {\n      // 컨테이너 크기와 이미지 비율에 맞춰 캔버스 크기 설정\n      const containerWidth = canvas.parentElement.clientWidth;\n      const containerHeight = canvas.parentElement.clientHeight;\n      const imgWidth = mapImageRef.current.width;\n      const imgHeight = mapImageRef.current.height;\n      const imgAspectRatio = imgWidth / imgHeight;\n      const containerAspectRatio = containerWidth / containerHeight;\n\n      let drawWidth, drawHeight;\n\n      // 이미지 비율에 따라 캔버스에 맞게 크기를 조정\n      if (imgAspectRatio > containerAspectRatio) {\n        drawWidth = containerWidth;\n        drawHeight = containerWidth / imgAspectRatio;\n      } else {\n        drawHeight = containerHeight;\n        drawWidth = containerHeight * imgAspectRatio;\n      }\n\n      canvas.width = drawWidth;\n      canvas.height = drawHeight;\n\n      // 지도 이미지를 그립니다.\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(mapImageRef.current, 0, 0, drawWidth, drawHeight);\n\n      // 초기 로봇 위치를 그립니다.\n      drawRobots();\n    };\n\n    mapImageRef.current.onerror = (err) => {\n      console.error('지도 이미지를 로드하는 중 오류 발생:', err);\n    };\n  };\n\n  // 로봇들을 그리는 함수\n  const drawRobots = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!mapImageRef.current) return;\n\n    // 캔버스를 지우고 지도 이미지를 다시 그립니다.\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(mapImageRef.current, 0, 0, canvas.width, canvas.height);\n\n    // 로봇들을 지도 위에 그립니다.\n    robots.forEach((robot, index) => {\n      const { x, y } = robot.location;\n      const { mapX, mapY } = worldToMap(x, y);\n\n      let robotColor = 'gray';\n      if (robot.status?.state === 'Tasking') {\n        robotColor = 'blue';\n      } else if (robot.status?.state === 'Waiting') {\n        robotColor = 'yellow';\n      } else if (robot.status?.state === 'Error') {\n        robotColor = 'red';\n      }\n\n      // 로봇 참조 저장\n      if (!robotRefs.current[index]) {\n        robotRefs.current[index] = { mapX, mapY, robotColor };\n      }\n\n      // GSAP를 사용하여 로봇의 이동 애니메이션 처리\n      gsap.to(robotRefs.current[index], {\n        mapX,\n        mapY,\n        duration: 1.5,\n        ease: 'power2.out',\n        onUpdate: () => {\n          ctx.fillStyle = robotRefs.current[index].robotColor;\n          ctx.beginPath();\n          ctx.arc(robotRefs.current[index].mapX, robotRefs.current[index].mapY, 5, 0, 2 * Math.PI);\n          ctx.fill();\n        },\n      });\n    });\n  };\n\n  // 월드 좌표를 맵 좌표로 변환하는 함수 (해상도와 원점 고려)\n  const worldToMap = (x, y) => {\n    const mapImage = mapImageRef.current;\n    const mapWidth = mapImage.width;\n    const mapHeight = mapImage.height;\n\n    // 월드 좌표를 맵 좌표로 변환 (원점과 해상도 적용)\n    const mapX = (x - mapOrigin[0]) / mapResolution;\n    const mapY = mapHeight - (y - mapOrigin[1]) / mapResolution; // Y 좌표는 캔버스 상하 반전 처리\n    return { mapX, mapY };\n  };\n\n  // 지도 이미지는 한 번만 로드\n  useEffect(() => {\n    if (mapUrl) {\n      loadMapImage();\n    }\n  }, [mapUrl]);\n\n  // 로봇 위치가 변경될 때마다 업데이트\n  useEffect(() => {\n    if (mapImageRef.current) {\n      drawRobots();\n    }\n  }, [robots]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}