{"ast":null,"code":"/*\n\tThe MIT License (MIT)\n\n\tCopyright (c) 2016 Meetecho\n\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the \"Software\"),\n\tto deal in the Software without restriction, including without limitation\n\tthe rights to use, copy, modify, merge, publish, distribute, sublicense,\n\tand/or sell copies of the Software, and to permit persons to whom the\n\tSoftware is furnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included\n\tin all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\tOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\tTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\tOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\tARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\tOTHER DEALINGS IN THE SOFTWARE.\n */\n\n// eslint-disable-next-line no-unused-vars\nvar Janus = function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else if (typeof window === 'object') {\n    return factory();\n  }\n}(function () {\n  // List of sessions\n  Janus.sessions = new Map();\n  Janus.isExtensionEnabled = function () {\n    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n      // No need for the extension, getDisplayMedia is supported\n      return true;\n    }\n    if (window.navigator.userAgent.match('Chrome')) {\n      let chromever = parseInt(window.navigator.userAgent.match(/Chrome\\/(.*) /)[1], 10);\n      let maxver = 33;\n      if (window.navigator.userAgent.match('Linux')) maxver = 35; // \"known\" crash in chrome 34 and 35 on linux\n      if (chromever >= 26 && chromever <= maxver) {\n        // Older versions of Chrome don't support this extension-based approach, so lie\n        return true;\n      }\n      return Janus.extension.isInstalled();\n    } else {\n      // Firefox and others, no need for the extension (but this doesn't mean it will work)\n      return true;\n    }\n  };\n  var defaultExtension = {\n    // Screensharing Chrome Extension ID\n    extensionId: 'hapfgfdkleiggjjpfpenajgdnfckjpaj',\n    isInstalled: function () {\n      return document.querySelector('#janus-extension-installed') !== null;\n    },\n    getScreen: function (callback) {\n      let pending = window.setTimeout(function () {\n        let error = new Error('NavigatorUserMediaError');\n        error.name = 'The required Chrome extension is not installed: click <a href=\"#\">here</a> to install it. (NOTE: this will need you to refresh the page)';\n        return callback(error);\n      }, 1000);\n      this.cache[pending] = callback;\n      window.postMessage({\n        type: 'janusGetScreen',\n        id: pending\n      }, '*');\n    },\n    init: function () {\n      let cache = {};\n      this.cache = cache;\n      // Wait for events from the Chrome Extension\n      window.addEventListener('message', function (event) {\n        if (event.origin != window.location.origin) return;\n        if (event.data.type == 'janusGotScreen' && cache[event.data.id]) {\n          let callback = cache[event.data.id];\n          delete cache[event.data.id];\n          if (event.data.sourceId === '') {\n            // user canceled\n            let error = new Error('NavigatorUserMediaError');\n            error.name = 'You cancelled the request for permission, giving up...';\n            callback(error);\n          } else {\n            callback(null, event.data.sourceId);\n          }\n        } else if (event.data.type == 'janusGetScreenPending') {\n          window.clearTimeout(event.data.id);\n        }\n      });\n    }\n  };\n  Janus.useDefaultDependencies = function (deps) {\n    let f = deps && deps.fetch || fetch;\n    let p = deps && deps.Promise || Promise;\n    let socketCls = deps && deps.WebSocket || WebSocket;\n    return {\n      newWebSocket: function (server, proto) {\n        return new socketCls(server, proto);\n      },\n      extension: deps && deps.extension || defaultExtension,\n      isArray: function (arr) {\n        return Array.isArray(arr);\n      },\n      webRTCAdapter: deps && deps.adapter || adapter,\n      httpAPICall: function (url, options) {\n        let fetchOptions = {\n          method: options.verb,\n          headers: {\n            'Accept': 'application/json, text/plain, */*'\n          },\n          cache: 'no-cache'\n        };\n        if (options.verb === \"POST\") {\n          fetchOptions.headers['Content-Type'] = 'application/json';\n        }\n        if (typeof options.withCredentials !== 'undefined') {\n          fetchOptions.credentials = options.withCredentials === true ? 'include' : options.withCredentials ? options.withCredentials : 'omit';\n        }\n        if (options.body) {\n          fetchOptions.body = JSON.stringify(options.body);\n        }\n        let fetching = f(url, fetchOptions).catch(function (error) {\n          return p.reject({\n            message: 'Probably a network error, is the server down?',\n            error: error\n          });\n        });\n\n        /*\n        * fetch() does not natively support timeouts.\n        * Work around this by starting a timeout manually, and racing it agains the fetch() to see which thing resolves first.\n        */\n\n        if (options.timeout) {\n          // eslint-disable-next-line no-unused-vars\n          let timeout = new p(function (resolve, reject) {\n            let timerId = setTimeout(function () {\n              clearTimeout(timerId);\n              return reject({\n                message: 'Request timed out',\n                timeout: options.timeout\n              });\n            }, options.timeout);\n          });\n          fetching = p.race([fetching, timeout]);\n        }\n        fetching.then(function (response) {\n          if (response.ok) {\n            if (typeof options.success === typeof Janus.noop) {\n              return response.json().then(function (parsed) {\n                try {\n                  options.success(parsed);\n                } catch (error) {\n                  Janus.error('Unhandled httpAPICall success callback error', error);\n                }\n              }, function (error) {\n                return p.reject({\n                  message: 'Failed to parse response body',\n                  error: error,\n                  response: response\n                });\n              });\n            }\n          } else {\n            return p.reject({\n              message: 'API call failed',\n              response: response\n            });\n          }\n        }).catch(function (error) {\n          if (typeof options.error === typeof Janus.noop) {\n            options.error(error.message || '<< internal error >>', error);\n          }\n        });\n        return fetching;\n      }\n    };\n  };\n  Janus.useOldDependencies = function (deps) {\n    let jq = deps && deps.jQuery || jQuery;\n    let socketCls = deps && deps.WebSocket || WebSocket;\n    return {\n      newWebSocket: function (server, proto) {\n        return new socketCls(server, proto);\n      },\n      isArray: function (arr) {\n        return jq.isArray(arr);\n      },\n      extension: deps && deps.extension || defaultExtension,\n      webRTCAdapter: deps && deps.adapter || adapter,\n      httpAPICall: function (url, options) {\n        let payload = typeof options.body !== 'undefined' ? {\n          contentType: 'application/json',\n          data: JSON.stringify(options.body)\n        } : {};\n        let credentials = typeof options.withCredentials !== 'undefined' ? {\n          xhrFields: {\n            withCredentials: options.withCredentials\n          }\n        } : {};\n        return jq.ajax(jq.extend(payload, credentials, {\n          url: url,\n          type: options.verb,\n          cache: false,\n          dataType: 'json',\n          async: options.async,\n          timeout: options.timeout,\n          success: function (result) {\n            if (typeof options.success === typeof Janus.noop) {\n              options.success(result);\n            }\n          },\n          // eslint-disable-next-line no-unused-vars\n          error: function (xhr, status, err) {\n            if (typeof options.error === typeof Janus.noop) {\n              options.error(status, err);\n            }\n          }\n        }));\n      }\n    };\n  };\n\n  // Helper function to convert a deprecated media object to a tracks array\n  Janus.mediaToTracks = function (media) {\n    let tracks = [];\n    if (!media) {\n      // Default is bidirectional audio and video, using default devices\n      tracks.push({\n        type: 'audio',\n        capture: true,\n        recv: true\n      });\n      tracks.push({\n        type: 'video',\n        capture: true,\n        recv: true\n      });\n    } else {\n      if (!media.keepAudio && media.audio !== false && (typeof media.audio === 'undefined' || media.audio || media.audioSend || media.audioRecv || media.addAudio || media.replaceAudio || media.removeAudio)) {\n        // We may need an audio track\n        let track = {\n          type: 'audio'\n        };\n        if (media.removeAudio) {\n          track.remove = true;\n        } else {\n          if (media.addAudio) track.add = true;else if (media.replaceAudio) track.replace = true;\n          // Check if we need to capture an audio device\n          if (media.audioSend !== false) track.capture = media.audio || true;\n          // Check if we need to receive audio\n          if (media.audioRecv !== false) track.recv = true;\n        }\n        // Add an audio track if needed\n        if (track.remove || track.capture || track.recv) tracks.push(track);\n      }\n      if (!media.keepVideo && media.video !== false && (typeof media.video === 'undefined' || media.video || media.videoSend || media.videoRecv || media.addVideo || media.replaceVideo || media.removeVideo)) {\n        // We may need a video track\n        let track = {\n          type: 'video'\n        };\n        if (media.removeVideo) {\n          track.remove = true;\n        } else {\n          if (media.addVideo) track.add = true;else if (media.replaceVideo) track.replace = true;\n          // Check if we need to capture a video device\n          if (media.videoSend !== false) {\n            track.capture = media.video || true;\n            if (['screen', 'window', 'desktop'].includes(track.capture)) {\n              // Change the type to 'screen'\n              track.type = 'screen';\n              track.capture = {\n                video: {}\n              };\n              // Check if there's constraints\n              if (media.screenshareFrameRate) track.capture.frameRate = media.screenshareFrameRate;\n              if (media.screenshareHeight) track.capture.height = media.screenshareHeight;\n              if (media.screenshareWidth) track.capture.width = media.screenshareWidth;\n            }\n          }\n          // Check if we need to receive video\n          if (media.videoRecv !== false) track.recv = true;\n        }\n        // Add a video track if needed\n        if (track.remove || track.capture || track.recv) tracks.push(track);\n      }\n      if (media.data) {\n        // We need a data channel\n        tracks.push({\n          type: 'data'\n        });\n      }\n    }\n    // Done\n    return tracks;\n  };\n\n  // Helper function to convert a track object to a set of constraints\n  Janus.trackConstraints = function (track) {\n    let constraints = {};\n    if (!track || !track.capture) return constraints;\n    if (track.type === 'audio') {\n      // Just put the capture part in the constraints\n      constraints.audio = track.capture;\n    } else if (track.type === 'video') {\n      // Check if one of the keywords was passed\n      if ((track.simulcast || track.svc) && track.capture === true) track.capture = 'hires';\n      if (track.capture === true || typeof track.capture === 'object') {\n        // Use the provided capture object as video constraint\n        constraints.video = track.capture;\n      } else {\n        let width = 0;\n        let height = 0;\n        if (track.capture === 'lowres') {\n          // Small resolution, 4:3\n          width = 320;\n          height = 240;\n        } else if (track.capture === 'lowres-16:9') {\n          // Small resolution, 16:9\n          width = 320;\n          height = 180;\n        } else if (track.capture === 'hires' || track.capture === 'hires-16:9' || track.capture === 'hdres') {\n          // High(HD) resolution is only 16:9\n          width = 1280;\n          height = 720;\n        } else if (track.capture === 'fhdres') {\n          // Full HD resolution is only 16:9\n          width = 1920;\n          height = 1080;\n        } else if (track.capture === '4kres') {\n          // 4K resolution is only 16:9\n          width = 3840;\n          height = 2160;\n        } else if (track.capture === 'stdres') {\n          // Normal resolution, 4:3\n          width = 640;\n          height = 480;\n        } else if (track.capture === 'stdres-16:9') {\n          // Normal resolution, 16:9\n          width = 640;\n          height = 360;\n        } else {\n          Janus.log('Default video setting is stdres 4:3');\n          width = 640;\n          height = 480;\n        }\n        constraints.video = {\n          width: {\n            ideal: width\n          },\n          height: {\n            ideal: height\n          }\n        };\n      }\n    } else if (track.type === 'screen') {\n      // Use the provided capture object as video constraint\n      constraints.video = track.capture;\n    }\n    return constraints;\n  };\n  Janus.noop = function () {};\n  Janus.dataChanDefaultLabel = \"JanusDataChannel\";\n\n  // Note: in the future we may want to change this, e.g., as was\n  // attempted in https://github.com/meetecho/janus-gateway/issues/1670\n  Janus.endOfCandidates = null;\n\n  // Stop all tracks from a given stream\n  Janus.stopAllTracks = function (stream) {\n    try {\n      // Try a MediaStreamTrack.stop() for each track\n      let tracks = stream.getTracks();\n      for (let mst of tracks) {\n        Janus.log(mst);\n        if (mst && mst.dontStop !== true) {\n          mst.stop();\n        }\n      }\n      // eslint-disable-next-line no-unused-vars\n    } catch (e) {\n      // Do nothing if this fails\n    }\n  };\n\n  // Initialization\n  Janus.init = function (options) {\n    options = options || {};\n    options.callback = typeof options.callback == \"function\" ? options.callback : Janus.noop;\n    if (Janus.initDone) {\n      // Already initialized\n      options.callback();\n    } else {\n      if (typeof console.log == \"undefined\") {\n        console.log = function () {};\n      }\n      // Console logging (all debugging disabled by default)\n      Janus.trace = Janus.noop;\n      Janus.debug = Janus.noop;\n      Janus.vdebug = Janus.noop;\n      Janus.log = Janus.noop;\n      Janus.warn = Janus.noop;\n      Janus.error = Janus.noop;\n      if (options.debug === true || options.debug === \"all\") {\n        // Enable all debugging levels\n        Janus.trace = console.trace.bind(console);\n        Janus.debug = console.debug.bind(console);\n        Janus.vdebug = console.debug.bind(console);\n        Janus.log = console.log.bind(console);\n        Janus.warn = console.warn.bind(console);\n        Janus.error = console.error.bind(console);\n      } else if (Array.isArray(options.debug)) {\n        for (let d of options.debug) {\n          switch (d) {\n            case \"trace\":\n              Janus.trace = console.trace.bind(console);\n              break;\n            case \"debug\":\n              Janus.debug = console.debug.bind(console);\n              break;\n            case \"vdebug\":\n              Janus.vdebug = console.debug.bind(console);\n              break;\n            case \"log\":\n              Janus.log = console.log.bind(console);\n              break;\n            case \"warn\":\n              Janus.warn = console.warn.bind(console);\n              break;\n            case \"error\":\n              Janus.error = console.error.bind(console);\n              break;\n          }\n        }\n      }\n      Janus.log(\"Initializing library\");\n      let usedDependencies = options.dependencies || Janus.useDefaultDependencies();\n      Janus.isArray = usedDependencies.isArray;\n      Janus.webRTCAdapter = usedDependencies.webRTCAdapter;\n      Janus.httpAPICall = usedDependencies.httpAPICall;\n      Janus.newWebSocket = usedDependencies.newWebSocket;\n      Janus.extension = usedDependencies.extension;\n      Janus.extension.init();\n\n      // Helper method to enumerate devices\n      Janus.listDevices = function (callback, config) {\n        callback = typeof callback == \"function\" ? callback : Janus.noop;\n        if (!config) config = {\n          audio: true,\n          video: true\n        };\n        if (Janus.isGetUserMediaAvailable()) {\n          navigator.mediaDevices.getUserMedia(config).then(function (stream) {\n            navigator.mediaDevices.enumerateDevices().then(function (devices) {\n              Janus.debug(devices);\n              callback(devices);\n              // Get rid of the now useless stream\n              Janus.stopAllTracks(stream);\n            });\n          }).catch(function (err) {\n            Janus.error(err);\n            callback([]);\n          });\n        } else {\n          Janus.warn(\"navigator.mediaDevices unavailable\");\n          callback([]);\n        }\n      };\n      // Helper methods to attach/reattach a stream to a video element (previously part of adapter.js)\n      Janus.attachMediaStream = function (element, stream) {\n        try {\n          element.srcObject = stream;\n          // eslint-disable-next-line no-unused-vars\n        } catch (e) {\n          try {\n            element.src = URL.createObjectURL(stream);\n          } catch (e) {\n            Janus.error(\"Error attaching stream to element\", e);\n          }\n        }\n      };\n      Janus.reattachMediaStream = function (to, from) {\n        try {\n          to.srcObject = from.srcObject;\n          // eslint-disable-next-line no-unused-vars\n        } catch (e) {\n          try {\n            to.src = from.src;\n          } catch (e) {\n            Janus.error(\"Error reattaching stream to element\", e);\n          }\n        }\n      };\n      // Detect tab close: make sure we don't loose existing onbeforeunload handlers\n      // (note: for iOS we need to subscribe to a different event, 'pagehide', see\n      // https://gist.github.com/thehunmonkgroup/6bee8941a49b86be31a787fe8f4b8cfe)\n      let iOS = ['iPad', 'iPhone', 'iPod'].indexOf(navigator.platform) >= 0;\n      let eventName = iOS ? 'pagehide' : 'beforeunload';\n      let oldOBF = window[\"on\" + eventName];\n      window.addEventListener(eventName, function () {\n        Janus.log(\"Closing window\");\n        for (const [sessionId, session] of Janus.sessions) {\n          if (session && session.destroyOnUnload) {\n            Janus.log(\"Destroying session \" + sessionId);\n            session.destroy({\n              unload: true,\n              notifyDestroyed: false\n            });\n          }\n        }\n        if (oldOBF && typeof oldOBF == \"function\") {\n          oldOBF();\n        }\n      });\n      // If this is a Safari, check if VP8 or VP9 are supported\n      Janus.safariVp8 = false;\n      Janus.safariVp9 = false;\n      if (Janus.webRTCAdapter.browserDetails.browser === 'safari' && Janus.webRTCAdapter.browserDetails.version >= 605) {\n        // Let's see if RTCRtpSender.getCapabilities() is there\n        if (RTCRtpSender && RTCRtpSender.getCapabilities && RTCRtpSender.getCapabilities(\"video\") && RTCRtpSender.getCapabilities(\"video\").codecs && RTCRtpSender.getCapabilities(\"video\").codecs.length) {\n          for (let codec of RTCRtpSender.getCapabilities(\"video\").codecs) {\n            if (codec && codec.mimeType && codec.mimeType.toLowerCase() === \"video/vp8\") {\n              Janus.safariVp8 = true;\n            } else if (codec && codec.mimeType && codec.mimeType.toLowerCase() === \"video/vp9\") {\n              Janus.safariVp9 = true;\n            }\n          }\n          if (Janus.safariVp8) {\n            Janus.log(\"This version of Safari supports VP8\");\n          } else {\n            Janus.warn(\"This version of Safari does NOT support VP8: if you're using a Technology Preview, \" + \"try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu\");\n          }\n        } else {\n          // We do it in a very ugly way, as there's no alternative...\n          // We create a PeerConnection to see if VP8 is in an offer\n          let testpc = new RTCPeerConnection({});\n          testpc.createOffer({\n            offerToReceiveVideo: true\n          }).then(function (offer) {\n            Janus.safariVp8 = offer.sdp.indexOf(\"VP8\") !== -1;\n            Janus.safariVp9 = offer.sdp.indexOf(\"VP9\") !== -1;\n            if (Janus.safariVp8) {\n              Janus.log(\"This version of Safari supports VP8\");\n            } else {\n              Janus.warn(\"This version of Safari does NOT support VP8: if you're using a Technology Preview, \" + \"try enabling the 'WebRTC VP8 codec' setting in the 'Experimental Features' Develop menu\");\n            }\n            testpc.close();\n            testpc = null;\n          });\n        }\n      }\n      Janus.initDone = true;\n      options.callback();\n    }\n  };\n\n  // Helper method to check whether WebRTC is supported by this browser\n  Janus.isWebrtcSupported = function () {\n    return !!window.RTCPeerConnection;\n  };\n  // Helper method to check whether devices can be accessed by this browser (e.g., not possible via plain HTTP)\n  Janus.isGetUserMediaAvailable = function () {\n    return navigator.mediaDevices && navigator.mediaDevices.getUserMedia;\n  };\n\n  // Helper method to create random identifiers (e.g., transaction)\n  Janus.randomString = function (len) {\n    let charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let randomString = '';\n    for (let i = 0; i < len; i++) {\n      let randomPoz = Math.floor(Math.random() * charSet.length);\n      randomString += charSet.charAt(randomPoz);\n    }\n    return randomString;\n  };\n  function Janus(gatewayCallbacks) {\n    gatewayCallbacks = gatewayCallbacks || {};\n    gatewayCallbacks.success = typeof gatewayCallbacks.success == \"function\" ? gatewayCallbacks.success : Janus.noop;\n    gatewayCallbacks.error = typeof gatewayCallbacks.error == \"function\" ? gatewayCallbacks.error : Janus.noop;\n    gatewayCallbacks.destroyed = typeof gatewayCallbacks.destroyed == \"function\" ? gatewayCallbacks.destroyed : Janus.noop;\n    if (!Janus.initDone) {\n      gatewayCallbacks.error(\"Library not initialized\");\n      return {};\n    }\n    if (!Janus.isWebrtcSupported()) {\n      gatewayCallbacks.error(\"WebRTC not supported by this browser\");\n      return {};\n    }\n    Janus.log(\"Library initialized: \" + Janus.initDone);\n    if (!gatewayCallbacks.server) {\n      gatewayCallbacks.error(\"Invalid server url\");\n      return {};\n    }\n    let websockets = false;\n    let ws = null;\n    let wsHandlers = {};\n    let wsKeepaliveTimeoutId = null;\n    let servers = null;\n    let serversIndex = 0;\n    let server = gatewayCallbacks.server;\n    if (Janus.isArray(server)) {\n      Janus.log(\"Multiple servers provided (\" + server.length + \"), will use the first that works\");\n      server = null;\n      servers = gatewayCallbacks.server;\n      Janus.debug(servers);\n    } else {\n      if (server.indexOf(\"ws\") === 0) {\n        websockets = true;\n        Janus.log(\"Using WebSockets to contact Janus: \" + server);\n      } else {\n        websockets = false;\n        Janus.log(\"Using REST API to contact Janus: \" + server);\n      }\n    }\n    let iceServers = gatewayCallbacks.iceServers || [{\n      urls: \"stun:stun.l.google.com:19302\"\n    }];\n    let iceTransportPolicy = gatewayCallbacks.iceTransportPolicy;\n    let bundlePolicy = gatewayCallbacks.bundlePolicy;\n    // Whether we should enable the withCredentials flag for XHR requests\n    let withCredentials = false;\n    if (typeof gatewayCallbacks.withCredentials !== 'undefined' && gatewayCallbacks.withCredentials !== null) withCredentials = gatewayCallbacks.withCredentials === true;\n    // Optional max events\n    let maxev = 10;\n    if (typeof gatewayCallbacks.max_poll_events !== 'undefined' && gatewayCallbacks.max_poll_events !== null) maxev = gatewayCallbacks.max_poll_events;\n    if (maxev < 1) maxev = 1;\n    // Token to use (only if the token based authentication mechanism is enabled)\n    let token = null;\n    if (typeof gatewayCallbacks.token !== 'undefined' && gatewayCallbacks.token !== null) token = gatewayCallbacks.token;\n    // API secret to use (only if the shared API secret is enabled)\n    let apisecret = null;\n    if (typeof gatewayCallbacks.apisecret !== 'undefined' && gatewayCallbacks.apisecret !== null) apisecret = gatewayCallbacks.apisecret;\n    // Whether we should destroy this session when onbeforeunload is called\n    this.destroyOnUnload = true;\n    if (typeof gatewayCallbacks.destroyOnUnload !== 'undefined' && gatewayCallbacks.destroyOnUnload !== null) this.destroyOnUnload = gatewayCallbacks.destroyOnUnload === true;\n    // Some timeout-related values\n    let keepAlivePeriod = 25000;\n    if (typeof gatewayCallbacks.keepAlivePeriod !== 'undefined' && gatewayCallbacks.keepAlivePeriod !== null) keepAlivePeriod = gatewayCallbacks.keepAlivePeriod;\n    if (isNaN(keepAlivePeriod)) keepAlivePeriod = 25000;\n    let longPollTimeout = 60000;\n    if (typeof gatewayCallbacks.longPollTimeout !== 'undefined' && gatewayCallbacks.longPollTimeout !== null) longPollTimeout = gatewayCallbacks.longPollTimeout;\n    if (isNaN(longPollTimeout)) longPollTimeout = 60000;\n\n    // overrides for default maxBitrate values for simulcasting\n    function getMaxBitrates(simulcastMaxBitrates) {\n      let maxBitrates = {\n        high: 900000,\n        medium: 300000,\n        low: 100000\n      };\n      if (typeof simulcastMaxBitrates !== 'undefined' && simulcastMaxBitrates !== null) {\n        if (simulcastMaxBitrates.high) maxBitrates.high = simulcastMaxBitrates.high;\n        if (simulcastMaxBitrates.medium) maxBitrates.medium = simulcastMaxBitrates.medium;\n        if (simulcastMaxBitrates.low) maxBitrates.low = simulcastMaxBitrates.low;\n      }\n      return maxBitrates;\n    }\n    let connected = false;\n    let sessionId = null;\n    let pluginHandles = new Map();\n    let that = this;\n    let retries = 0;\n    let transactions = new Map();\n    createSession(gatewayCallbacks);\n\n    // Public methods\n    this.getServer = function () {\n      return server;\n    };\n    this.isConnected = function () {\n      return connected;\n    };\n    this.reconnect = function (callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      callbacks[\"reconnect\"] = true;\n      createSession(callbacks);\n    };\n    this.getSessionId = function () {\n      return sessionId;\n    };\n    this.getInfo = function (callbacks) {\n      getInfo(callbacks);\n    };\n    this.destroy = function (callbacks) {\n      destroySession(callbacks);\n    };\n    this.attach = function (callbacks) {\n      createHandle(callbacks);\n    };\n    function eventHandler() {\n      if (sessionId == null) return;\n      Janus.debug('Long poll...');\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        return;\n      }\n      let longpoll = server + \"/\" + sessionId + \"?rid=\" + new Date().getTime();\n      if (maxev) longpoll = longpoll + \"&maxev=\" + maxev;\n      if (token) longpoll = longpoll + \"&token=\" + encodeURIComponent(token);\n      if (apisecret) longpoll = longpoll + \"&apisecret=\" + encodeURIComponent(apisecret);\n      Janus.httpAPICall(longpoll, {\n        verb: 'GET',\n        withCredentials: withCredentials,\n        success: handleEvent,\n        timeout: longPollTimeout,\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown);\n          retries++;\n          if (retries > 3) {\n            // Did we just lose the server? :-(\n            connected = false;\n            gatewayCallbacks.error(\"Lost connection to the server (is it down?)\");\n            return;\n          }\n          eventHandler();\n        }\n      });\n    }\n\n    // Private event handler: this will trigger plugin callbacks, if set\n    function handleEvent(json, skipTimeout) {\n      retries = 0;\n      if (!websockets && typeof sessionId !== 'undefined' && sessionId !== null && skipTimeout !== true) eventHandler();\n      if (!websockets && Janus.isArray(json)) {\n        // We got an array: it means we passed a maxev > 1, iterate on all objects\n        for (let i = 0; i < json.length; i++) {\n          handleEvent(json[i], true);\n        }\n        return;\n      }\n      if (json[\"janus\"] === \"keepalive\") {\n        // Nothing happened\n        Janus.vdebug(\"Got a keepalive on session \" + sessionId);\n        return;\n      } else if (json[\"janus\"] === \"server_info\") {\n        // Just info on the Janus instance\n        Janus.debug(\"Got info on the Janus instance\");\n        Janus.debug(json);\n        const transaction = json[\"transaction\"];\n        if (transaction) {\n          const reportSuccess = transactions.get(transaction);\n          if (reportSuccess) reportSuccess(json);\n          transactions.delete(transaction);\n        }\n        return;\n      } else if (json[\"janus\"] === \"ack\") {\n        // Just an ack, we can probably ignore\n        Janus.debug(\"Got an ack on session \" + sessionId);\n        Janus.debug(json);\n        const transaction = json[\"transaction\"];\n        if (transaction) {\n          const reportSuccess = transactions.get(transaction);\n          if (reportSuccess) reportSuccess(json);\n          transactions.delete(transaction);\n        }\n        return;\n      } else if (json[\"janus\"] === \"success\") {\n        // Success!\n        Janus.debug(\"Got a success on session \" + sessionId);\n        Janus.debug(json);\n        const transaction = json[\"transaction\"];\n        if (transaction) {\n          const reportSuccess = transactions.get(transaction);\n          if (reportSuccess) reportSuccess(json);\n          transactions.delete(transaction);\n        }\n        return;\n      } else if (json[\"janus\"] === \"trickle\") {\n        // We got a trickle candidate from Janus\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.debug(\"This handle is not attached to this session\");\n          return;\n        }\n        let candidate = json[\"candidate\"];\n        Janus.debug(\"Got a trickled candidate on session \" + sessionId);\n        Janus.debug(candidate);\n        let config = pluginHandle.webrtcStuff;\n        if (config.pc && config.remoteSdp) {\n          // Add candidate right now\n          Janus.debug(\"Adding remote candidate:\", candidate);\n          if (!candidate || candidate.completed === true) {\n            // end-of-candidates\n            config.pc.addIceCandidate(Janus.endOfCandidates);\n          } else {\n            // New candidate\n            config.pc.addIceCandidate(candidate);\n          }\n        } else {\n          // We didn't do setRemoteDescription (trickle got here before the offer?)\n          Janus.debug(\"We didn't do setRemoteDescription (trickle got here before the offer?), caching candidate\");\n          if (!config.candidates) config.candidates = [];\n          config.candidates.push(candidate);\n          Janus.debug(config.candidates);\n        }\n      } else if (json[\"janus\"] === \"webrtcup\") {\n        // The PeerConnection with the server is up! Notify this\n        Janus.debug(\"Got a webrtcup event on session \" + sessionId);\n        Janus.debug(json);\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.debug(\"This handle is not attached to this session\");\n          return;\n        }\n        pluginHandle.webrtcState(true);\n        return;\n      } else if (json[\"janus\"] === \"hangup\") {\n        // A plugin asked the core to hangup a PeerConnection on one of our handles\n        Janus.debug(\"Got a hangup event on session \" + sessionId);\n        Janus.debug(json);\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.debug(\"This handle is not attached to this session\");\n          return;\n        }\n        pluginHandle.webrtcState(false, json[\"reason\"]);\n        pluginHandle.hangup();\n      } else if (json[\"janus\"] === \"detached\") {\n        // A plugin asked the core to detach one of our handles\n        Janus.debug(\"Got a detached event on session \" + sessionId);\n        Janus.debug(json);\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          // Don't warn here because destroyHandle causes this situation.\n          return;\n        }\n        pluginHandle.ondetached();\n        pluginHandle.detach();\n      } else if (json[\"janus\"] === \"media\") {\n        // Media started/stopped flowing\n        Janus.debug(\"Got a media event on session \" + sessionId);\n        Janus.debug(json);\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.debug(\"This handle is not attached to this session\");\n          return;\n        }\n        pluginHandle.mediaState(json[\"type\"], json[\"receiving\"], json[\"mid\"]);\n      } else if (json[\"janus\"] === \"slowlink\") {\n        Janus.debug(\"Got a slowlink event on session \" + sessionId);\n        Janus.debug(json);\n        // Trouble uplink or downlink\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.debug(\"This handle is not attached to this session\");\n          return;\n        }\n        pluginHandle.slowLink(json[\"uplink\"], json[\"lost\"], json[\"mid\"]);\n      } else if (json[\"janus\"] === \"error\") {\n        // Oops, something wrong happened\n        Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n        Janus.debug(json);\n        let transaction = json[\"transaction\"];\n        if (transaction) {\n          let reportSuccess = transactions.get(transaction);\n          if (reportSuccess) {\n            reportSuccess(json);\n          }\n          transactions.delete(transaction);\n        }\n        return;\n      } else if (json[\"janus\"] === \"event\") {\n        Janus.debug(\"Got a plugin event on session \" + sessionId);\n        Janus.debug(json);\n        const sender = json[\"sender\"];\n        if (!sender) {\n          Janus.warn(\"Missing sender...\");\n          return;\n        }\n        let plugindata = json[\"plugindata\"];\n        if (!plugindata) {\n          Janus.warn(\"Missing plugindata...\");\n          return;\n        }\n        Janus.debug(\"  -- Event is coming from \" + sender + \" (\" + plugindata[\"plugin\"] + \")\");\n        let data = plugindata[\"data\"];\n        Janus.debug(data);\n        const pluginHandle = pluginHandles.get(sender);\n        if (!pluginHandle) {\n          Janus.warn(\"This handle is not attached to this session\");\n          return;\n        }\n        let jsep = json[\"jsep\"];\n        if (jsep) {\n          Janus.debug(\"Handling SDP as well...\");\n          Janus.debug(jsep);\n        }\n        let callback = pluginHandle.onmessage;\n        if (callback) {\n          Janus.debug(\"Notifying application...\");\n          // Send to callback specified when attaching plugin handle\n          callback(data, jsep);\n        } else {\n          // Send to generic callback (?)\n          Janus.debug(\"No provided notification callback\");\n        }\n      } else if (json[\"janus\"] === \"timeout\") {\n        Janus.error(\"Timeout on session \" + sessionId);\n        Janus.debug(json);\n        if (websockets) {\n          ws.close(3504, \"Gateway timeout\");\n        }\n        return;\n      } else {\n        Janus.warn(\"Unknown message/event  '\" + json[\"janus\"] + \"' on session \" + sessionId);\n        Janus.debug(json);\n      }\n    }\n\n    // Private helper to send keep-alive messages on WebSockets\n    function keepAlive() {\n      if (!server || !websockets || !connected) return;\n      wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);\n      let request = {\n        \"janus\": \"keepalive\",\n        \"session_id\": sessionId,\n        \"transaction\": Janus.randomString(12)\n      };\n      if (token) request[\"token\"] = token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      ws.send(JSON.stringify(request));\n    }\n\n    // Private method to create a session\n    function createSession(callbacks) {\n      let transaction = Janus.randomString(12);\n      let request = {\n        \"janus\": \"create\",\n        \"transaction\": transaction\n      };\n      if (callbacks[\"reconnect\"]) {\n        // We're reconnecting, claim the session\n        connected = false;\n        request[\"janus\"] = \"claim\";\n        request[\"session_id\"] = sessionId;\n        // If we were using websockets, ignore the old connection\n        if (ws) {\n          ws.onopen = null;\n          ws.onerror = null;\n          ws.onclose = null;\n          if (wsKeepaliveTimeoutId) {\n            clearTimeout(wsKeepaliveTimeoutId);\n            wsKeepaliveTimeoutId = null;\n          }\n        }\n      }\n      if (token) request[\"token\"] = token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (!server && Janus.isArray(servers)) {\n        // We still need to find a working server from the list we were given\n        server = servers[serversIndex];\n        if (server.indexOf(\"ws\") === 0) {\n          websockets = true;\n          Janus.log(\"Server #\" + (serversIndex + 1) + \": trying WebSockets to contact Janus (\" + server + \")\");\n        } else {\n          websockets = false;\n          Janus.log(\"Server #\" + (serversIndex + 1) + \": trying REST API to contact Janus (\" + server + \")\");\n        }\n      }\n      if (websockets) {\n        ws = Janus.newWebSocket(server, 'janus-protocol');\n        wsHandlers = {\n          'error': function () {\n            Janus.error(\"Error connecting to the Janus WebSockets server... \" + server);\n            if (Janus.isArray(servers) && !callbacks[\"reconnect\"]) {\n              serversIndex++;\n              if (serversIndex === servers.length) {\n                // We tried all the servers the user gave us and they all failed\n                callbacks.error(\"Error connecting to any of the provided Janus servers: Is the server down?\");\n                return;\n              }\n              // Let's try the next server\n              server = null;\n              setTimeout(function () {\n                createSession(callbacks);\n              }, 200);\n              return;\n            }\n            callbacks.error(\"Error connecting to the Janus WebSockets server: Is the server down?\");\n          },\n          'open': function () {\n            // We need to be notified about the success\n            transactions.set(transaction, function (json) {\n              Janus.debug(json);\n              if (json[\"janus\"] !== \"success\") {\n                Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n                callbacks.error(json[\"error\"].reason);\n                return;\n              }\n              wsKeepaliveTimeoutId = setTimeout(keepAlive, keepAlivePeriod);\n              connected = true;\n              sessionId = json[\"session_id\"] ? json[\"session_id\"] : json.data[\"id\"];\n              if (callbacks[\"reconnect\"]) {\n                Janus.log(\"Claimed session: \" + sessionId);\n              } else {\n                Janus.log(\"Created session: \" + sessionId);\n              }\n              Janus.sessions.set(sessionId, that);\n              callbacks.success();\n            });\n            ws.send(JSON.stringify(request));\n          },\n          'message': function (event) {\n            handleEvent(JSON.parse(event.data));\n          },\n          'close': function () {\n            if (!server || !connected) {\n              return;\n            }\n            connected = false;\n            // FIXME What if this is called when the page is closed?\n            gatewayCallbacks.error(\"Lost connection to the server (is it down?)\");\n          }\n        };\n        for (let eventName in wsHandlers) {\n          ws.addEventListener(eventName, wsHandlers[eventName]);\n        }\n        return;\n      }\n      Janus.httpAPICall(server, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"success\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n            callbacks.error(json[\"error\"].reason);\n            return;\n          }\n          connected = true;\n          sessionId = json[\"session_id\"] ? json[\"session_id\"] : json.data[\"id\"];\n          if (callbacks[\"reconnect\"]) {\n            Janus.log(\"Claimed session: \" + sessionId);\n          } else {\n            Janus.log(\"Created session: \" + sessionId);\n          }\n          Janus.sessions.set(sessionId, that);\n          eventHandler();\n          callbacks.success();\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          if (Janus.isArray(servers) && !callbacks[\"reconnect\"]) {\n            serversIndex++;\n            if (serversIndex === servers.length) {\n              // We tried all the servers the user gave us and they all failed\n              callbacks.error(\"Error connecting to any of the provided Janus servers: Is the server down?\");\n              return;\n            }\n            // Let's try the next server\n            server = null;\n            setTimeout(function () {\n              createSession(callbacks);\n            }, 200);\n            return;\n          }\n          if (errorThrown === \"\") callbacks.error(textStatus + \": Is the server down?\");else if (errorThrown && errorThrown.error) callbacks.error(textStatus + \": \" + errorThrown.error.message);else callbacks.error(textStatus + \": \" + errorThrown);\n        }\n      });\n    }\n\n    // Private method to get info on the server\n    function getInfo(callbacks) {\n      callbacks = callbacks || {};\n      // FIXME This method triggers a success even when we fail\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      Janus.log(\"Getting info on Janus instance\");\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        callbacks.error(\"Is the server down? (connected=false)\");\n        return;\n      }\n      // We just need to send an \"info\" request\n      let transaction = Janus.randomString(12);\n      let request = {\n        \"janus\": \"info\",\n        \"transaction\": transaction\n      };\n      if (token) request[\"token\"] = token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (websockets) {\n        transactions.set(transaction, function (json) {\n          Janus.log(\"Server info:\");\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"server_info\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n          }\n          callbacks.success(json);\n        });\n        ws.send(JSON.stringify(request));\n        return;\n      }\n      Janus.httpAPICall(server, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.log(\"Server info:\");\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"server_info\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n          }\n          callbacks.success(json);\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          if (errorThrown === \"\") callbacks.error(textStatus + \": Is the server down?\");else callbacks.error(textStatus + \": \" + errorThrown);\n        }\n      });\n    }\n\n    // Private method to destroy a session\n    function destroySession(callbacks) {\n      callbacks = callbacks || {};\n      // FIXME This method triggers a success even when we fail\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      let unload = callbacks.unload === true;\n      let notifyDestroyed = true;\n      if (typeof callbacks.notifyDestroyed !== 'undefined' && callbacks.notifyDestroyed !== null) notifyDestroyed = callbacks.notifyDestroyed === true;\n      let cleanupHandles = callbacks.cleanupHandles === true;\n      Janus.log(\"Destroying session \" + sessionId + \" (unload=\" + unload + \")\");\n      if (!sessionId) {\n        Janus.warn(\"No session to destroy\");\n        callbacks.success();\n        if (notifyDestroyed) gatewayCallbacks.destroyed();\n        return;\n      }\n      if (cleanupHandles) {\n        for (const handleId of pluginHandles.keys()) destroyHandle(handleId, {\n          noRequest: true\n        });\n      }\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        sessionId = null;\n        callbacks.success();\n        return;\n      }\n      // No need to destroy all handles first, Janus will do that itself\n      let request = {\n        \"janus\": \"destroy\",\n        \"transaction\": Janus.randomString(12)\n      };\n      if (token) request[\"token\"] = token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (unload) {\n        // We're unloading the page: use sendBeacon for HTTP instead,\n        // or just close the WebSocket connection if we're using that\n        if (websockets) {\n          ws.onclose = null;\n          ws.close();\n          ws = null;\n        } else {\n          navigator.sendBeacon(server + \"/\" + sessionId, JSON.stringify(request));\n        }\n        Janus.log(\"Destroyed session:\");\n        sessionId = null;\n        connected = false;\n        callbacks.success();\n        if (notifyDestroyed) gatewayCallbacks.destroyed();\n        return;\n      }\n      if (websockets) {\n        request[\"session_id\"] = sessionId;\n        let unbindWebSocket = function () {\n          for (let eventName in wsHandlers) {\n            ws.removeEventListener(eventName, wsHandlers[eventName]);\n          }\n          ws.removeEventListener('message', onUnbindMessage);\n          ws.removeEventListener('error', onUnbindError);\n          if (wsKeepaliveTimeoutId) {\n            clearTimeout(wsKeepaliveTimeoutId);\n          }\n          ws.close();\n        };\n        let onUnbindMessage = function (event) {\n          let data = JSON.parse(event.data);\n          if (data.session_id == request.session_id && data.transaction == request.transaction) {\n            unbindWebSocket();\n            callbacks.success();\n            if (notifyDestroyed) gatewayCallbacks.destroyed();\n          }\n        };\n        let onUnbindError = function () {\n          unbindWebSocket();\n          callbacks.error(\"Failed to destroy the server: Is the server down?\");\n          if (notifyDestroyed) gatewayCallbacks.destroyed();\n        };\n        ws.addEventListener('message', onUnbindMessage);\n        ws.addEventListener('error', onUnbindError);\n        if (ws.readyState === 1) {\n          ws.send(JSON.stringify(request));\n        } else {\n          onUnbindError();\n        }\n        return;\n      }\n      Janus.httpAPICall(server + \"/\" + sessionId, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.log(\"Destroyed session:\");\n          Janus.debug(json);\n          sessionId = null;\n          connected = false;\n          if (json[\"janus\"] !== \"success\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n          }\n          callbacks.success();\n          if (notifyDestroyed) gatewayCallbacks.destroyed();\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          // Reset everything anyway\n          sessionId = null;\n          connected = false;\n          callbacks.success();\n          if (notifyDestroyed) gatewayCallbacks.destroyed();\n        }\n      });\n    }\n\n    // Private method to create a plugin handle\n    function createHandle(callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      callbacks.dataChannelOptions = callbacks.dataChannelOptions || {\n        ordered: true\n      };\n      callbacks.consentDialog = typeof callbacks.consentDialog == \"function\" ? callbacks.consentDialog : Janus.noop;\n      callbacks.connectionState = typeof callbacks.connectionState == \"function\" ? callbacks.connectionState : Janus.noop;\n      callbacks.iceState = typeof callbacks.iceState == \"function\" ? callbacks.iceState : Janus.noop;\n      callbacks.mediaState = typeof callbacks.mediaState == \"function\" ? callbacks.mediaState : Janus.noop;\n      callbacks.webrtcState = typeof callbacks.webrtcState == \"function\" ? callbacks.webrtcState : Janus.noop;\n      callbacks.slowLink = typeof callbacks.slowLink == \"function\" ? callbacks.slowLink : Janus.noop;\n      callbacks.onmessage = typeof callbacks.onmessage == \"function\" ? callbacks.onmessage : Janus.noop;\n      callbacks.onlocaltrack = typeof callbacks.onlocaltrack == \"function\" ? callbacks.onlocaltrack : Janus.noop;\n      callbacks.onremotetrack = typeof callbacks.onremotetrack == \"function\" ? callbacks.onremotetrack : Janus.noop;\n      callbacks.ondata = typeof callbacks.ondata == \"function\" ? callbacks.ondata : Janus.noop;\n      callbacks.ondataopen = typeof callbacks.ondataopen == \"function\" ? callbacks.ondataopen : Janus.noop;\n      callbacks.oncleanup = typeof callbacks.oncleanup == \"function\" ? callbacks.oncleanup : Janus.noop;\n      callbacks.ondetached = typeof callbacks.ondetached == \"function\" ? callbacks.ondetached : Janus.noop;\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        callbacks.error(\"Is the server down? (connected=false)\");\n        return;\n      }\n      let plugin = callbacks.plugin;\n      if (!plugin) {\n        Janus.error(\"Invalid plugin\");\n        callbacks.error(\"Invalid plugin\");\n        return;\n      }\n      let opaqueId = callbacks.opaqueId;\n      let loopIndex = callbacks.loopIndex;\n      let handleToken = callbacks.token ? callbacks.token : token;\n      let transaction = Janus.randomString(12);\n      let request = {\n        \"janus\": \"attach\",\n        \"plugin\": plugin,\n        \"opaque_id\": opaqueId,\n        \"loop_index\": loopIndex,\n        \"transaction\": transaction\n      };\n      if (handleToken) request[\"token\"] = handleToken;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (websockets) {\n        transactions.set(transaction, function (json) {\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"success\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n            callbacks.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\n            return;\n          }\n          let handleId = json.data[\"id\"];\n          Janus.log(\"Created handle: \" + handleId);\n          let pluginHandle = {\n            session: that,\n            plugin: plugin,\n            id: handleId,\n            token: handleToken,\n            detached: false,\n            webrtcStuff: {\n              started: false,\n              myStream: null,\n              streamExternal: false,\n              mySdp: null,\n              mediaConstraints: null,\n              pc: null,\n              dataChannelOptions: callbacks.dataChannelOptions,\n              dataChannel: {},\n              dtmfSender: null,\n              trickle: true,\n              iceDone: false,\n              bitrate: {}\n            },\n            getId: function () {\n              return handleId;\n            },\n            getPlugin: function () {\n              return plugin;\n            },\n            getVolume: function (mid, result) {\n              return getVolume(handleId, mid, true, result);\n            },\n            getRemoteVolume: function (mid, result) {\n              return getVolume(handleId, mid, true, result);\n            },\n            getLocalVolume: function (mid, result) {\n              return getVolume(handleId, mid, false, result);\n            },\n            isAudioMuted: function (mid) {\n              return isMuted(handleId, mid, false);\n            },\n            muteAudio: function (mid) {\n              return mute(handleId, mid, false, true);\n            },\n            unmuteAudio: function (mid) {\n              return mute(handleId, mid, false, false);\n            },\n            isVideoMuted: function (mid) {\n              return isMuted(handleId, mid, true);\n            },\n            muteVideo: function (mid) {\n              return mute(handleId, mid, true, true);\n            },\n            unmuteVideo: function (mid) {\n              return mute(handleId, mid, true, false);\n            },\n            getBitrate: function (mid) {\n              return getBitrate(handleId, mid);\n            },\n            setMaxBitrate: function (mid, bitrate) {\n              return setBitrate(handleId, mid, bitrate);\n            },\n            send: function (callbacks) {\n              sendMessage(handleId, callbacks);\n            },\n            data: function (callbacks) {\n              sendData(handleId, callbacks);\n            },\n            dtmf: function (callbacks) {\n              sendDtmf(handleId, callbacks);\n            },\n            consentDialog: callbacks.consentDialog,\n            connectionState: callbacks.connectionState,\n            iceState: callbacks.iceState,\n            mediaState: callbacks.mediaState,\n            webrtcState: callbacks.webrtcState,\n            slowLink: callbacks.slowLink,\n            onmessage: callbacks.onmessage,\n            createOffer: function (callbacks) {\n              prepareWebrtc(handleId, true, callbacks);\n            },\n            createAnswer: function (callbacks) {\n              prepareWebrtc(handleId, false, callbacks);\n            },\n            handleRemoteJsep: function (callbacks) {\n              prepareWebrtcPeer(handleId, callbacks);\n            },\n            replaceTracks: function (callbacks) {\n              replaceTracks(handleId, callbacks);\n            },\n            getLocalTracks: function () {\n              return getLocalTracks(handleId);\n            },\n            getRemoteTracks: function () {\n              return getRemoteTracks(handleId);\n            },\n            onlocaltrack: callbacks.onlocaltrack,\n            onremotetrack: callbacks.onremotetrack,\n            ondata: callbacks.ondata,\n            ondataopen: callbacks.ondataopen,\n            oncleanup: callbacks.oncleanup,\n            ondetached: callbacks.ondetached,\n            hangup: function (sendRequest) {\n              cleanupWebrtc(handleId, sendRequest === true);\n            },\n            detach: function (callbacks) {\n              destroyHandle(handleId, callbacks);\n            }\n          };\n          pluginHandles.set(handleId, pluginHandle);\n          callbacks.success(pluginHandle);\n        });\n        request[\"session_id\"] = sessionId;\n        ws.send(JSON.stringify(request));\n        return;\n      }\n      Janus.httpAPICall(server + \"/\" + sessionId, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"success\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n            callbacks.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason);\n            return;\n          }\n          let handleId = json.data[\"id\"];\n          Janus.log(\"Created handle: \" + handleId);\n          let pluginHandle = {\n            session: that,\n            plugin: plugin,\n            id: handleId,\n            token: handleToken,\n            detached: false,\n            webrtcStuff: {\n              started: false,\n              myStream: null,\n              streamExternal: false,\n              mySdp: null,\n              mediaConstraints: null,\n              pc: null,\n              dataChannelOptions: callbacks.dataChannelOptions,\n              dataChannel: {},\n              dtmfSender: null,\n              trickle: true,\n              iceDone: false,\n              bitrate: {}\n            },\n            getId: function () {\n              return handleId;\n            },\n            getPlugin: function () {\n              return plugin;\n            },\n            getVolume: function (mid, result) {\n              return getVolume(handleId, mid, true, result);\n            },\n            getRemoteVolume: function (mid, result) {\n              return getVolume(handleId, mid, true, result);\n            },\n            getLocalVolume: function (mid, result) {\n              return getVolume(handleId, mid, false, result);\n            },\n            isAudioMuted: function (mid) {\n              return isMuted(handleId, mid, false);\n            },\n            muteAudio: function (mid) {\n              return mute(handleId, mid, false, true);\n            },\n            unmuteAudio: function (mid) {\n              return mute(handleId, mid, false, false);\n            },\n            isVideoMuted: function (mid) {\n              return isMuted(handleId, mid, true);\n            },\n            muteVideo: function (mid) {\n              return mute(handleId, mid, true, true);\n            },\n            unmuteVideo: function (mid) {\n              return mute(handleId, mid, true, false);\n            },\n            getBitrate: function (mid) {\n              return getBitrate(handleId, mid);\n            },\n            setMaxBitrate: function (mid, bitrate) {\n              return setBitrate(handleId, mid, bitrate);\n            },\n            send: function (callbacks) {\n              sendMessage(handleId, callbacks);\n            },\n            data: function (callbacks) {\n              sendData(handleId, callbacks);\n            },\n            dtmf: function (callbacks) {\n              sendDtmf(handleId, callbacks);\n            },\n            consentDialog: callbacks.consentDialog,\n            connectionState: callbacks.connectionState,\n            iceState: callbacks.iceState,\n            mediaState: callbacks.mediaState,\n            webrtcState: callbacks.webrtcState,\n            slowLink: callbacks.slowLink,\n            onmessage: callbacks.onmessage,\n            createOffer: function (callbacks) {\n              prepareWebrtc(handleId, true, callbacks);\n            },\n            createAnswer: function (callbacks) {\n              prepareWebrtc(handleId, false, callbacks);\n            },\n            handleRemoteJsep: function (callbacks) {\n              prepareWebrtcPeer(handleId, callbacks);\n            },\n            replaceTracks: function (callbacks) {\n              replaceTracks(handleId, callbacks);\n            },\n            getLocalTracks: function () {\n              return getLocalTracks(handleId);\n            },\n            getRemoteTracks: function () {\n              return getRemoteTracks(handleId);\n            },\n            onlocaltrack: callbacks.onlocaltrack,\n            onremotetrack: callbacks.onremotetrack,\n            ondata: callbacks.ondata,\n            ondataopen: callbacks.ondataopen,\n            oncleanup: callbacks.oncleanup,\n            ondetached: callbacks.ondetached,\n            hangup: function (sendRequest) {\n              cleanupWebrtc(handleId, sendRequest === true);\n            },\n            detach: function (callbacks) {\n              destroyHandle(handleId, callbacks);\n            }\n          };\n          pluginHandles.set(handleId, pluginHandle);\n          callbacks.success(pluginHandle);\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          if (errorThrown === \"\") callbacks.error(textStatus + \": Is the server down?\");else callbacks.error(textStatus + \": \" + errorThrown);\n        }\n      });\n    }\n\n    // Private method to send a message\n    function sendMessage(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        callbacks.error(\"Is the server down? (connected=false)\");\n        return;\n      }\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        callbacks.error(\"Invalid handle\");\n        return;\n      }\n      let message = callbacks.message;\n      let jsep = callbacks.jsep;\n      let transaction = Janus.randomString(12);\n      let request = {\n        \"janus\": \"message\",\n        \"body\": message,\n        \"transaction\": transaction\n      };\n      if (pluginHandle.token) request[\"token\"] = pluginHandle.token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (jsep) {\n        request.jsep = {\n          type: jsep.type,\n          sdp: jsep.sdp\n        };\n        if (jsep.e2ee) request.jsep.e2ee = true;\n        if (jsep.rid_order === \"hml\" || jsep.rid_order === \"lmh\") request.jsep.rid_order = jsep.rid_order;\n        if (jsep.force_relay) request.jsep.force_relay = true;\n        // Check if there's SVC video streams to tell Janus about\n        let svc = null;\n        let config = pluginHandle.webrtcStuff;\n        if (config.pc) {\n          let transceivers = config.pc.getTransceivers();\n          if (transceivers && transceivers.length > 0) {\n            for (let mindex in transceivers) {\n              let tr = transceivers[mindex];\n              if (tr && tr.sender && tr.sender.track && tr.sender.track.kind === 'video') {\n                let params = tr.sender.getParameters();\n                if (params && params.encodings && params.encodings[0] && params.encodings[0].scalabilityMode) {\n                  // This video stream uses SVC\n                  if (!svc) svc = [];\n                  svc.push({\n                    mindex: parseInt(mindex),\n                    mid: tr.mid,\n                    svc: params.encodings[0].scalabilityMode\n                  });\n                }\n              }\n            }\n          }\n        }\n        if (svc) request.jsep.svc = svc;\n      }\n      Janus.debug(\"Sending message to plugin (handle=\" + handleId + \"):\");\n      Janus.debug(request);\n      if (websockets) {\n        request[\"session_id\"] = sessionId;\n        request[\"handle_id\"] = handleId;\n        transactions.set(transaction, function (json) {\n          Janus.debug(\"Message sent!\");\n          Janus.debug(json);\n          if (json[\"janus\"] === \"success\") {\n            // We got a success, must have been a synchronous transaction\n            let plugindata = json[\"plugindata\"];\n            if (!plugindata) {\n              Janus.warn(\"Request succeeded, but missing plugindata...\");\n              callbacks.success();\n              return;\n            }\n            Janus.log(\"Synchronous transaction successful (\" + plugindata[\"plugin\"] + \")\");\n            let data = plugindata[\"data\"];\n            Janus.debug(data);\n            callbacks.success(data);\n            return;\n          } else if (json[\"janus\"] !== \"ack\") {\n            // Not a success and not an ack, must be an error\n            if (json[\"error\"]) {\n              Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n              callbacks.error(json[\"error\"].code + \" \" + json[\"error\"].reason);\n            } else {\n              Janus.error(\"Unknown error\"); // FIXME\n              callbacks.error(\"Unknown error\");\n            }\n            return;\n          }\n          // If we got here, the plugin decided to handle the request asynchronously\n          callbacks.success();\n        });\n        ws.send(JSON.stringify(request));\n        return;\n      }\n      Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.debug(\"Message sent!\");\n          Janus.debug(json);\n          if (json[\"janus\"] === \"success\") {\n            // We got a success, must have been a synchronous transaction\n            let plugindata = json[\"plugindata\"];\n            if (!plugindata) {\n              Janus.warn(\"Request succeeded, but missing plugindata...\");\n              callbacks.success();\n              return;\n            }\n            Janus.log(\"Synchronous transaction successful (\" + plugindata[\"plugin\"] + \")\");\n            let data = plugindata[\"data\"];\n            Janus.debug(data);\n            callbacks.success(data);\n            return;\n          } else if (json[\"janus\"] !== \"ack\") {\n            // Not a success and not an ack, must be an error\n            if (json[\"error\"]) {\n              Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n              callbacks.error(json[\"error\"].code + \" \" + json[\"error\"].reason);\n            } else {\n              Janus.error(\"Unknown error\"); // FIXME\n              callbacks.error(\"Unknown error\");\n            }\n            return;\n          }\n          // If we got here, the plugin decided to handle the request asynchronously\n          callbacks.success();\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          callbacks.error(textStatus + \": \" + errorThrown);\n        }\n      });\n    }\n\n    // Private method to send a trickle candidate\n    function sendTrickleCandidate(handleId, candidate) {\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        return;\n      }\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        return;\n      }\n      let request = {\n        \"janus\": \"trickle\",\n        \"candidate\": candidate,\n        \"transaction\": Janus.randomString(12)\n      };\n      if (pluginHandle.token) request[\"token\"] = pluginHandle.token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      Janus.vdebug(\"Sending trickle candidate (handle=\" + handleId + \"):\");\n      Janus.vdebug(request);\n      if (websockets) {\n        request[\"session_id\"] = sessionId;\n        request[\"handle_id\"] = handleId;\n        ws.send(JSON.stringify(request));\n        return;\n      }\n      Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.vdebug(\"Candidate sent!\");\n          Janus.vdebug(json);\n          if (json[\"janus\"] !== \"ack\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n            return;\n          }\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n        }\n      });\n    }\n\n    // Private method to create a data channel\n    function createDataChannel(handleId, dclabel, dcprotocol, incoming, pendingData) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn(\"Invalid PeerConnection\");\n        return;\n      }\n      let onDataChannelMessage = function (event) {\n        Janus.log('Received message on data channel:', event);\n        let label = event.target.label;\n        pluginHandle.ondata(event.data, label);\n      };\n      let onDataChannelStateChange = function (event) {\n        Janus.log('Received state change on data channel:', event);\n        let label = event.target.label;\n        let protocol = event.target.protocol;\n        let dcState = config.dataChannel[label] ? config.dataChannel[label].readyState : \"null\";\n        Janus.log('State change on <' + label + '> data channel: ' + dcState);\n        if (dcState === 'open') {\n          // Any pending messages to send?\n          if (config.dataChannel[label].pending && config.dataChannel[label].pending.length > 0) {\n            Janus.log(\"Sending pending messages on <\" + label + \">:\", config.dataChannel[label].pending.length);\n            for (let data of config.dataChannel[label].pending) {\n              Janus.log(\"Sending data on data channel <\" + label + \">\");\n              Janus.debug(data);\n              config.dataChannel[label].send(data);\n            }\n            config.dataChannel[label].pending = [];\n          }\n          // Notify the open data channel\n          pluginHandle.ondataopen(label, protocol);\n        }\n      };\n      let onDataChannelError = function (error) {\n        Janus.error('Got error on data channel:', error);\n        // TODO\n      };\n      if (!incoming) {\n        // FIXME Add options (ordered, maxRetransmits, etc.)\n        let dcoptions = config.dataChannelOptions;\n        if (dcprotocol) dcoptions.protocol = dcprotocol;\n        config.dataChannel[dclabel] = config.pc.createDataChannel(dclabel, dcoptions);\n      } else {\n        // The channel was created by Janus\n        config.dataChannel[dclabel] = incoming;\n      }\n      config.dataChannel[dclabel].onmessage = onDataChannelMessage;\n      config.dataChannel[dclabel].onopen = onDataChannelStateChange;\n      config.dataChannel[dclabel].onclose = onDataChannelStateChange;\n      config.dataChannel[dclabel].onerror = onDataChannelError;\n      config.dataChannel[dclabel].pending = [];\n      if (pendingData) config.dataChannel[dclabel].pending.push(pendingData);\n    }\n\n    // Private method to send a data channel message\n    function sendData(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        callbacks.error(\"Invalid handle\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      let data = callbacks.text || callbacks.data;\n      if (!data) {\n        Janus.warn(\"Invalid data\");\n        callbacks.error(\"Invalid data\");\n        return;\n      }\n      let label = callbacks.label ? callbacks.label : Janus.dataChanDefaultLabel;\n      if (!config.dataChannel[label]) {\n        // Create new data channel and wait for it to open\n        createDataChannel(handleId, label, callbacks.protocol, false, data, callbacks.protocol);\n        callbacks.success();\n        return;\n      }\n      if (config.dataChannel[label].readyState !== \"open\") {\n        config.dataChannel[label].pending.push(data);\n        callbacks.success();\n        return;\n      }\n      Janus.log(\"Sending data on data channel <\" + label + \">\");\n      Janus.debug(data);\n      config.dataChannel[label].send(data);\n      callbacks.success();\n    }\n\n    // Private method to send a DTMF tone\n    function sendDtmf(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        callbacks.error(\"Invalid handle\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.dtmfSender) {\n        // Create the DTMF sender the proper way, if possible\n        if (config.pc) {\n          let senders = config.pc.getSenders();\n          let audioSender = senders.find(function (sender) {\n            return sender.track && sender.track.kind === 'audio';\n          });\n          if (!audioSender) {\n            Janus.warn(\"Invalid DTMF configuration (no audio track)\");\n            callbacks.error(\"Invalid DTMF configuration (no audio track)\");\n            return;\n          }\n          config.dtmfSender = audioSender.dtmf;\n          if (config.dtmfSender) {\n            Janus.log(\"Created DTMF Sender\");\n            config.dtmfSender.ontonechange = function (tone) {\n              Janus.debug(\"Sent DTMF tone: \" + tone.tone);\n            };\n          }\n        }\n        if (!config.dtmfSender) {\n          Janus.warn(\"Invalid DTMF configuration\");\n          callbacks.error(\"Invalid DTMF configuration\");\n          return;\n        }\n      }\n      let dtmf = callbacks.dtmf;\n      if (!dtmf) {\n        Janus.warn(\"Invalid DTMF parameters\");\n        callbacks.error(\"Invalid DTMF parameters\");\n        return;\n      }\n      let tones = dtmf.tones;\n      if (!tones) {\n        Janus.warn(\"Invalid DTMF string\");\n        callbacks.error(\"Invalid DTMF string\");\n        return;\n      }\n      let duration = typeof dtmf.duration === 'number' ? dtmf.duration : 500; // We choose 500ms as the default duration for a tone\n      let gap = typeof dtmf.gap === 'number' ? dtmf.gap : 50; // We choose 50ms as the default gap between tones\n      Janus.debug(\"Sending DTMF string \" + tones + \" (duration \" + duration + \"ms, gap \" + gap + \"ms)\");\n      config.dtmfSender.insertDTMF(tones, duration, gap);\n      callbacks.success();\n    }\n\n    // Private method to destroy a plugin handle\n    function destroyHandle(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      let noRequest = callbacks.noRequest === true;\n      Janus.log(\"Destroying handle \" + handleId + \" (only-locally=\" + noRequest + \")\");\n      cleanupWebrtc(handleId);\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || pluginHandle.detached) {\n        // Plugin was already detached by Janus, calling detach again will return a handle not found error, so just exit here\n        pluginHandles.delete(handleId);\n        callbacks.success();\n        return;\n      }\n      pluginHandle.detached = true;\n      if (noRequest) {\n        // We're only removing the handle locally\n        pluginHandles.delete(handleId);\n        callbacks.success();\n        return;\n      }\n      if (!connected) {\n        Janus.warn(\"Is the server down? (connected=false)\");\n        callbacks.error(\"Is the server down? (connected=false)\");\n        return;\n      }\n      let request = {\n        \"janus\": \"detach\",\n        \"transaction\": Janus.randomString(12)\n      };\n      if (pluginHandle.token) request[\"token\"] = pluginHandle.token;\n      if (apisecret) request[\"apisecret\"] = apisecret;\n      if (websockets) {\n        request[\"session_id\"] = sessionId;\n        request[\"handle_id\"] = handleId;\n        ws.send(JSON.stringify(request));\n        pluginHandles.delete(handleId);\n        callbacks.success();\n        return;\n      }\n      Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n        verb: 'POST',\n        withCredentials: withCredentials,\n        body: request,\n        success: function (json) {\n          Janus.log(\"Destroyed handle:\");\n          Janus.debug(json);\n          if (json[\"janus\"] !== \"success\") {\n            Janus.error(\"Ooops: \" + json[\"error\"].code + \" \" + json[\"error\"].reason); // FIXME\n          }\n          pluginHandles.delete(handleId);\n          callbacks.success();\n        },\n        error: function (textStatus, errorThrown) {\n          Janus.error(textStatus + \":\", errorThrown); // FIXME\n          // We cleanup anyway\n          pluginHandles.delete(handleId);\n          callbacks.success();\n        }\n      });\n    }\n\n    // WebRTC stuff\n    // Helper function to create a new PeerConnection, if we need one\n    function createPeerconnectionIfNeeded(handleId, callbacks) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        throw \"Invalid handle\";\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (config.pc) {\n        // Nothing to do, we have a PeerConnection already\n        return;\n      }\n      let pc_config = {\n        iceServers: iceServers,\n        iceTransportPolicy: iceTransportPolicy,\n        bundlePolicy: bundlePolicy\n      };\n      pc_config.sdpSemantics = 'unified-plan';\n      // Check if a sender or receiver transform has been provided\n      let insertableStreams = false;\n      if (callbacks.tracks) {\n        for (let track of callbacks.tracks) {\n          if (track.transforms && (track.transforms.sender || track.transforms.receiver)) {\n            insertableStreams = true;\n            break;\n          }\n        }\n      }\n      if (callbacks.externalEncryption) {\n        insertableStreams = true;\n        config.externalEncryption = true;\n      }\n      if (RTCRtpSender && (RTCRtpSender.prototype.createEncodedStreams || RTCRtpSender.prototype.createEncodedAudioStreams && RTCRtpSender.prototype.createEncodedVideoStreams) && insertableStreams) {\n        config.insertableStreams = true;\n        pc_config.forceEncodedAudioInsertableStreams = true;\n        pc_config.forceEncodedVideoInsertableStreams = true;\n        pc_config.encodedInsertableStreams = true;\n      }\n      Janus.log('Creating PeerConnection');\n      config.pc = new RTCPeerConnection(pc_config);\n      Janus.debug(config.pc);\n      if (config.pc.getStats) {\n        // FIXME\n        config.volume = {};\n        config.bitrate.value = '0 kbits/sec';\n      }\n      Janus.log('Preparing local SDP and gathering candidates (trickle=' + config.trickle + ')');\n      config.pc.onconnectionstatechange = function () {\n        if (config.pc) pluginHandle.connectionState(config.pc.connectionState);\n      };\n      config.pc.oniceconnectionstatechange = function () {\n        if (config.pc) pluginHandle.iceState(config.pc.iceConnectionState);\n      };\n      config.pc.onicecandidate = function (event) {\n        if (!event.candidate || event.candidate.candidate && event.candidate.candidate.indexOf('endOfCandidates') > 0) {\n          Janus.log('End of candidates.');\n          config.iceDone = true;\n          if (config.trickle === true) {\n            // Notify end of candidates\n            sendTrickleCandidate(handleId, {\n              completed: true\n            });\n          } else {\n            // No trickle, time to send the complete SDP (including all candidates)\n            sendSDP(handleId, callbacks);\n          }\n        } else {\n          // JSON.stringify doesn't work on some WebRTC objects anymore\n          // See https://code.google.com/p/chromium/issues/detail?id=467366\n          let candidate = {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex\n          };\n          if (config.trickle === true) {\n            // Send candidate\n            sendTrickleCandidate(handleId, candidate);\n          }\n        }\n      };\n      config.pc.ontrack = function (event) {\n        Janus.log('Handling Remote Track', event);\n        if (!event.streams) return;\n        if (!event.track) return;\n        // Notify about the new track event\n        let mid = event.transceiver ? event.transceiver.mid : event.track.id;\n        try {\n          if (event.transceiver && event.transceiver.mid && event.track.id) {\n            // Keep track of the mapping between track ID and mid, since\n            // when a track is removed the transceiver may be gone already\n            if (!pluginHandle.mids) pluginHandle.mids = {};\n            pluginHandle.mids[event.track.id] = event.transceiver.mid;\n          }\n          pluginHandle.onremotetrack(event.track, mid, true, {\n            reason: 'created'\n          });\n        } catch (e) {\n          Janus.error(\"Error calling onremotetrack\", e);\n        }\n        if (event.track.onended) return;\n        let trackMutedTimeoutId = null;\n        Janus.log('Adding onended callback to track:', event.track);\n        event.track.onended = function (ev) {\n          Janus.log('Remote track removed:', ev);\n          clearTimeout(trackMutedTimeoutId);\n          // Notify the application\n          let transceivers = config.pc ? config.pc.getTransceivers() : null;\n          let transceiver = transceivers ? transceivers.find(t => t.receiver.track === ev.target) : null;\n          let mid = transceiver ? transceiver.mid : ev.target.id;\n          if (mid === ev.target.id && pluginHandle.mids && pluginHandle.mids[event.track.id]) mid = pluginHandle.mids[event.track.id];\n          try {\n            pluginHandle.onremotetrack(ev.target, mid, false, {\n              reason: 'ended'\n            });\n          } catch (e) {\n            Janus.error(\"Error calling onremotetrack on removal\", e);\n          }\n          delete pluginHandle.mids[event.track.id];\n        };\n        event.track.onmute = function (ev) {\n          Janus.log('Remote track muted:', ev);\n          if (!trackMutedTimeoutId) {\n            trackMutedTimeoutId = setTimeout(function () {\n              Janus.log('Removing remote track');\n              // Notify the application the track is gone\n              let transceivers = config.pc ? config.pc.getTransceivers() : null;\n              let transceiver = transceivers ? transceivers.find(t => t.receiver.track === ev.target) : null;\n              let mid = transceiver ? transceiver.mid : ev.target.id;\n              if (mid === ev.target.id && pluginHandle.mids && pluginHandle.mids[event.track.id]) mid = pluginHandle.mids[event.track.id];\n              try {\n                pluginHandle.onremotetrack(ev.target, mid, false, {\n                  reason: 'mute'\n                });\n              } catch (e) {\n                Janus.error(\"Error calling onremotetrack on mute\", e);\n              }\n              trackMutedTimeoutId = null;\n              // Chrome seems to raise mute events only at multiples of 834ms;\n              // we set the timeout to three times this value (rounded to 840ms)\n            }, 3 * 840);\n          }\n        };\n        event.track.onunmute = function (ev) {\n          Janus.log('Remote track flowing again:', ev);\n          if (trackMutedTimeoutId != null) {\n            clearTimeout(trackMutedTimeoutId);\n            trackMutedTimeoutId = null;\n          } else {\n            try {\n              // Notify the application the track is back\n              let transceivers = config.pc ? config.pc.getTransceivers() : null;\n              let transceiver = transceivers ? transceivers.find(t => t.receiver.track === ev.target) : null;\n              let mid = transceiver ? transceiver.mid : ev.target.id;\n              pluginHandle.onremotetrack(ev.target, mid, true, {\n                reason: 'unmute'\n              });\n            } catch (e) {\n              Janus.error(\"Error calling onremotetrack on unmute\", e);\n            }\n          }\n        };\n      };\n    }\n\n    // Helper function used when creating either an offer or answer: it\n    // prepares what needs to be prepared, including creating a new\n    // PeerConnection (if needed) and updating the tracks configuration,\n    // before invoking the function to actually generate the offer/answer\n    async function prepareWebrtc(handleId, offer, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : webrtcError;\n      let jsep = callbacks.jsep;\n      if (offer && jsep) {\n        Janus.error(\"Provided a JSEP to a createOffer\");\n        callbacks.error(\"Provided a JSEP to a createOffer\");\n        return;\n      } else if (!offer && (!jsep || !jsep.type || !jsep.sdp)) {\n        Janus.error(\"A valid JSEP is required for createAnswer\");\n        callbacks.error(\"A valid JSEP is required for createAnswer\");\n        return;\n      }\n      // If the deprecated media was provided instead of tracks, translate it\n      if (callbacks.media && !callbacks.tracks) {\n        callbacks.tracks = Janus.mediaToTracks(callbacks.media);\n        if (callbacks.simulcast === true || callbacks.simulcast2 === true || callbacks.svc) {\n          // Find the video track and add simulcast/SVC info there\n          for (let track of callbacks.tracks) {\n            if (track.type === 'video') {\n              if (callbacks.simulcast === true || callbacks.simulcast2 === true) track.simulcast = true;else if (callbacks.svc) track.svc = callbacks.svc;\n              break;\n            }\n          }\n        }\n        Janus.warn('Deprecated media object passed, use tracks instead. Automatically translated to:', callbacks.tracks);\n      }\n      // Check that callbacks.array is a valid array\n      if (callbacks.tracks && !Array.isArray(callbacks.tracks)) {\n        Janus.error(\"Tracks must be an array\");\n        callbacks.error(\"Tracks must be an array\");\n        return;\n      }\n      // Get the plugin handle\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        callbacks.error(\"Invalid handle\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      config.trickle = isTrickleEnabled(callbacks.trickle);\n      try {\n        // Create a PeerConnection, if needed\n        createPeerconnectionIfNeeded(handleId, callbacks);\n        if (offer) {\n          // Capture devices and setup tracks, if needed\n          await captureDevices(handleId, callbacks);\n        }\n        // Create offer or answer now (depending on the context)\n        if (!jsep) {\n          let offer = await createOffer(handleId, callbacks);\n          callbacks.success(offer);\n        } else {\n          await config.pc.setRemoteDescription(jsep);\n          Janus.log(\"Remote description accepted!\");\n          config.remoteSdp = jsep.sdp;\n          // Any trickle candidate we cached?\n          if (config.candidates && config.candidates.length > 0) {\n            for (let i = 0; i < config.candidates.length; i++) {\n              let candidate = config.candidates[i];\n              Janus.debug(\"Adding remote candidate:\", candidate);\n              if (!candidate || candidate.completed === true) {\n                // end-of-candidates\n                config.pc.addIceCandidate(Janus.endOfCandidates);\n              } else {\n                // New candidate\n                config.pc.addIceCandidate(candidate);\n              }\n            }\n            config.candidates = [];\n          }\n          // Capture devices and setup tracks, if needed\n          await captureDevices(handleId, callbacks);\n          // Create the answer now\n          let answer = await createAnswer(handleId, callbacks);\n          callbacks.success(answer);\n        }\n      } catch (err) {\n        Janus.error(err);\n        callbacks.error(err);\n      }\n    }\n    function prepareWebrtcPeer(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : webrtcError;\n      callbacks.customizeSdp = typeof callbacks.customizeSdp == \"function\" ? callbacks.customizeSdp : Janus.noop;\n      let jsep = callbacks.jsep;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        callbacks.error(\"Invalid handle\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (jsep) {\n        if (!config.pc) {\n          Janus.warn(\"Wait, no PeerConnection?? if this is an answer, use createAnswer and not handleRemoteJsep\");\n          callbacks.error(\"No PeerConnection: if this is an answer, use createAnswer and not handleRemoteJsep\");\n          return;\n        }\n        callbacks.customizeSdp(jsep);\n        config.pc.setRemoteDescription(jsep).then(function () {\n          Janus.log(\"Remote description accepted!\");\n          config.remoteSdp = jsep.sdp;\n          // Any trickle candidate we cached?\n          if (config.candidates && config.candidates.length > 0) {\n            for (let i = 0; i < config.candidates.length; i++) {\n              let candidate = config.candidates[i];\n              Janus.debug(\"Adding remote candidate:\", candidate);\n              if (!candidate || candidate.completed === true) {\n                // end-of-candidates\n                config.pc.addIceCandidate(Janus.endOfCandidates);\n              } else {\n                // New candidate\n                config.pc.addIceCandidate(candidate);\n              }\n            }\n            config.candidates = [];\n          }\n          // Done\n          callbacks.success();\n        }, callbacks.error);\n      } else {\n        callbacks.error(\"Invalid JSEP\");\n      }\n    }\n    async function createOffer(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.customizeSdp = typeof callbacks.customizeSdp == \"function\" ? callbacks.customizeSdp : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        throw \"Invalid handle\";\n      }\n      let config = pluginHandle.webrtcStuff;\n      Janus.log(\"Creating offer (iceDone=\" + config.iceDone + \")\");\n      // https://code.google.com/p/webrtc/issues/detail?id=3508\n      let mediaConstraints = {};\n      let iceRestart = callbacks.iceRestart === true;\n      // If we need an ICE restart, set the related constraint\n      if (iceRestart) mediaConstraints.iceRestart = true;\n      Janus.debug(mediaConstraints);\n      let offer = await config.pc.createOffer(mediaConstraints);\n      Janus.debug(offer);\n      // JSON.stringify doesn't work on some WebRTC objects anymore\n      // See https://code.google.com/p/chromium/issues/detail?id=467366\n      let jsep = {\n        type: 'offer',\n        sdp: offer.sdp\n      };\n      callbacks.customizeSdp(jsep);\n      offer.sdp = jsep.sdp;\n      Janus.log(\"Setting local description\");\n      config.mySdp = {\n        type: 'offer',\n        sdp: offer.sdp\n      };\n      await config.pc.setLocalDescription(offer);\n      config.mediaConstraints = mediaConstraints;\n      if (!config.iceDone && !config.trickle) {\n        // FIXME Don't do anything until we have all candidates\n        Janus.log(\"Waiting for all candidates...\");\n        return null;\n      }\n      // If transforms are present, notify Janus that the media is end-to-end encrypted\n      if (config.insertableStreams || config.externalEncryption) offer.e2ee = true;\n      return offer;\n    }\n    async function createAnswer(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.customizeSdp = typeof callbacks.customizeSdp == \"function\" ? callbacks.customizeSdp : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        throw \"Invalid handle\";\n      }\n      let config = pluginHandle.webrtcStuff;\n      Janus.log(\"Creating answer (iceDone=\" + config.iceDone + \")\");\n      let answer = await config.pc.createAnswer();\n      Janus.debug(answer);\n      // JSON.stringify doesn't work on some WebRTC objects anymore\n      // See https://code.google.com/p/chromium/issues/detail?id=467366\n      let jsep = {\n        type: 'answer',\n        sdp: answer.sdp\n      };\n      callbacks.customizeSdp(jsep);\n      answer.sdp = jsep.sdp;\n      Janus.log(\"Setting local description\");\n      config.mySdp = {\n        type: 'answer',\n        sdp: answer.sdp\n      };\n      await config.pc.setLocalDescription(answer);\n      if (!config.iceDone && !config.trickle) {\n        // FIXME Don't do anything until we have all candidates\n        Janus.log(\"Waiting for all candidates...\");\n        return null;\n      }\n      // If transforms are present, notify Janus that the media is end-to-end encrypted\n      if (config.insertableStreams || config.externalEncryption) answer.e2ee = true;\n      return answer;\n    }\n    function sendSDP(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == \"function\" ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == \"function\" ? callbacks.error : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle, not sending anything\");\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      Janus.log(\"Sending offer/answer SDP...\");\n      if (!config.mySdp) {\n        Janus.warn(\"Local SDP instance is invalid, not sending anything...\");\n        return;\n      }\n      config.mySdp = {\n        type: config.pc.localDescription.type,\n        sdp: config.pc.localDescription.sdp\n      };\n      if (config.trickle === false) config.mySdp[\"trickle\"] = false;\n      Janus.debug(callbacks);\n      config.sdpSent = true;\n      callbacks.success(config.mySdp);\n    }\n    async function replaceTracks(handleId, callbacks) {\n      callbacks = callbacks || {};\n      callbacks.success = typeof callbacks.success == 'function' ? callbacks.success : Janus.noop;\n      callbacks.error = typeof callbacks.error == 'function' ? callbacks.error : Janus.noop;\n      // Check that callbacks.array is a valid array\n      if (callbacks.tracks && !Array.isArray(callbacks.tracks)) {\n        Janus.error('Tracks must be an array');\n        callbacks.error('Tracks must be an array');\n        return;\n      }\n      // Add the replace:true if it's missing\n      for (let track of callbacks.tracks) {\n        if (track.add || !track.replace && !track.remove) track.replace = true;\n      }\n      try {\n        await captureDevices(handleId, callbacks);\n        callbacks.success();\n      } catch (err) {\n        Janus.error(err);\n        callbacks.error(err);\n      }\n    }\n    async function captureDevices(handleId, callbacks) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn('Invalid handle, not sending anything');\n        throw 'Invalid handle';\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn('Invalid PeerConnection');\n        throw 'Invalid PeerConnection';\n      }\n      let tracks = callbacks.tracks;\n      if (!tracks || !Array.isArray(tracks) || tracks.length === 0) {\n        // Nothing to do\n        return;\n      }\n      let openedConsentDialog = false;\n      // Check if we can/should group getUserMedia calls\n      let groups = {};\n      for (let track of tracks) {\n        delete track.gumGroup;\n        if (!track.type || !['audio', 'video'].includes(track.type)) continue;\n        if (!track.capture || track.capture instanceof MediaStreamTrack) continue;\n        let group = track.group ? track.group : 'default';\n        if (!groups[group]) groups[group] = {};\n        if (groups[group][track.type]) continue;\n        track.gumGroup = group;\n        groups[group][track.type] = track;\n      }\n      let keys = Object.keys(groups);\n      for (let key of keys) {\n        let group = groups[key];\n        if (!group.audio || !group.video) {\n          if (group.audio) delete group.audio.gumGroup;\n          if (group.video) delete group.video.gumGroup;\n          delete groups[key];\n        }\n      }\n      let answer = callbacks.jsep ? true : false;\n      for (let track of tracks) {\n        if (!track.type) {\n          Janus.warn('Missing track type:', track);\n          continue;\n        }\n        if (track.type === 'data') {\n          // Easy enough: create a datachannel if we don't have one already\n          if (config.pc.ondatachannel) {\n            Janus.warn('Data channel exists already, not creating another one');\n            continue;\n          }\n          Janus.log('Creating default data channel');\n          createDataChannel(handleId, Janus.dataChanDefaultLabel, null, false);\n          config.pc.ondatachannel = function (event) {\n            Janus.log('Data channel created by Janus:', event);\n            createDataChannel(handleId, event.channel.label, event.channel.protocol, event.channel);\n          };\n          continue;\n        }\n        if ((typeof track.add === 'undefined' || track.add === null) && (typeof track.remove === 'undefined' || track.remove === null) && (typeof track.replace === 'undefined' || track.replace === null)) {\n          // Let's default to 'add'\n          track.add = true;\n        }\n        if (track.add && track.remove || track.add && track.remove && track.replace) {\n          Janus.warn('Conflicting actions for track, ignoring:', track);\n          continue;\n        }\n        if (track.add && track.replace) {\n          Janus.warn('Both add and replace provided, falling back to replace:', track);\n          delete track.add;\n        } else if (track.remove && track.replace) {\n          Janus.warn('Both remove and replace provided, falling back to remove:', track);\n          delete track.replace;\n        }\n        let kind = track.type;\n        if (track.type === 'screen') kind = 'video'; // FIXME\n        let transceiver = null,\n          sender = null;\n        if (track.mid) {\n          // Search by mid\n          transceiver = config.pc.getTransceivers().find(t => t.mid === track.mid && t.receiver.track.kind === kind);\n        } else {\n          // Find the first track of this type\n          transceiver = config.pc.getTransceivers().find(t => t.receiver.track.kind === kind);\n        }\n        if (track.replace || track.remove) {\n          if (!transceiver) {\n            Janus.warn(\"Couldn't find a transceiver for track:\", track);\n            continue;\n          }\n          if (!transceiver.sender) {\n            Janus.warn('No sender in the transceiver for track:', track);\n            continue;\n          }\n          sender = transceiver.sender;\n        }\n        if (answer && !transceiver) {\n          transceiver = config.pc.getTransceivers().find(t => t.receiver.track.kind === kind);\n          if (!transceiver) {\n            Janus.warn(\"Couldn't find a transceiver for track:\", track);\n            continue;\n          }\n        }\n        // Capture the new track, if we need to\n        let nt = null,\n          trackId = null;\n        if (track.remove || track.replace) {\n          Janus.log('Removing track from PeerConnection', track);\n          trackId = sender.track ? sender.track.id : null;\n          await sender.replaceTrack(null);\n          // Get rid of the old track\n          if (trackId && config.myStream) {\n            let rt = null;\n            if (kind === 'audio' && config.myStream.getAudioTracks() && config.myStream.getAudioTracks().length) {\n              for (let t of config.myStream.getAudioTracks()) {\n                if (t.id === trackId) {\n                  rt = t;\n                  Janus.log('Removing audio track:', rt);\n                }\n              }\n            } else if (kind === 'video' && config.myStream.getVideoTracks() && config.myStream.getVideoTracks().length) {\n              for (let t of config.myStream.getVideoTracks()) {\n                if (t.id === trackId) {\n                  rt = t;\n                  Janus.log('Removing video track:', rt);\n                }\n              }\n            }\n            if (rt) {\n              // Remove the track and notify the application\n              try {\n                config.myStream.removeTrack(rt);\n                pluginHandle.onlocaltrack(rt, false);\n              } catch (e) {\n                Janus.error(\"Error calling onlocaltrack on removal for renegotiation\", e);\n              }\n              // Close the old track (unless we've been asked not to)\n              if (rt.dontStop !== true) {\n                try {\n                  rt.stop();\n                  // eslint-disable-next-line no-unused-vars\n                } catch (e) {}\n              }\n            }\n          }\n        }\n        if (track.capture) {\n          if (track.gumGroup && groups[track.gumGroup] && groups[track.gumGroup].stream) {\n            // We did a getUserMedia before already\n            let stream = groups[track.gumGroup].stream;\n            nt = track.type === 'audio' ? stream.getAudioTracks()[0] : stream.getVideoTracks()[0];\n            delete groups[track.gumGroup].stream;\n            delete groups[track.gumGroup];\n            delete track.gumGroup;\n          } else if (track.capture instanceof MediaStreamTrack) {\n            // An external track was provided, use that\n            nt = track.capture;\n          } else {\n            if (!openedConsentDialog) {\n              openedConsentDialog = true;\n              pluginHandle.consentDialog(true);\n            }\n            let constraints = Janus.trackConstraints(track),\n              stream = null;\n            if (track.type === 'audio' || track.type === 'video') {\n              // Use getUserMedia: check if we need to group audio and video together\n              if (track.gumGroup) {\n                let otherType = track.type === 'audio' ? 'video' : 'audio';\n                if (groups[track.gumGroup] && groups[track.gumGroup][otherType]) {\n                  let otherTrack = groups[track.gumGroup][otherType];\n                  let otherConstraints = Janus.trackConstraints(otherTrack);\n                  constraints[otherType] = otherConstraints[otherType];\n                }\n              }\n              stream = await navigator.mediaDevices.getUserMedia(constraints);\n              if (track.gumGroup && constraints.audio && constraints.video) {\n                // We just performed a grouped getUserMedia, keep track of the\n                // stream so that we can immediately assign the track later\n                groups[track.gumGroup].stream = stream;\n                delete track.gumGroup;\n              }\n            } else {\n              // Use getDisplayMedia\n              stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n            }\n            nt = track.type === 'audio' ? stream.getAudioTracks()[0] : stream.getVideoTracks()[0];\n          }\n          if (track.replace) {\n            // Replace the track\n            await sender.replaceTrack(nt);\n            // Update the transceiver direction\n            let newDirection = 'sendrecv';\n            if (track.recv === false || transceiver.direction === 'inactive' || transceiver.direction === 'sendonly') newDirection = 'sendonly';\n            if (transceiver.setDirection) transceiver.setDirection(newDirection);else transceiver.direction = newDirection;\n          } else {\n            // FIXME Add as a new track\n            if (!config.myStream) config.myStream = new MediaStream();\n            if (kind === 'audio' || !track.simulcast && !track.svc) {\n              sender = config.pc.addTrack(nt, config.myStream);\n              transceiver = config.pc.getTransceivers().find(t => t.sender === sender);\n            } else if (track.simulcast) {\n              if (Janus.webRTCAdapter.browserDetails.browser !== 'firefox') {\n                // Standard RID\n                Janus.log('Enabling rid-based simulcasting:', nt);\n                let maxBitrates = getMaxBitrates(track.simulcastMaxBitrates);\n                transceiver = config.pc.addTransceiver(nt, {\n                  direction: 'sendrecv',\n                  streams: [config.myStream],\n                  sendEncodings: track.sendEncodings || [{\n                    rid: 'h',\n                    active: true,\n                    scalabilityMode: 'L1T2',\n                    maxBitrate: maxBitrates.high\n                  }, {\n                    rid: 'm',\n                    active: true,\n                    scalabilityMode: 'L1T2',\n                    maxBitrate: maxBitrates.medium,\n                    scaleResolutionDownBy: 2\n                  }, {\n                    rid: 'l',\n                    active: true,\n                    scalabilityMode: 'L1T2',\n                    maxBitrate: maxBitrates.low,\n                    scaleResolutionDownBy: 4\n                  }]\n                });\n              } else {\n                // Firefox-based RID, based on https://gist.github.com/voluntas/088bc3cc62094730647b\n                Janus.log('Enabling Simulcasting for Firefox (RID)');\n                transceiver = config.pc.addTransceiver(nt, {\n                  direction: 'sendrecv',\n                  streams: [config.myStream]\n                });\n                sender = transceiver ? transceiver.sender : null;\n                if (sender) {\n                  let parameters = sender.getParameters();\n                  if (!parameters) parameters = {};\n                  let maxBitrates = getMaxBitrates(track.simulcastMaxBitrates);\n                  parameters.encodings = track.sendEncodings || [{\n                    rid: 'h',\n                    active: true,\n                    maxBitrate: maxBitrates.high\n                  }, {\n                    rid: 'm',\n                    active: true,\n                    maxBitrate: maxBitrates.medium,\n                    scaleResolutionDownBy: 2\n                  }, {\n                    rid: 'l',\n                    active: true,\n                    maxBitrate: maxBitrates.low,\n                    scaleResolutionDownBy: 4\n                  }];\n                  sender.setParameters(parameters);\n                }\n              }\n            } else {\n              Janus.log('Enabling SVC (' + track.svc + '):', nt);\n              transceiver = config.pc.addTransceiver(nt, {\n                direction: 'sendrecv',\n                streams: [config.myStream],\n                sendEncodings: [{\n                  scalabilityMode: track.svc\n                }]\n              });\n            }\n            if (!sender) sender = transceiver ? transceiver.sender : null;\n            // Check if we need to override some settings\n            if (track.codec) {\n              if (Janus.webRTCAdapter.browserDetails.browser === 'firefox') {\n                Janus.warn('setCodecPreferences not supported in Firefox, ignoring codec for track:', track);\n              } else if (typeof track.codec !== 'string') {\n                Janus.warn('Invalid codec value, ignoring for track:', track);\n              } else {\n                let mimeType = kind + '/' + track.codec.toLowerCase();\n                let codecs = RTCRtpReceiver.getCapabilities(kind).codecs.filter(function (codec) {\n                  return codec.mimeType.toLowerCase() === mimeType;\n                });\n                if (!codecs || codecs.length === 0) {\n                  Janus.warn('Codec not supported in this browser for this track, ignoring:', track);\n                } else if (transceiver) {\n                  try {\n                    transceiver.setCodecPreferences(codecs);\n                  } catch (err) {\n                    Janus.warn('Failed enforcing codec for this ' + kind + ' track:', err);\n                  }\n                }\n              }\n            }\n            if (track.bitrate) {\n              // Override maximum bitrate\n              if (track.simulcast || track.svc) {\n                Janus.warn('Ignoring bitrate for simulcast/SVC track, use sendEncodings for that');\n              } else if (isNaN(track.bitrate) || track.bitrate < 0) {\n                Janus.warn('Ignoring invalid bitrate for track:', track);\n              } else if (sender) {\n                let params = sender.getParameters();\n                if (!params || !params.encodings || params.encodings.length === 0) {\n                  Janus.warn('No encodings in the sender parameters, ignoring bitrate for track:', track);\n                } else {\n                  params.encodings[0].maxBitrate = track.bitrate;\n                  await sender.setParameters(params);\n                }\n              }\n            }\n            if (kind === 'video' && track.framerate) {\n              // Override maximum framerate\n              if (track.simulcast || track.svc) {\n                Janus.warn('Ignoring framerate for simulcast/SVC track, use sendEncodings for that');\n              } else if (isNaN(track.framerate) || track.framerate < 0) {\n                Janus.warn('Ignoring invalid framerate for track:', track);\n              } else if (sender) {\n                let params = sender.getParameters();\n                if (!params || !params.encodings || params.encodings.length === 0) {\n                  Janus.warn('No encodings in the sender parameters, ignoring framerate for track:', track);\n                } else {\n                  params.encodings[0].maxFramerate = track.framerate;\n                  await sender.setParameters(params);\n                }\n              }\n            }\n            // Check if insertable streams are involved\n            if (track.transforms) {\n              if (sender && track.transforms.sender) {\n                // There's a sender transform, set it on the transceiver sender\n                let senderStreams = null;\n                if (RTCRtpSender.prototype.createEncodedStreams) {\n                  senderStreams = sender.createEncodedStreams();\n                } else if (RTCRtpSender.prototype.createAudioEncodedStreams || RTCRtpSender.prototype.createEncodedVideoStreams) {\n                  if (kind === 'audio') {\n                    senderStreams = sender.createEncodedAudioStreams();\n                  } else if (kind === 'video') {\n                    senderStreams = sender.createEncodedVideoStreams();\n                  }\n                }\n                if (senderStreams) {\n                  if (senderStreams.readableStream && senderStreams.writableStream) {\n                    senderStreams.readableStream.pipeThrough(track.transforms.sender).pipeTo(senderStreams.writableStream);\n                  } else if (senderStreams.readable && senderStreams.writable) {\n                    senderStreams.readable.pipeThrough(track.transforms.sender).pipeTo(senderStreams.writable);\n                  }\n                }\n              }\n              if (transceiver && transceiver.receiver && track.transforms.receiver) {\n                // There's a receiver transform, set it on the transceiver receiver\n                let receiverStreams = null;\n                if (RTCRtpReceiver.prototype.createEncodedStreams) {\n                  receiverStreams = transceiver.receiver.createEncodedStreams();\n                } else if (RTCRtpReceiver.prototype.createAudioEncodedStreams || RTCRtpReceiver.prototype.createEncodedVideoStreams) {\n                  if (kind === 'audio') {\n                    receiverStreams = transceiver.receiver.createEncodedAudioStreams();\n                  } else if (kind === 'video') {\n                    receiverStreams = transceiver.receiver.createEncodedVideoStreams();\n                  }\n                }\n                if (receiverStreams) {\n                  if (receiverStreams.readableStream && receiverStreams.writableStream) {\n                    receiverStreams.readableStream.pipeThrough(track.transforms.receiver).pipeTo(receiverStreams.writableStream);\n                  } else if (receiverStreams.readable && receiverStreams.writable) {\n                    receiverStreams.readable.pipeThrough(track.transforms.receiver).pipeTo(receiverStreams.writable);\n                  }\n                }\n              }\n            }\n          }\n          if (nt && track.dontStop === true) nt.dontStop = true;\n        } else if (track.recv) {\n          // Maybe a new recvonly track\n          if (!transceiver) transceiver = config.pc.addTransceiver(kind);\n          if (transceiver) {\n            // Check if we need to override some settings\n            if (track.codec) {\n              if (Janus.webRTCAdapter.browserDetails.browser === 'firefox') {\n                Janus.warn('setCodecPreferences not supported in Firefox, ignoring codec for track:', track);\n              } else if (typeof track.codec !== 'string') {\n                Janus.warn('Invalid codec value, ignoring for track:', track);\n              } else {\n                let mimeType = kind + '/' + track.codec.toLowerCase();\n                let codecs = RTCRtpReceiver.getCapabilities(kind).codecs.filter(function (codec) {\n                  return codec.mimeType.toLowerCase() === mimeType;\n                });\n                if (!codecs || codecs.length === 0) {\n                  Janus.warn('Codec not supported in this browser for this track, ignoring:', track);\n                } else {\n                  try {\n                    transceiver.setCodecPreferences(codecs);\n                  } catch (err) {\n                    Janus.warn('Failed enforcing codec for this ' + kind + ' track:', err);\n                  }\n                }\n              }\n            }\n            // Check if insertable streams are involved\n            if (transceiver.receiver && track.transforms && track.transforms.receiver) {\n              // There's a receiver transform, set it on the transceiver receiver\n              let receiverStreams = null;\n              if (RTCRtpReceiver.prototype.createEncodedStreams) {\n                receiverStreams = transceiver.receiver.createEncodedStreams();\n              } else if (RTCRtpReceiver.prototype.createAudioEncodedStreams || RTCRtpReceiver.prototype.createEncodedVideoStreams) {\n                if (kind === 'audio') {\n                  receiverStreams = transceiver.receiver.createEncodedAudioStreams();\n                } else if (kind === 'video') {\n                  receiverStreams = transceiver.receiver.createEncodedVideoStreams();\n                }\n              }\n              if (receiverStreams) {\n                if (receiverStreams.readableStream && receiverStreams.writableStream) {\n                  receiverStreams.readableStream.pipeThrough(track.transforms.receiver).pipeTo(receiverStreams.writableStream);\n                } else if (receiverStreams.readable && receiverStreams.writable) {\n                  receiverStreams.readable.pipeThrough(track.transforms.receiver).pipeTo(receiverStreams.writable);\n                }\n              }\n            }\n          }\n        }\n        if (nt) {\n          // FIXME Add the new track locally\n          config.myStream.addTrack(nt);\n          // Notify the application about the new local track, if any\n          nt.onended = function (ev) {\n            Janus.log('Local track removed:', ev);\n            try {\n              pluginHandle.onlocaltrack(ev.target, false);\n            } catch (e) {\n              Janus.error(\"Error calling onlocaltrack following end\", e);\n            }\n          };\n          try {\n            pluginHandle.onlocaltrack(nt, true);\n          } catch (e) {\n            Janus.error(\"Error calling onlocaltrack for track add\", e);\n          }\n        }\n        // Update the direction of the transceiver\n        if (transceiver) {\n          let curdir = transceiver.direction,\n            newdir = null;\n          let send = nt && transceiver.sender.track,\n            recv = track.recv !== false && transceiver.receiver.track;\n          if (send && recv) newdir = 'sendrecv';else if (send && !recv) newdir = 'sendonly';else if (!send && recv) newdir = 'recvonly';else if (!send && !recv) newdir = 'inactive';\n          if (newdir && newdir !== curdir) {\n            Janus.warn('Changing direction of transceiver to ' + newdir + ' (was ' + curdir + ')', track);\n            if (transceiver.setDirection) transceiver.setDirection(newdir);else transceiver.direction = newdir;\n          }\n        }\n      }\n      if (openedConsentDialog) pluginHandle.consentDialog(false);\n    }\n    function getLocalTracks(handleId) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn('Invalid handle');\n        return null;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn('Invalid PeerConnection');\n        return null;\n      }\n      let tracks = [];\n      let transceivers = config.pc.getTransceivers();\n      for (let tr of transceivers) {\n        let track = null;\n        if (tr.sender && tr.sender.track) {\n          track = {\n            mid: tr.mid\n          };\n          track.type = tr.sender.track.kind;\n          track.id = tr.sender.track.id;\n          track.label = tr.sender.track.label;\n        }\n        if (track) tracks.push(track);\n      }\n      return tracks;\n    }\n    function getRemoteTracks(handleId) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn('Invalid handle');\n        return null;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn('Invalid PeerConnection');\n        return null;\n      }\n      let tracks = [];\n      let transceivers = config.pc.getTransceivers();\n      for (let tr of transceivers) {\n        let track = null;\n        if (tr.receiver && tr.receiver.track) {\n          track = {\n            mid: tr.mid\n          };\n          track.type = tr.receiver.track.kind;\n          track.id = tr.receiver.track.id;\n          track.label = tr.receiver.track.label;\n        }\n        if (track) tracks.push(track);\n      }\n      return tracks;\n    }\n    function getVolume(handleId, mid, remote, result) {\n      result = typeof result == \"function\" ? result : Janus.noop;\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        result(0);\n        return;\n      }\n      let stream = remote ? \"remote\" : \"local\";\n      let config = pluginHandle.webrtcStuff;\n      if (!config.volume[stream]) config.volume[stream] = {\n        value: 0\n      };\n      // Start getting the volume, if audioLevel in getStats is supported (apparently\n      // they're only available in Chrome/Safari right now: https://webrtc-stats.callstats.io/)\n      if (config.pc && config.pc.getStats && (Janus.webRTCAdapter.browserDetails.browser === \"chrome\" || Janus.webRTCAdapter.browserDetails.browser === \"safari\")) {\n        // Are we interested in a mid in particular?\n        let query = config.pc;\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"audio\");\n          if (!transceiver) {\n            Janus.warn(\"No audio transceiver with mid \" + mid);\n            result(0);\n            return;\n          }\n          if (remote && !transceiver.receiver) {\n            Janus.warn(\"Remote transceiver track unavailable\");\n            result(0);\n            return;\n          } else if (!remote && !transceiver.sender) {\n            Janus.warn(\"Local transceiver track unavailable\");\n            result(0);\n            return;\n          }\n          query = remote ? transceiver.receiver : transceiver.sender;\n        }\n        query.getStats().then(function (stats) {\n          stats.forEach(function (res) {\n            if (!res || res.kind !== \"audio\") return;\n            if (remote && !res.remoteSource || !remote && res.type !== \"media-source\") return;\n            result(res.audioLevel ? res.audioLevel : 0);\n          });\n        });\n        return config.volume[stream].value;\n      } else {\n        // audioInputLevel and audioOutputLevel seem only available in Chrome? audioLevel\n        // seems to be available on Chrome and Firefox, but they don't seem to work\n        Janus.warn(\"Getting the \" + stream + \" volume unsupported by browser\");\n        result(0);\n        return;\n      }\n    }\n    function isMuted(handleId, mid, video) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        return true;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn(\"Invalid PeerConnection\");\n        return true;\n      }\n      if (!config.myStream) {\n        Janus.warn(\"Invalid local MediaStream\");\n        return true;\n      }\n      if (video) {\n        // Check video track\n        if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {\n          Janus.warn(\"No video track\");\n          return true;\n        }\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"video\");\n          if (!transceiver) {\n            Janus.warn(\"No video transceiver with mid \" + mid);\n            return true;\n          }\n          if (!transceiver.sender || !transceiver.sender.track) {\n            Janus.warn(\"No video sender with mid \" + mid);\n            return true;\n          }\n          return !transceiver.sender.track.enabled;\n        } else {\n          return !config.myStream.getVideoTracks()[0].enabled;\n        }\n      } else {\n        // Check audio track\n        if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {\n          Janus.warn(\"No audio track\");\n          return true;\n        }\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"audio\");\n          if (!transceiver) {\n            Janus.warn(\"No audio transceiver with mid \" + mid);\n            return true;\n          }\n          if (!transceiver.sender || !transceiver.sender.track) {\n            Janus.warn(\"No audio sender with mid \" + mid);\n            return true;\n          }\n          return !transceiver.sender.track.enabled;\n        } else {\n          return !config.myStream.getAudioTracks()[0].enabled;\n        }\n      }\n    }\n    function mute(handleId, mid, video, mute) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        return false;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn(\"Invalid PeerConnection\");\n        return false;\n      }\n      if (!config.myStream) {\n        Janus.warn(\"Invalid local MediaStream\");\n        return false;\n      }\n      if (video) {\n        // Mute/unmute video track\n        if (!config.myStream.getVideoTracks() || config.myStream.getVideoTracks().length === 0) {\n          Janus.warn(\"No video track\");\n          return false;\n        }\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"video\");\n          if (!transceiver) {\n            Janus.warn(\"No video transceiver with mid \" + mid);\n            return false;\n          }\n          if (!transceiver.sender || !transceiver.sender.track) {\n            Janus.warn(\"No video sender with mid \" + mid);\n            return false;\n          }\n          transceiver.sender.track.enabled = mute ? false : true;\n        } else {\n          for (const videostream of config.myStream.getVideoTracks()) {\n            videostream.enabled = !mute;\n          }\n        }\n      } else {\n        // Mute/unmute audio track\n        if (!config.myStream.getAudioTracks() || config.myStream.getAudioTracks().length === 0) {\n          Janus.warn(\"No audio track\");\n          return false;\n        }\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"audio\");\n          if (!transceiver) {\n            Janus.warn(\"No audio transceiver with mid \" + mid);\n            return false;\n          }\n          if (!transceiver.sender || !transceiver.sender.track) {\n            Janus.warn(\"No audio sender with mid \" + mid);\n            return false;\n          }\n          transceiver.sender.track.enabled = mute ? false : true;\n        } else {\n          for (const audiostream of config.myStream.getAudioTracks()) {\n            audiostream.enabled = !mute;\n          }\n        }\n      }\n      return true;\n    }\n    function getBitrate(handleId, mid) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn(\"Invalid handle\");\n        return \"Invalid handle\";\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) return \"Invalid PeerConnection\";\n      // Start getting the bitrate, if getStats is supported\n      if (config.pc.getStats) {\n        let query = config.pc;\n        let target = mid ? mid : \"default\";\n        if (mid) {\n          let transceiver = config.pc.getTransceivers().find(t => t.mid === mid && t.receiver.track.kind === \"video\");\n          if (!transceiver) {\n            Janus.warn(\"No video transceiver with mid \" + mid);\n            return \"No video transceiver with mid \" + mid;\n          }\n          if (!transceiver.receiver) {\n            Janus.warn(\"No video receiver with mid \" + mid);\n            return \"No video receiver with mid \" + mid;\n          }\n          query = transceiver.receiver;\n        }\n        if (!config.bitrate[target]) {\n          config.bitrate[target] = {\n            timer: null,\n            bsnow: null,\n            bsbefore: null,\n            tsnow: null,\n            tsbefore: null,\n            value: \"0 kbits/sec\"\n          };\n        }\n        if (!config.bitrate[target].timer) {\n          Janus.log(\"Starting bitrate timer\" + (mid ? \" for mid \" + mid : \"\") + \" (via getStats)\");\n          config.bitrate[target].timer = setInterval(function () {\n            query.getStats().then(function (stats) {\n              stats.forEach(function (res) {\n                if (!res) return;\n                let inStats = false;\n                // Check if these are statistics on incoming media\n                if ((res.mediaType === \"video\" || res.kind === \"video\" || res.id.toLowerCase().indexOf(\"video\") > -1) && res.type === \"inbound-rtp\" && res.id.indexOf(\"rtcp\") < 0) {\n                  // New stats\n                  inStats = true;\n                } else if (res.type == 'ssrc' && res.bytesReceived && (res.googCodecName === \"VP8\" || res.googCodecName === \"\")) {\n                  // Older Chromer versions\n                  inStats = true;\n                }\n                // Parse stats now\n                if (inStats) {\n                  config.bitrate[target].bsnow = res.bytesReceived;\n                  config.bitrate[target].tsnow = res.timestamp;\n                  if (config.bitrate[target].bsbefore === null || config.bitrate[target].tsbefore === null) {\n                    // Skip this round\n                    config.bitrate[target].bsbefore = config.bitrate[target].bsnow;\n                    config.bitrate[target].tsbefore = config.bitrate[target].tsnow;\n                  } else {\n                    // Calculate bitrate\n                    let timePassed = config.bitrate[target].tsnow - config.bitrate[target].tsbefore;\n                    if (Janus.webRTCAdapter.browserDetails.browser === \"safari\") timePassed = timePassed / 1000; // Apparently the timestamp is in microseconds, in Safari\n                    let bitRate = Math.round((config.bitrate[target].bsnow - config.bitrate[target].bsbefore) * 8 / timePassed);\n                    if (Janus.webRTCAdapter.browserDetails.browser === \"safari\") bitRate = parseInt(bitRate / 1000);\n                    config.bitrate[target].value = bitRate + ' kbits/sec';\n                    //~ Janus.log(\"Estimated bitrate is \" + config.bitrate.value);\n                    config.bitrate[target].bsbefore = config.bitrate[target].bsnow;\n                    config.bitrate[target].tsbefore = config.bitrate[target].tsnow;\n                  }\n                }\n              });\n            });\n          }, 1000);\n          return \"0 kbits/sec\"; // We don't have a bitrate value yet\n        }\n        return config.bitrate[target].value;\n      } else {\n        Janus.warn(\"Getting the video bitrate unsupported by browser\");\n        return \"Feature unsupported by browser\";\n      }\n    }\n    function setBitrate(handleId, mid, bitrate) {\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle || !pluginHandle.webrtcStuff) {\n        Janus.warn('Invalid handle');\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (!config.pc) {\n        Janus.warn('Invalid PeerConnection');\n        return;\n      }\n      let transceiver = config.pc.getTransceivers().find(t => t.mid === mid);\n      if (!transceiver) {\n        Janus.warn('No transceiver with mid', mid);\n        return;\n      }\n      if (!transceiver.sender) {\n        Janus.warn('No sender for transceiver with mid', mid);\n        return;\n      }\n      let params = transceiver.sender.getParameters();\n      if (!params || !params.encodings || params.encodings.length === 0) {\n        Janus.warn('No parameters encodings');\n      } else if (params.encodings.length > 1) {\n        Janus.warn('Ignoring bitrate for simulcast track, use sendEncodings for that');\n      } else if (isNaN(bitrate) || bitrate < 0) {\n        Janus.warn('Invalid bitrate (must be a positive integer)');\n      } else {\n        params.encodings[0].maxBitrate = bitrate;\n        transceiver.sender.setParameters(params);\n      }\n    }\n    function webrtcError(error) {\n      Janus.error(\"WebRTC error:\", error);\n    }\n    function cleanupWebrtc(handleId, hangupRequest) {\n      Janus.log(\"Cleaning WebRTC stuff\");\n      let pluginHandle = pluginHandles.get(handleId);\n      if (!pluginHandle) {\n        // Nothing to clean\n        return;\n      }\n      let config = pluginHandle.webrtcStuff;\n      if (config) {\n        if (hangupRequest === true) {\n          // Send a hangup request (we don't really care about the response)\n          let request = {\n            \"janus\": \"hangup\",\n            \"transaction\": Janus.randomString(12)\n          };\n          if (pluginHandle.token) request[\"token\"] = pluginHandle.token;\n          if (apisecret) request[\"apisecret\"] = apisecret;\n          Janus.debug(\"Sending hangup request (handle=\" + handleId + \"):\");\n          Janus.debug(request);\n          if (websockets) {\n            request[\"session_id\"] = sessionId;\n            request[\"handle_id\"] = handleId;\n            ws.send(JSON.stringify(request));\n          } else {\n            Janus.httpAPICall(server + \"/\" + sessionId + \"/\" + handleId, {\n              verb: 'POST',\n              withCredentials: withCredentials,\n              body: request\n            });\n          }\n        }\n        // Cleanup stack\n        if (config.volume) {\n          if (config.volume[\"local\"] && config.volume[\"local\"].timer) clearInterval(config.volume[\"local\"].timer);\n          if (config.volume[\"remote\"] && config.volume[\"remote\"].timer) clearInterval(config.volume[\"remote\"].timer);\n        }\n        for (let i in config.bitrate) {\n          if (config.bitrate[i].timer) clearInterval(config.bitrate[i].timer);\n        }\n        config.bitrate = {};\n        if (!config.streamExternal && config.myStream) {\n          Janus.log(\"Stopping local stream tracks\");\n          Janus.stopAllTracks(config.myStream);\n        }\n        config.streamExternal = false;\n        config.myStream = null;\n        // Close PeerConnection\n        try {\n          config.pc.close();\n          // eslint-disable-next-line no-unused-vars\n        } catch (e) {\n          // Do nothing\n        }\n        config.pc = null;\n        config.candidates = null;\n        config.mySdp = null;\n        config.remoteSdp = null;\n        config.iceDone = false;\n        config.dataChannel = {};\n        config.dtmfSender = null;\n        config.insertableStreams = false;\n        config.externalEncryption = false;\n      }\n      pluginHandle.oncleanup();\n    }\n    function isTrickleEnabled(trickle) {\n      Janus.debug(\"isTrickleEnabled:\", trickle);\n      return trickle === false ? false : true;\n    }\n  }\n  return Janus;\n});\nexport { Janus as default };","map":null,"metadata":{},"sourceType":"module"}