{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js\";\nimport React, { useEffect, useRef } from 'react';\nfunction MapComponent({\n  robots,\n  mapUrl\n}) {\n  // 부모 컴포넌트로부터 robots와 mapUrl 전달받음\n  const canvasRef = useRef(null);\n  const mapResolution = 0.05; // 기본 해상도 값\n\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n    mapImage.onload = () => {\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.drawImage(mapImage, 0, 0, imgWidth, imgHeight);\n      robots.forEach(robot => {\n        var _robot$status, _robot$status2, _robot$status3;\n        const {\n          x,\n          y\n        } = robot.location;\n        const {\n          mapX,\n          mapY\n        } = worldToMap(x, y, imgWidth, imgHeight, mapResolution);\n        let robotColor = 'gray';\n        if (((_robot$status = robot.status) === null || _robot$status === void 0 ? void 0 : _robot$status.state) === 'Tasking') {\n          robotColor = 'blue';\n        } else if (((_robot$status2 = robot.status) === null || _robot$status2 === void 0 ? void 0 : _robot$status2.state) === 'Waiting') {\n          robotColor = 'yellow';\n        } else if (((_robot$status3 = robot.status) === null || _robot$status3 === void 0 ? void 0 : _robot$status3.state) === 'Error') {\n          robotColor = 'red';\n        }\n        ctx.fillStyle = robotColor;\n        ctx.beginPath();\n        ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    };\n    mapImage.onerror = err => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + mapWidth * resolution / 2) / resolution;\n    const mapY = mapHeight - (y + mapHeight * resolution / 2) / resolution;\n    return {\n      mapX,\n      mapY\n    };\n  };\n  useEffect(() => {\n    if (mapUrl && robots.length > 0) {\n      const img = new Image();\n      img.src = mapUrl;\n      img.onload = () => {\n        drawMapAndRobots(img.width, img.height); // 지도 이미지와 로봇 데이터로 맵을 그림\n      };\n    }\n  }, [mapUrl, robots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-canvas-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, mapUrl ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"canvas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"\\uC9C0\\uB3C4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"));\n}\nexport default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","MapComponent","robots","mapUrl","canvasRef","mapResolution","drawMapAndRobots","imgWidth","imgHeight","canvas","current","console","error","ctx","getContext","mapImage","Image","src","onload","width","height","drawImage","forEach","robot","_robot$status","_robot$status2","_robot$status3","x","y","location","mapX","mapY","worldToMap","robotColor","status","state","fillStyle","beginPath","arc","Math","PI","fill","onerror","err","mapWidth","mapHeight","resolution","length","img","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Test/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nfunction MapComponent({ robots, mapUrl }) { // 부모 컴포넌트로부터 robots와 mapUrl 전달받음\n  const canvasRef = useRef(null);\n  const mapResolution = 0.05; // 기본 해상도 값\n\n  const drawMapAndRobots = (imgWidth, imgHeight) => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      console.error('캔버스 요소를 찾을 수 없습니다.');\n      return;\n    }\n\n    const ctx = canvas.getContext('2d');\n    const mapImage = new Image();\n    mapImage.src = mapUrl;\n\n    mapImage.onload = () => {\n      canvas.width = imgWidth;\n      canvas.height = imgHeight;\n      ctx.drawImage(mapImage, 0, 0, imgWidth, imgHeight);\n\n      robots.forEach((robot) => {\n        const { x, y } = robot.location;\n        const { mapX, mapY } = worldToMap(x, y, imgWidth, imgHeight, mapResolution);\n\n        let robotColor = 'gray';\n        if (robot.status?.state === 'Tasking') {\n          robotColor = 'blue';\n        } else if (robot.status?.state === 'Waiting') {\n          robotColor = 'yellow';\n        } else if (robot.status?.state === 'Error') {\n          robotColor = 'red';\n        }\n\n        ctx.fillStyle = robotColor;\n        ctx.beginPath();\n        ctx.arc(mapX, mapY, 5, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    };\n\n    mapImage.onerror = (err) => {\n      console.error('지도 이미지를 그리는 중 오류 발생:', err);\n    };\n  };\n\n  const worldToMap = (x, y, mapWidth, mapHeight, resolution) => {\n    const mapX = (x + (mapWidth * resolution) / 2) / resolution;\n    const mapY = mapHeight - (y + (mapHeight * resolution) / 2) / resolution;\n    return { mapX, mapY };\n  };\n\n  useEffect(() => {\n    if (mapUrl && robots.length > 0) {\n      const img = new Image();\n      img.src = mapUrl;\n      img.onload = () => {\n        drawMapAndRobots(img.width, img.height); // 지도 이미지와 로봇 데이터로 맵을 그림\n      };\n    }\n  }, [mapUrl, robots]);\n\n  return (\n    <div className=\"map-canvas-container\">\n      {mapUrl ? (\n        <canvas ref={canvasRef} className=\"canvas\"></canvas>\n      ) : (\n        <p>지도를 불러오는 중...</p>\n      )}\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}