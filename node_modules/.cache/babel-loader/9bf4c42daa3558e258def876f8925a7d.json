{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/components/SlamStream.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nconst SlamStream = ({\n  selectedRobot\n}) => {\n  const mapCanvasRef = useRef(null);\n  const scanCanvasRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = io('http://172.30.1.40:7002'); // slam_stream_server의 주소와 포트\n    setSocket(newSocket);\n    newSocket.on('video', ({\n      topic,\n      data\n    }) => {\n      const canvasRef = topic === '/map' ? mapCanvasRef.current : scanCanvasRef.current;\n      if (canvasRef) {\n        const context = canvasRef.getContext('2d');\n        const image = new Image();\n        image.onload = () => {\n          context.clearRect(0, 0, canvasRef.width, canvasRef.height);\n          context.drawImage(image, 0, 0, canvasRef.width, canvasRef.height);\n        };\n        image.src = `data:image/jpeg;base64,${data}`;\n      }\n    });\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"SLAM Stream\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: mapCanvasRef,\n    width: \"640\",\n    height: \"480\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: scanCanvasRef,\n    width: \"640\",\n    height: \"480\",\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }));\n};\nexport default SlamStream;","map":{"version":3,"names":["React","useEffect","useRef","useState","io","SlamStream","selectedRobot","mapCanvasRef","scanCanvasRef","socket","setSocket","newSocket","on","topic","data","canvasRef","current","context","getContext","image","Image","onload","clearRect","width","height","drawImage","src","close","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","position","top","left"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/components/SlamStream.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst SlamStream = ({ selectedRobot }) => {\n    const mapCanvasRef = useRef(null);\n    const scanCanvasRef = useRef(null);\n    const [socket, setSocket] = useState(null);\n\n    useEffect(() => {\n        const newSocket = io('http://172.30.1.40:7002'); // slam_stream_server의 주소와 포트\n        setSocket(newSocket);\n\n        newSocket.on('video', ({ topic, data }) => {\n            const canvasRef = topic === '/map' ? mapCanvasRef.current : scanCanvasRef.current;\n            if (canvasRef) {\n                const context = canvasRef.getContext('2d');\n                const image = new Image();\n                image.onload = () => {\n                    context.clearRect(0, 0, canvasRef.width, canvasRef.height);\n                    context.drawImage(image, 0, 0, canvasRef.width, canvasRef.height);\n                };\n                image.src = `data:image/jpeg;base64,${data}`;\n            }\n        });\n\n        return () => {\n            newSocket.close();\n        };\n    }, []);\n\n    return (\n        <div>\n            <h3>SLAM Stream</h3>\n            <canvas ref={mapCanvasRef} width=\"640\" height=\"480\" style={{ position: 'absolute', top: 0, left: 0 }} />\n            <canvas ref={scanCanvasRef} width=\"640\" height=\"480\" style={{ position: 'absolute', top: 0, left: 0 }} />\n        </div>\n    );\n};\n\nexport default SlamStream;\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EACtC,MAAMC,YAAY,GAAGL,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMM,aAAa,GAAGN,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE1CF,SAAS,CAAC,MAAM;IACZ,MAAMU,SAAS,GAAGP,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC;IACjDM,SAAS,CAACC,SAAS,CAAC;IAEpBA,SAAS,CAACC,EAAE,CAAC,OAAO,EAAE,CAAC;MAAEC,KAAK;MAAEC;IAAK,CAAC,KAAK;MACvC,MAAMC,SAAS,GAAGF,KAAK,KAAK,MAAM,GAAGN,YAAY,CAACS,OAAO,GAAGR,aAAa,CAACQ,OAAO;MACjF,IAAID,SAAS,EAAE;QACX,MAAME,OAAO,GAAGF,SAAS,CAACG,UAAU,CAAC,IAAI,CAAC;QAC1C,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;QACzBD,KAAK,CAACE,MAAM,GAAG,MAAM;UACjBJ,OAAO,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEP,SAAS,CAACQ,KAAK,EAAER,SAAS,CAACS,MAAM,CAAC;UAC1DP,OAAO,CAACQ,SAAS,CAACN,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAACQ,KAAK,EAAER,SAAS,CAACS,MAAM,CAAC;QACrE,CAAC;QACDL,KAAK,CAACO,GAAG,GAAG,0BAA0BZ,IAAI,EAAE;MAChD;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTH,SAAS,CAACgB,KAAK,CAAC,CAAC;IACrB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI3B,KAAA,CAAA4B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACIlC,KAAA,CAAA4B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,aAAe,CAAC,eACpBlC,KAAA,CAAA4B,aAAA;IAAQO,GAAG,EAAE5B,YAAa;IAACgB,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC,KAAK;IAACY,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACxGlC,KAAA,CAAA4B,aAAA;IAAQO,GAAG,EAAE3B,aAAc;IAACe,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC,KAAK;IAACY,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,GAAG,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAE;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACvG,CAAC;AAEd,CAAC;AAED,eAAe7B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}