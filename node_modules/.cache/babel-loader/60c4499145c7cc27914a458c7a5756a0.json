{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\nconst TaskFlow = forwardRef(({\n  workflow,\n  onTemporaryFlowAdd,\n  onTemporaryFlowDelete\n}, ref) => {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [temporaryWorkflow, setTemporaryWorkflow] = useState([]);\n\n  // 팝업 열기/닫기 토글\n  const togglePopup = () => {\n    setIsPopupOpen(!isPopupOpen);\n  };\n\n  // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n  const handleTaskFlowAdd = (nodeName, stepName) => {\n    if (nodeName.trim() === '' || stepName.trim() === '') return;\n    const newFlow = {\n      node: nodeName,\n      step: stepName\n    };\n    const updatedTemporaryWorkflow = [...temporaryWorkflow, newFlow];\n    setTemporaryWorkflow(updatedTemporaryWorkflow);\n    onTemporaryFlowAdd(newFlow);\n    togglePopup();\n  };\n\n  // 개별 워크플로우 항목을 삭제하는 함수\n  const handleRemoveFlow = index => {\n    const updatedWorkflow = temporaryWorkflow.filter((_, i) => i !== index - workflow.length);\n    setTemporaryWorkflow(updatedWorkflow);\n    onTemporaryFlowDelete(temporaryWorkflow[index - workflow.length]);\n  };\n\n  // 임시 플로우 초기화 함수\n  useImperativeHandle(ref, () => ({\n    clearTemporaryWorkflow() {\n      setTemporaryWorkflow([]);\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, workflow.concat(temporaryWorkflow).map((flow, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"task-flow-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 33\n    }\n  }, \"\\uB178\\uB4DC:\"), \" \", flow.node), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 33\n    }\n  }, \"\\uB2E8\\uACC4:\"), \" \", flow.step), index >= workflow.length && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"task-flow-remove-btn\",\n    onClick: () => handleRemoveFlow(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  }, \"\\xD7\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-flow-add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePopup,\n    className: \"task-flow-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, \"+\")))), isPopupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CreateTaskFlow, {\n    onClose: togglePopup,\n    onTaskFlowAdd: handleTaskFlowAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }))));\n});\nexport default TaskFlow;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","CreateTaskFlow","TaskFlow","workflow","onTemporaryFlowAdd","onTemporaryFlowDelete","ref","isPopupOpen","setIsPopupOpen","temporaryWorkflow","setTemporaryWorkflow","togglePopup","handleTaskFlowAdd","nodeName","stepName","trim","newFlow","node","step","updatedTemporaryWorkflow","handleRemoveFlow","index","updatedWorkflow","filter","_","i","length","clearTemporaryWorkflow","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","concat","map","flow","key","onClick","onClose","onTaskFlowAdd"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Task/TaskFlow.js"],"sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport './TaskFlow.css';\nimport CreateTaskFlow from './CreateTaskFlow';\n\nconst TaskFlow = forwardRef(({ workflow, onTemporaryFlowAdd, onTemporaryFlowDelete }, ref) => {\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [temporaryWorkflow, setTemporaryWorkflow] = useState([]);\n\n    // 팝업 열기/닫기 토글\n    const togglePopup = () => {\n        setIsPopupOpen(!isPopupOpen);\n    };\n\n    // CreateTaskFlow 컴포넌트로부터 새로운 작업 플로우를 추가하는 함수\n    const handleTaskFlowAdd = (nodeName, stepName) => {\n        if (nodeName.trim() === '' || stepName.trim() === '') return;\n        const newFlow = { node: nodeName, step: stepName };\n        const updatedTemporaryWorkflow = [...temporaryWorkflow, newFlow];\n        setTemporaryWorkflow(updatedTemporaryWorkflow);\n        onTemporaryFlowAdd(newFlow);\n        togglePopup();\n    };\n\n    // 개별 워크플로우 항목을 삭제하는 함수\n    const handleRemoveFlow = (index) => {\n        const updatedWorkflow = temporaryWorkflow.filter((_, i) => i !== (index - workflow.length));\n        setTemporaryWorkflow(updatedWorkflow);\n        onTemporaryFlowDelete(temporaryWorkflow[index - workflow.length]);\n    };\n\n    // 임시 플로우 초기화 함수\n    useImperativeHandle(ref, () => ({\n        clearTemporaryWorkflow() {\n            setTemporaryWorkflow([]);\n        }\n    }));\n\n    return (\n        <div className=\"task-flow-container\">\n            <div className=\"task-flow-background\">\n                <div className=\"task-flow-list\">\n                    {/* 저장된 workflow와 임시 저장된 temporaryWorkflow 병합하여 표시 */}\n                    {workflow.concat(temporaryWorkflow).map((flow, index) => (\n                        <div key={index} className=\"task-flow-item\">\n                            <div>\n                                <strong>노드:</strong> {flow.node}\n                            </div>\n                            <div>\n                                <strong>단계:</strong> {flow.step}\n                            </div>\n                            {/* 삭제 버튼 추가: temporaryWorkflow에만 표시 */}\n                            {index >= workflow.length && (\n                                <button\n                                    className=\"task-flow-remove-btn\"\n                                    onClick={() => handleRemoveFlow(index)}\n                                >\n                                    ×\n                                </button>\n                            )}\n                        </div>\n                    ))}\n                    <div className=\"task-flow-add\">\n                        <button onClick={togglePopup} className=\"task-flow-button\">+</button>\n                    </div>\n                </div>\n            </div>\n            {isPopupOpen && (\n                <div className=\"popup-overlay\">\n                    <div className=\"popup-content\">\n                        <CreateTaskFlow onClose={togglePopup} onTaskFlowAdd={handleTaskFlowAdd} />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default TaskFlow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}