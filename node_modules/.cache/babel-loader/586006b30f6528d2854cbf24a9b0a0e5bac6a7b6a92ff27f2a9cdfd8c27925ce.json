{"ast":null,"code":"var _jsxFileName = \"/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\n// WebRTC 신호 서버에 연결 (라즈베리파이)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst webcamSocket = io('http://172.30.1.76:7000', {\n  transports: ['websocket'],\n  withCredentials: true\n});\n\n// 원격 PC의 SLAM 데이터 수신을 위한 WebSocket 연결\nconst slamSocket = io('http://172.30.1.40:3000', {\n  transports: ['websocket'],\n  withCredentials: true\n});\nfunction MapCreatePage() {\n  _s();\n  const [robots, setRobots] = useState([]);\n  const [selectedRobot, setSelectedRobot] = useState('');\n  const videoRef = useRef();\n  const peerRef = useRef(null);\n  const mapRef = useRef(null);\n\n  // 로봇 목록을 가져오는 부분\n  useEffect(() => {\n    const fetchRobots = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRobots(response.data);\n      } catch (error) {\n        console.error('Error fetching robots:', error);\n      }\n    };\n    fetchRobots();\n    return () => {\n      webcamSocket.disconnect();\n      slamSocket.disconnect();\n    };\n  }, []);\n\n  // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const peer = new RTCPeerConnection();\n      peer.ontrack = event => {\n        if (videoRef.current) {\n          videoRef.current.srcObject = event.streams[0];\n        }\n      };\n      peer.onicecandidate = event => {\n        if (event.candidate) {\n          webcamSocket.emit('candidate', event.candidate);\n        }\n      };\n      peerRef.current = peer;\n\n      // 신호 데이터 전송\n      webcamSocket.emit('join', {\n        robot_id: selectedRobot\n      });\n      webcamSocket.on('signal', async data => {\n        const {\n          signal\n        } = data;\n        if (signal.type === 'offer') {\n          await peer.setRemoteDescription(new RTCSessionDescription(signal));\n          const answer = await peer.createAnswer();\n          await peer.setLocalDescription(answer);\n          webcamSocket.emit('signal', {\n            signal: peer.localDescription,\n            robot_id: selectedRobot\n          });\n        } else if (signal.type === 'answer') {\n          await peer.setRemoteDescription(new RTCSessionDescription(signal));\n        }\n      });\n      webcamSocket.on('candidate', async candidate => {\n        await peer.addIceCandidate(new RTCIceCandidate(candidate));\n      });\n      return () => {\n        if (peerRef.current) {\n          peerRef.current.close();\n        }\n      };\n    }\n  }, [selectedRobot]);\n\n  // ROS 연결 설정 및 SLAM 데이터 처리 부분\n  useEffect(() => {\n    if (selectedRobot) {\n      const ros = new window.ROSLIB.Ros({\n        url: 'ws://172.30.1.40:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to ROS websocket server.');\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to ROS websocket server: ', error);\n      });\n      ros.on('close', () => {\n        console.log('Connection to ROS websocket server closed.');\n      });\n      const mapTopic = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/map',\n        messageType: 'nav_msgs/OccupancyGrid'\n      });\n      mapTopic.subscribe(message => {\n        console.log('Received message on /map: ', message);\n        if (message.info && message.data) {\n          const {\n            width,\n            height\n          } = message.info;\n          const data = message.data;\n          const canvas = mapRef.current;\n          const context = canvas.getContext('2d');\n          const imageData = context.createImageData(width, height);\n          for (let i = 0; i < data.length; i++) {\n            const value = data[i];\n            const color = value === -1 ? 255 : 255 - value;\n            imageData.data[i * 4] = color;\n            imageData.data[i * 4 + 1] = color;\n            imageData.data[i * 4 + 2] = color;\n            imageData.data[i * 4 + 3] = 255;\n          }\n          context.putImageData(imageData, 0, 0);\n        } else {\n          console.error('Received invalid /map message:', message);\n        }\n      });\n      return () => {\n        ros.close();\n      };\n    }\n  }, [selectedRobot]);\n\n  // 키보드 입력으로 로봇을 제어하는 부분\n  const handleKeyDown = useCallback(e => {\n    const velocityCommands = {\n      w: {\n        linear: 0.1,\n        angular: 0\n      },\n      a: {\n        linear: 0,\n        angular: 0.1\n      },\n      s: {\n        linear: -0.1,\n        angular: 0\n      },\n      d: {\n        linear: 0,\n        angular: -0.1\n      },\n      ' ': {\n        linear: 0,\n        angular: 0\n      }\n    };\n    if (velocityCommands[e.key]) {\n      slamSocket.emit('key_press', {\n        robot_id: selectedRobot,\n        velocity: velocityCommands[e.key]\n      });\n    }\n  }, [selectedRobot]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [selectedRobot, handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SLAM Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uB85C\\uBD07 \\uC120\\uD0DD:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedRobot(e.target.value),\n        value: selectedRobot,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"\\uB85C\\uBD07\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), robots.map(robot => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: robot._id,\n          children: robot.name\n        }, robot._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"SLAM \\uD654\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: mapRef,\n          width: \"600\",\n          height: \"600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"WebCam \\uD654\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(MapCreatePage, \"Vs+tKI37b83YVrs4zI5MNkijWFE=\");\n_c = MapCreatePage;\nexport default MapCreatePage;\nvar _c;\n$RefreshReg$(_c, \"MapCreatePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Navbar","LogoutButton","UserInfo","axios","io","jsxDEV","_jsxDEV","webcamSocket","transports","withCredentials","slamSocket","MapCreatePage","_s","robots","setRobots","selectedRobot","setSelectedRobot","videoRef","peerRef","mapRef","fetchRobots","token","localStorage","getItem","response","get","headers","Authorization","data","error","console","disconnect","peer","RTCPeerConnection","ontrack","event","current","srcObject","streams","onicecandidate","candidate","emit","robot_id","on","signal","type","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","localDescription","addIceCandidate","RTCIceCandidate","close","ros","window","ROSLIB","Ros","url","log","mapTopic","Topic","name","messageType","subscribe","message","info","width","height","canvas","context","getContext","imageData","createImageData","i","length","value","color","putImageData","handleKeyDown","e","velocityCommands","w","linear","angular","a","s","d","key","velocity","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","target","map","robot","_id","justifyContent","ref","autoPlay","playsInline","_c","$RefreshReg$"],"sources":["/home/ketgintern/Desktop/FMS-AGV-AMR/frontend/src/pages/Map/MapCreatePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Navbar from '../../components/Common/Navbar';\nimport LogoutButton from '../../components/Common/LogoutButton';\nimport UserInfo from '../../components/Common/UserInfo';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\n// WebRTC 신호 서버에 연결 (라즈베리파이)\nconst webcamSocket = io('http://172.30.1.76:7000', {\n    transports: ['websocket'],\n    withCredentials: true\n});\n\n// 원격 PC의 SLAM 데이터 수신을 위한 WebSocket 연결\nconst slamSocket = io('http://172.30.1.40:3000', {\n    transports: ['websocket'],\n    withCredentials: true\n});\n\nfunction MapCreatePage() {\n    const [robots, setRobots] = useState([]);\n    const [selectedRobot, setSelectedRobot] = useState('');\n    const videoRef = useRef();\n    const peerRef = useRef(null);\n    const mapRef = useRef(null);\n\n    // 로봇 목록을 가져오는 부분\n    useEffect(() => {\n        const fetchRobots = async () => {\n            try {\n                const token = localStorage.getItem('token');\n                const response = await axios.get('http://172.30.1.40:5559/robot/robots', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setRobots(response.data);\n            } catch (error) {\n                console.error('Error fetching robots:', error);\n            }\n        };\n\n        fetchRobots();\n\n        return () => {\n            webcamSocket.disconnect();\n            slamSocket.disconnect();\n        };\n    }, []);\n\n    // 선택된 로봇의 웹캠 스트림을 수신하는 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const peer = new RTCPeerConnection();\n\n            peer.ontrack = (event) => {\n                if (videoRef.current) {\n                    videoRef.current.srcObject = event.streams[0];\n                }\n            };\n\n            peer.onicecandidate = (event) => {\n                if (event.candidate) {\n                    webcamSocket.emit('candidate', event.candidate);\n                }\n            };\n\n            peerRef.current = peer;\n\n            // 신호 데이터 전송\n            webcamSocket.emit('join', { robot_id: selectedRobot });\n\n            webcamSocket.on('signal', async (data) => {\n                const { signal } = data;\n                if (signal.type === 'offer') {\n                    await peer.setRemoteDescription(new RTCSessionDescription(signal));\n                    const answer = await peer.createAnswer();\n                    await peer.setLocalDescription(answer);\n                    webcamSocket.emit('signal', { signal: peer.localDescription, robot_id: selectedRobot });\n                } else if (signal.type === 'answer') {\n                    await peer.setRemoteDescription(new RTCSessionDescription(signal));\n                }\n            });\n\n            webcamSocket.on('candidate', async (candidate) => {\n                await peer.addIceCandidate(new RTCIceCandidate(candidate));\n            });\n\n            return () => {\n                if (peerRef.current) {\n                    peerRef.current.close();\n                }\n            };\n        }\n    }, [selectedRobot]);\n\n    // ROS 연결 설정 및 SLAM 데이터 처리 부분\n    useEffect(() => {\n        if (selectedRobot) {\n            const ros = new window.ROSLIB.Ros({\n                url: 'ws://172.30.1.40:9090'\n            });\n\n            ros.on('connection', () => {\n                console.log('Connected to ROS websocket server.');\n            });\n\n            ros.on('error', (error) => {\n                console.log('Error connecting to ROS websocket server: ', error);\n            });\n\n            ros.on('close', () => {\n                console.log('Connection to ROS websocket server closed.');\n            });\n\n            const mapTopic = new window.ROSLIB.Topic({\n                ros: ros,\n                name: '/map',\n                messageType: 'nav_msgs/OccupancyGrid'\n            });\n\n            mapTopic.subscribe((message) => {\n                console.log('Received message on /map: ', message);\n                if (message.info && message.data) {\n                    const { width, height } = message.info;\n                    const data = message.data;\n                    const canvas = mapRef.current;\n                    const context = canvas.getContext('2d');\n                    const imageData = context.createImageData(width, height);\n\n                    for (let i = 0; i < data.length; i++) {\n                        const value = data[i];\n                        const color = value === -1 ? 255 : 255 - value;\n                        imageData.data[i * 4] = color;\n                        imageData.data[i * 4 + 1] = color;\n                        imageData.data[i * 4 + 2] = color;\n                        imageData.data[i * 4 + 3] = 255;\n                    }\n\n                    context.putImageData(imageData, 0, 0);\n                } else {\n                    console.error('Received invalid /map message:', message);\n                }\n            });\n\n            return () => {\n                ros.close();\n            };\n        }\n    }, [selectedRobot]);\n\n    // 키보드 입력으로 로봇을 제어하는 부분\n    const handleKeyDown = useCallback((e) => {\n        const velocityCommands = {\n            w: { linear: 0.1, angular: 0 },\n            a: { linear: 0, angular: 0.1 },\n            s: { linear: -0.1, angular: 0 },\n            d: { linear: 0, angular: -0.1 },\n            ' ': { linear: 0, angular: 0 }\n        };\n        if (velocityCommands[e.key]) {\n            slamSocket.emit('key_press', { robot_id: selectedRobot, velocity: velocityCommands[e.key] });\n        }\n    }, [selectedRobot]);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [selectedRobot, handleKeyDown]);\n\n    return (\n        <div>\n            <header>\n                <UserInfo />\n                <LogoutButton />\n            </header>\n            <div style={{ display: 'flex' }}>\n                <Navbar />\n            </div>\n            <h2>SLAM Control</h2>\n            <div>\n                <label>로봇 선택:</label>\n                <select onChange={(e) => setSelectedRobot(e.target.value)} value={selectedRobot}>\n                    <option value=\"\">로봇을 선택하세요</option>\n                    {robots.map(robot => (\n                        <option key={robot._id} value={robot._id}>{robot.name}</option>\n                    ))}\n                </select>\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div style={{ width: '50%' }}>\n                    <h3>SLAM 화면</h3>\n                    <canvas ref={mapRef} width=\"600\" height=\"600\" />\n                </div>\n                <div style={{ width: '50%' }}>\n                    <h3>WebCam 화면</h3>\n                    <video ref={videoRef} autoPlay playsInline style={{ width: '100%' }} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MapCreatePage;\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}